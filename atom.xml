<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>坠落星空💤</title>
  
  
  <link href="http://mobai278.github.io.git/atom.xml" rel="self"/>
  
  <link href="http://mobai278.github.io.git/"/>
  <updated>2023-04-06T12:34:16.491Z</updated>
  <id>http://mobai278.github.io.git/</id>
  
  <author>
    <name>坠落星空💤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洛雪助手</title>
    <link href="http://mobai278.github.io.git/2023/03/30/%E6%B4%9B%E9%9B%AA%E5%8A%A9%E6%89%8B/"/>
    <id>http://mobai278.github.io.git/2023/03/30/%E6%B4%9B%E9%9B%AA%E5%8A%A9%E6%89%8B/</id>
    <published>2023-03-30T12:36:19.000Z</published>
    <updated>2023-04-06T12:34:16.491Z</updated>
    
    <content type="html"><![CDATA[<p>接口目前支持音乐平台：QQ音乐、网抑音乐、酷我音乐、咪咕音乐 原版支持更多平台，</p><p>导入歌单，下载歌曲</p><p><img src="https://www.sixyin.com/wp-content/uploads/2020/02/1581906485-3ad2fccad9daaf2.png" alt="图片[1]-洛雪音乐助手 v2.0.4 正式版-六音"></p><p>一个基于 Electron + Vue 开发的音乐软件。</p><blockquote><p>关于洛雪音乐</p></blockquote><p>本软件完全免费,代码已开源,开源地址: <a href="https://github.com/lyswhut/lx-music-desktop">https://github.com/lyswhut/lx-music-desktop</a><br>最新版网盘下载地址(网盘内有Windows、MAC版) :</p><p>注意：安装版后缀为：-x64-Setup.exe</p><blockquote><p><a href="https://www.lanzoui.com/b0bf2cfa/">网盘地址</a>    密码: glqw      </p></blockquote><p>By:落无痕.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接口目前支持音乐平台：QQ音乐、网抑音乐、酷我音乐、咪咕音乐 原版支持更多平台，&lt;/p&gt;
&lt;p&gt;导入歌单，下载歌曲&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.sixyin.com/wp-content/uploads/2020/02/1581906485-3</summary>
      
    
    
    
    <category term="免费音乐" scheme="http://mobai278.github.io.git/categories/%E5%85%8D%E8%B4%B9%E9%9F%B3%E4%B9%90/"/>
    
    
    <category term="免费音乐" scheme="http://mobai278.github.io.git/tags/%E5%85%8D%E8%B4%B9%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Git上传命令符</title>
    <link href="http://mobai278.github.io.git/2023/03/28/Git%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4%E7%AC%A6/"/>
    <id>http://mobai278.github.io.git/2023/03/28/Git%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4%E7%AC%A6/</id>
    <published>2023-03-28T02:06:10.000Z</published>
    <updated>2023-04-06T12:36:44.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>基本语法</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> + 文件夹名   <span class="comment">##创建文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment">##查看创建目录</span></span><br><span class="line"></span><br><span class="line">git init   <span class="comment">##初始化.git文件</span></span><br><span class="line"></span><br><span class="line">git add .   <span class="comment">##上传所有文件</span></span><br><span class="line"></span><br><span class="line">git branch -M main | master <span class="comment">##修改上传分支</span></span><br><span class="line"></span><br><span class="line">git status .    <span class="comment">##查看仓库状态</span></span><br><span class="line"></span><br><span class="line">git checkout .    <span class="comment">##撤销</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>上传github指令</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git init  <span class="comment">##初始化.git文件</span></span><br><span class="line"></span><br><span class="line">git add .  <span class="comment">##上传所有文件</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;first&quot;</span>  <span class="comment">##添加描述</span></span><br><span class="line"></span><br><span class="line">git branch -M main  <span class="comment">##修改上传分支</span></span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/xxx/xxx.github.io.git  <span class="comment">##上传指定仓库地址</span></span><br><span class="line"></span><br><span class="line">git push -u origin main | master  <span class="comment">##上传分支</span></span><br><span class="line"></span><br><span class="line">git push -f origin master  <span class="comment">##本地强制上传到远程，把远程的覆盖</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;基本语法&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    
    <category term="Git命令" scheme="http://mobai278.github.io.git/tags/Git%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>安装nodejs+Vue+vue-cli</title>
    <link href="http://mobai278.github.io.git/2023/03/14/%E5%AE%89%E8%A3%85nodejs-Vue-vue-cli/"/>
    <id>http://mobai278.github.io.git/2023/03/14/%E5%AE%89%E8%A3%85nodejs-Vue-vue-cli/</id>
    <published>2023-03-14T01:52:37.000Z</published>
    <updated>2023-03-15T01:13:13.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1.安装 Node.js"></a>1.安装 Node.js</h2><p>超链接： <a href="https://blog.csdn.net/qq_48485223/article/details/122709354">Nodejs安装教程_彭佼的博客-CSDN博客</a></p><p>简化操作：</p><p>1.安装成功后【管理员】运行cmd，输入一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v     ---显示安装的nodejs版本</span><br><span class="line">npm -v     ---显示安装的npm版本</span><br><span class="line">或者</span><br><span class="line">npm install npm@latest -g ---更新为最新版 </span><br></pre></td></tr></table></figure><p>在安装nodejs路径下创建两个文件夹</p><p>【node_global】及【node_cache】</p><h3 id="1-1-修改全局模块下载路径"><a href="#1-1-修改全局模块下载路径" class="headerlink" title="1.1 修改全局模块下载路径"></a>1.1 修改全局模块下载路径</h3><p>说明：<br>prefix &#x3D; 创建的node_global文件夹所在路径</p><p>cache  &#x3D; 创建的node_cache文件夹所在路径</p><p>！！！注意“D:\Nodejs”为安装路径，或者其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-2、修改系统环境变量"><a href="#1-2、修改系统环境变量" class="headerlink" title="1.2、修改系统环境变量"></a>1.2、修改系统环境变量</h3><p>将【用户变量】下的【Path】修改为【D:\Nodejs\node_global】，之后点击确定。</p><p>在【系统变量】下新建【NODE_PATH】【D:\Nodejs\node_global\node_modules】</p><p>在【系统变量】下的【Path】新建添加node全局文件夹【D:\Nodejs\node_global】，之后点击确定。</p><p>若执行命令npm install express -g 【全局安装】出现报错</p><p>是由于权限的原因，右击Nodejs文件夹-&gt;属性-&gt;安全，点击编辑，将所有权限都✔即可。</p><h2 id="2-安装和更新、卸载vue"><a href="#2-安装和更新、卸载vue" class="headerlink" title="2. 安装和更新、卸载vue"></a>2. 安装和更新、卸载vue</h2><h3 id="2-1-安装："><a href="#2-1-安装：" class="headerlink" title="2.1 安装："></a>2.1 安装：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@next---本地安装</span><br><span class="line">npm install vue@next -g---全局安装</span><br><span class="line">npm i xxx--简写</span><br></pre></td></tr></table></figure><h4 id="2-1-1运行npm-install-时，卡住不动，五种解决方法"><a href="#2-1-1运行npm-install-时，卡住不动，五种解决方法" class="headerlink" title="2.1.1运行npm install 时，卡住不动，五种解决方法"></a>2.1.1运行npm install 时，卡住不动，五种解决方法</h4><p>检查网络设置，删除node_modules重新npm install<br>配置npm代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//  配置nmp代理来提高速度，如设置淘宝镜像</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org </span><br><span class="line"></span><br><span class="line">// 查看配置是否成功</span><br><span class="line">npm config get registry </span><br><span class="line"></span><br><span class="line">// 成功后重新npm install安装</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="2-2-更新："><a href="#2-2-更新：" class="headerlink" title="2.2 更新："></a>2.2 更新：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm update vue@next  ---更新vue项目</span><br><span class="line">npm update xxx     ---更新xxx</span><br></pre></td></tr></table></figure><h3 id="2-3-卸载："><a href="#2-3-卸载：" class="headerlink" title="2.3 卸载："></a>2.3 卸载：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue@next ---卸载vue项目</span><br><span class="line">npm uninstall xxx   ---xxx项目</span><br></pre></td></tr></table></figure><h2 id="3-安装脚手架"><a href="#3-安装脚手架" class="headerlink" title="3. 安装脚手架"></a>3. 安装脚手架</h2><h3 id="3-1-可以使用下列任一命令安装这个新的包："><a href="#3-1-可以使用下列任一命令安装这个新的包：" class="headerlink" title="3.1 可以使用下列任一命令安装这个新的包："></a>3.1 可以使用下列任一命令安装这个新的包：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli   --全局安装</span><br><span class="line"><span class="comment"># 或者 使用</span></span><br><span class="line">yarn global add @vue/cli  --指定安装</span><br></pre></td></tr></table></figure><h3 id="3-2-安装之后，你就可以在命令行中访问-vue-命令。你可以通过简单运行-vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。"><a href="#3-2-安装之后，你就可以在命令行中访问-vue-命令。你可以通过简单运行-vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。" class="headerlink" title="3.2 安装之后，你就可以在命令行中访问 vue 命令。你可以通过简单运行 vue，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。"></a>3.2 安装之后，你就可以在命令行中访问 <code>vue</code> 命令。你可以通过简单运行 <code>vue</code>，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</h3><p>你还可以用这个命令来检查其版本是否正确：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h3 id="3-3-运行以下命令来创建一个新项目："><a href="#3-3-运行以下命令来创建一个新项目：" class="headerlink" title="3.3 运行以下命令来创建一个新项目："></a>3.3 运行以下命令来创建一个新项目：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world   ---创建hellow-world项目</span><br></pre></td></tr></table></figure><h3 id="3-4-运行以下命令来启动项目脚手架"><a href="#3-4-运行以下命令来启动项目脚手架" class="headerlink" title="3.4 运行以下命令来启动项目脚手架"></a>3.4 运行以下命令来启动项目脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue run serve</span><br></pre></td></tr></table></figure><h3 id="3-5使用图形化界面"><a href="#3-5使用图形化界面" class="headerlink" title="3.5使用图形化界面#"></a>3.5使用图形化界面<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2">#</a></h3><p>你也可以通过 <code>vue ui</code> 命令以图形化界面创建和管理项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>超链接：<a href="https://blog.csdn.net/weixin_41819098/article/details/91901115">vue脚手架通过ui界面方式创建项目_搬砖猴哥的博客-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装-Node-js&quot;&gt;&lt;a href=&quot;#1-安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;1.安装 Node.js&quot;&gt;&lt;/a&gt;1.安装 Node.js&lt;/h2&gt;&lt;p&gt;超链接： &lt;a href=&quot;https://blog.csd</summary>
      
    
    
    
    <category term="web前端" scheme="http://mobai278.github.io.git/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://mobai278.github.io.git/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Win10版本激活</title>
    <link href="http://mobai278.github.io.git/2023/03/10/WIn10%E6%BF%80%E6%B4%BB/"/>
    <id>http://mobai278.github.io.git/2023/03/10/WIn10%E6%BF%80%E6%B4%BB/</id>
    <published>2023-03-10T08:34:41.000Z</published>
    <updated>2023-03-10T08:49:25.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微软官方Win10-ISO镜像下载及安装演示"><a href="#微软官方Win10-ISO镜像下载及安装演示" class="headerlink" title="微软官方Win10 ISO镜像下载及安装演示"></a>微软官方Win10 ISO镜像下载及安装演示</h3><p> <strong>〆浅伤丶</strong>  <strong>2021-6-04</strong>  <strong>207</strong>  174.2k  26<strong>原创文章，版权归作者解释，转载需署名。</strong></p><p>资源来自：itellyou，由于x86目前很少有人用，在此就不提供了…</p><h3 id="🍓-镜像下载"><a href="#🍓-镜像下载" class="headerlink" title="🍓 镜像下载"></a>🍓 镜像下载</h3><table><thead><tr><th>系统</th><th>版本</th><th>发布时间</th><th>文件大小</th><th>下载地址</th></tr></thead><tbody><tr><td>Win10 21H2</td><td>Consumer Editions</td><td>2022-03-15</td><td>5.51GB</td><td><a href="https://share.weiyun.com/0XP7QTvT">微云</a></td></tr><tr><td>Win10 21H2</td><td>Business Editions</td><td>2022-03-15</td><td>5.4GB</td><td><a href="https://share.weiyun.com/o0PdNxPH">微云</a></td></tr><tr><td>Win10 21H1</td><td>Consumer Editions</td><td>2021-09-21</td><td>5.42GB</td><td><a href="https://share.weiyun.com/1pxCOFoy">微云</a></td></tr><tr><td>Win10 21H1</td><td>Business Editions</td><td>2021-09-21</td><td>5.32GB</td><td><a href="https://share.weiyun.com/b3o2jeko">微云</a></td></tr><tr><td>Win10 20H2</td><td>Consumer Editions</td><td>2021-04-20</td><td>5.8GB</td><td><a href="https://share.weiyun.com/jUnGque5">微云</a></td></tr><tr><td>Win10 20H2</td><td>Business Editions</td><td>2021-04-20</td><td>5.64GB</td><td><a href="https://share.weiyun.com/NcFdmJAX">微云</a></td></tr><tr><td>Win10 2004</td><td>Consumer Editions</td><td>2020-05-21</td><td>4.9GB</td><td><a href="https://share.weiyun.com/fQGzvRkw">微云</a></td></tr><tr><td>Win10 2004</td><td>Business Editions</td><td>2020-05-21</td><td>4.8GB</td><td><a href="https://share.weiyun.com/VmJr78Qs">微云</a></td></tr><tr><td>Win10 1909</td><td>Consumer Editions</td><td>2020-01-21</td><td>5.05GB</td><td><a href="https://share.weiyun.com/5iZlqOd">微云</a></td></tr><tr><td>Win10 1909</td><td>Business Editions</td><td>2020-01-21</td><td>4.95GB</td><td><a href="https://share.weiyun.com/5YF9eaT">微云</a></td></tr><tr><td>Win10 1903</td><td>Consumer Editions</td><td>2019-08-21</td><td>4.94GB</td><td><a href="https://share.weiyun.com/5EXoHTd">微云</a></td></tr><tr><td>Win10 1903</td><td>Business Editions</td><td>2019-08-21</td><td>4.85GB</td><td><a href="https://share.weiyun.com/5EUnKIR">微云</a></td></tr></tbody></table><h3 id="🍌-激活密钥"><a href="#🍌-激活密钥" class="headerlink" title="🍌 激活密钥"></a>🍌 激活密钥</h3><p>专业版、家庭版：VTNMT-2FMYP-QCY43-QR9VK-WTVCK</p><p>专业版 安装密钥：VK7JG-NPHTM-C97JM-9MPGT-3V66T</p><p>专业版 激活密钥：W269N-WFGWX-YVC9B-4J6C9-T83GX</p><p>这些密钥收集自网络，或许不能用，请自行淘宝、百度或购买正版！！！</p><h3 id="🍉-激活方法"><a href="#🍉-激活方法" class="headerlink" title="🍉 激活方法"></a>🍉 激活方法</h3><p>以专业版为例，在开始按钮处右键 – PowerShell（管理员），依次粘贴下列三行内容，并回车：</p><pre class="prettyprint linenums ql-syntax prettyprinted" spellcheck="false"><ol class="linenums"><li class="L0"><p><span class="pln">slmgr </span><span class="pun">/</span><span class="pln">ipk W269N</span><span class="pun">-</span><span class="pln">WFGWX</span><span class="pun">-</span><span class="pln">YVC9B</span><span class="pun">-</span><span class="lit">4J6C9</span><span class="pun">-</span><span class="pln">T83GX</span></p></li><li class="L1" data-node-id="20230310163838-bm4b06q"><p><span class="pln"> </span></p></li><li class="L2"><p><span class="pln">slmgr </span><span class="pun">/</span><span class="pln">skms zh</span><span class="pun">.</span><span class="pln">us</span><span class="pun">.</span><span class="pln">to</span></p></li><li class="L3" data-node-id="20230310163838-xktd6cy"><p><span class="pln"> </span></p></li><li class="L4"><p><span class="pln">slmgr </span><span class="pun">/</span><span class="pln">ato</span></p></li></ol></pre><h3 id="🍍-注意事项"><a href="#🍍-注意事项" class="headerlink" title="🍍 注意事项"></a>🍍 注意事项</h3><p>镜像文件可以用来升级你目前的系统或重装系统！虽然安装时可以选择保留你C盘的个人文件，但微软也有出错的时候，为了保险，请尽量备份个人文件；为了防止安装过程中发生停电、地震等不可抗因素，导致无法进入系统，新手在安装前必须<a href="https://www.wepe.com.cn/">安装PE系统</a>！！！</p><p>如果你是正版系统，请在安装系统前<a href="https://jingyan.baidu.com/article/1e5468f9614e4f484961b723.html">备份你的密钥</a>。</p><p><strong>本站仅提供官方镜像下载，不提供盗版，安装过程如造成数据丢失或其它因素，均和本站无关，一切责任自负！</strong></p><h3 id="🍈-安装演示"><a href="#🍈-安装演示" class="headerlink" title="🍈 安装演示"></a>🍈 安装演示</h3><p>将镜像文件下载到非C盘，下载完成后，右键 – 打开方式 – 选择你电脑上的解压软件</p><p>（如果你没安装解压缩软件，请<a href="https://wwcr.lanzoul.com/iILNn0gtpcud">点此下载WinRAR</a>）</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-1.jpg"></p><p>将里面的文件全选，解压到非C盘且非文件夹内，比如：D:\</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-2.jpg"></p><p>解压后，找到解压出来的 setup.exe，运行：</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-3.jpg"></p><p>运行后根据里面的文字提示操作：</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-4.jpg"></p><p>遇到一切服务条款均接受或同意：</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-5.jpg"></p><p>会提示是否保留你C盘内的个人文件，请根据个人需求选择：</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-6.jpg"></p><p>选择后即可开始安装：</p><p>（由于我个人文件全在D盘，所以一般重装系统我都选择的删除所有C盘文件）</p><p><img src="https://dl.zhutix.net/2019/02/win10jxanz-7.jpg"></p><p>进入安装界面，期间会自动重启：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-01.jpg"></p><p>重启后进入安装：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-02.jpg"></p><p>安装完成后进入区域设置界面，默认：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-04.jpg"></p><p>键盘默认选微软拼音：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-05.jpg"></p><p>提示是否需要第二种键盘布局，选择跳过：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-06.jpg"></p><p>选择针对个人使用：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-07.jpg"></p><p>下面这个比较重要，很多人没有微软的账户，我们就选择脱机账户：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-08.jpg"></p><p>微软会不死心的再次提示你是否转而用微软账户，这提示太鸡肋了，我们选择否：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-09.jpg"></p><p>输入你的用户名：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-10.jpg"></p><p>输入一个简单点儿的密码：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-11.jpg"></p><p>后面的默认都选是或接受：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-12.jpg"></p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-13.jpg"></p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-14.jpg"></p><p>设置后稍等数分钟会自动进入系统：</p><p><img src="https://dl.zhutix.net/2019/02/win10isoaz-16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;微软官方Win10-ISO镜像下载及安装演示&quot;&gt;&lt;a href=&quot;#微软官方Win10-ISO镜像下载及安装演示&quot; class=&quot;headerlink&quot; title=&quot;微软官方Win10 ISO镜像下载及安装演示&quot;&gt;&lt;/a&gt;微软官方Win10 ISO镜像下载及安装</summary>
      
    
    
    
    <category term="win系统" scheme="http://mobai278.github.io.git/categories/win%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="win系统" scheme="http://mobai278.github.io.git/tags/win%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>绿色软件及游戏</title>
    <link href="http://mobai278.github.io.git/2022/10/23/%E7%BB%BF%E8%89%B2%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B8%B8%E6%88%8F/"/>
    <id>http://mobai278.github.io.git/2022/10/23/%E7%BB%BF%E8%89%B2%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B8%B8%E6%88%8F/</id>
    <published>2022-10-23T12:29:48.000Z</published>
    <updated>2023-03-31T00:59:55.301Z</updated>
    
    <content type="html"><![CDATA[<div class="flink"><div class="flink-name">绿色软件网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.6yit.com/" title="六音软件" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.6yit.com/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="六音软件" />              </div>              <div class="flink-item-name">六音软件</div>               <div class="flink-item-desc" title="绿色软件分享">绿色软件分享</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.ghxi.com/" title="果核剥壳" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.ghxi.com/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="果核剥壳" />              </div>              <div class="flink-item-name">果核剥壳</div>               <div class="flink-item-desc" title="互联网的净土-软件分享">互联网的净土-软件分享</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.fy6b.com/favicon.ico" title="枫音应用" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.fy6b.com/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="枫音应用" />              </div>              <div class="flink-item-name">枫音应用</div>               <div class="flink-item-desc" title="免费分享纯净无毒软件">免费分享纯净无毒软件</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.423down.com/" title="423DWON" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.423down.com/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="423DWON" />              </div>              <div class="flink-item-name">423DWON</div>               <div class="flink-item-desc" title="免费分享纯净无毒软件">免费分享纯净无毒软件</div>            </a>          </div></div></div><div class="flink"><div class="flink-name">游戏网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://xxxxx520.com/" title="Switch520" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://sway.office.com/s/bRQwebfLdaNez2Nl/images/P31w2bg4VTaH9a" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Switch520" />              </div>              <div class="flink-item-name">Switch520</div>               <div class="flink-item-desc" title="全球网白嫖游戏">全球网白嫖游戏</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.ali213.net/zhuanti/yxk/?green" title="微软游戏常用运行库" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.ali213.net/favicon.ico" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="微软游戏常用运行库" />              </div>              <div class="flink-item-name">微软游戏常用运行库</div>               <div class="flink-item-desc" title="游戏常用运行库安装包_游戏工具_游侠补丁_游侠网">游戏常用运行库安装包_游戏工具_游侠补丁_游侠网</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.yikm.net/" title="小霸王" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.yikm.net/f.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="小霸王" />              </div>              <div class="flink-item-name">小霸王</div>               <div class="flink-item-desc" title="小霸王，其乐无穷">小霸王，其乐无穷</div>            </a>          </div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;flink&quot;&gt;&lt;div class=&quot;flink-name&quot;&gt;绿色软件网站&lt;/div&gt;&lt;div class=&quot;flink-desc&quot;&gt;值得推荐的网站&lt;/div&gt; &lt;div class=&quot;flink-list&quot;&gt;
          &lt;div class=&quot;</summary>
      
    
    
    
    <category term="软件及游戏" scheme="http://mobai278.github.io.git/categories/%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B8%B8%E6%88%8F/"/>
    
    
    <category term="软件下载" scheme="http://mobai278.github.io.git/tags/%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>蓝奏云链接</title>
    <link href="http://mobai278.github.io.git/2022/10/23/%E8%93%9D%E5%A5%8F%E4%BA%91%E9%93%BE%E6%8E%A5/"/>
    <id>http://mobai278.github.io.git/2022/10/23/%E8%93%9D%E5%A5%8F%E4%BA%91%E9%93%BE%E6%8E%A5/</id>
    <published>2022-10-23T12:14:00.000Z</published>
    <updated>2023-03-02T12:37:13.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人蓝奏云分享"><a href="#个人蓝奏云分享" class="headerlink" title="个人蓝奏云分享"></a>个人蓝奏云分享</h1><p> <a href="https://wwcr.lanzoul.com/b01prnfxa">https://wwcr.lanzoul.com/b01prnfxa</a> 密码:hycp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人蓝奏云分享&quot;&gt;&lt;a href=&quot;#个人蓝奏云分享&quot; class=&quot;headerlink&quot; title=&quot;个人蓝奏云分享&quot;&gt;&lt;/a&gt;个人蓝奏云分享&lt;/h1&gt;&lt;p&gt; &lt;a href=&quot;https://wwcr.lanzoul.com/b01prnfxa&quot;&gt;http</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C# 语法</title>
    <link href="http://mobai278.github.io.git/2022/10/18/C-%E8%AF%AD%E6%B3%95/"/>
    <id>http://mobai278.github.io.git/2022/10/18/C-%E8%AF%AD%E6%B3%95/</id>
    <published>2022-10-18T03:43:08.000Z</published>
    <updated>2022-10-31T01:39:00.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h2 id="1-历史"><a href="#1-历史" class="headerlink" title="1. 历史"></a>1. 历史</h2><ul><li>Visual J++ 被放弃，<a href="https://baike.baidu.com/item/%E5%AE%89%E5%BE%B7%E6%96%AF%C2%B7%E6%B5%B7%E5%B0%94%E6%96%AF%E4%BC%AF%E6%A0%BC">安德斯·海尔斯伯格</a>带领团队从 2000 年左右开始开发了 C#，到 2002 年的的时候，开始提交给 ECMA 成为了标准</li><li>因为安德斯他的个人经历，所以 C# 深受 Pascal&#x2F;C++&#x2F;Java 的影响</li><li>到现在，C# 已经成为了一种多范式的语言。首先它是一门纯粹的面向对象的语言 (封装、继承、多态)，提供了面向组件编程的一些改进 (属性、委托、事件)</li></ul><p>C# 版本演化:</p><ul><li>1.0 纯粹的面向对象 (2002)</li><li>2.0 增加了泛型的概念 (2005)</li><li>3.0 增加了 LINQ 功能 (2008)</li><li>4.0 增加了命名参数和可选参数的功能，并添加了动态编程的支持 (2010)</li><li>5.0 增加了 async&#x2F;await 的异步编程范式 (2012)</li><li>6.0 推进了跟 .NET Core 的语言共享 (2015)</li><li>7.0 添加了函数式编程的一些特性，如果模式匹配、元组等等，包括其他一些优化 (2017)</li><li>8.0 开始支持默认接口方法，可空引用类型，switch 表达式等 (2019)</li><li>9.0 增加了 Record 类型，继续对 switch 表达式等进行简化跟优化 (2021)</li></ul><h2 id="2-语言与类型"><a href="#2-语言与类型" class="headerlink" title="2. [语言与类型]"></a>2. [语言与类型]</h2><p>在 C# 等面向对象的语言中，<em>类型 (Type)</em> 是第一位的</p><ul><li>在 C# 中，不外乎做两件事，第一件是引入别人的类型，第二件是声明自己的类型</li><li>也就是说，整个 C# 项目，是由不同的 <strong>类型声明</strong> 组成的</li><li>在整个 C# 项目中，需要 <strong>有且只有一个</strong> 特殊的方法，就是 Main 方法。它是程序执行的起点</li><li>通过引入 <strong>命名空间 (namespace)</strong> 的概念，用来组织各种类型，从而避免命名冲突</li></ul><p><img src="http://yaoqisan.local:7373/html/dotnet/img/types.png" alt="types.png"></p><p><img src="http://yaoqisan.local:7373/html/dotnet/img/types-2.png" alt="types-2.png"></p><h3 id="2-1-Main"><a href="#2-1-Main" class="headerlink" title="2.1. Main"></a>2.1. Main</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span> (<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> 如果正常返回则是 <span class="number">0</span>，否则是一个整数代表错误编号;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> (<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果真的不关心返回的错误编号的话，可以将返回值设置为 void</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用 args 来捕获从控制台输入的参数 (用空格分隔的元素)</span></span><br><span class="line">    <span class="keyword">if</span> (args.Length &gt; <span class="number">0</span> &amp;&amp; args[<span class="number">0</span>] == <span class="string">&quot;--help&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;使用方式: ./Program&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果你真的不在乎传入参数的话，那么将 args 省略掉也可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> CCCAync();</span><br><span class="line">    <span class="keyword">await</span> AAA();</span><br><span class="line">    <span class="keyword">await</span> BBB();</span><br><span class="line">    DDD();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>args 使用的另一个示例:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.Length == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (args[<span class="number">0</span>] == <span class="string">&quot;--help&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;使用方法: dotnet run 2223&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">double</span> bill = <span class="built_in">double</span>.Parse(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> calc = <span class="keyword">new</span> TipCalculator(bill);</span><br><span class="line">            calc.PrintToConsole();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;参数错误.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-命名空间"><a href="#2-2-命名空间" class="headerlink" title="2.2. 命名空间"></a>2.2. 命名空间</h3><ul><li>用来解决类型名字的冲突</li><li>用来合理组织类型</li></ul><h4 id="2-2-1-使用"><a href="#2-2-1-使用" class="headerlink" title="2.2.1. 使用"></a>2.2.1. 使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 类型的使用，可以通过 namespace.类型 来访问到 / full name</span><br><span class="line">System.String aaa = System.IO.File.ReadAllText(&quot;e:\\aaa.txt&quot;);</span><br><span class="line">System.Console.WriteLine(aaa);</span><br><span class="line">System.Console.WriteLine(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">// 可以借助 using 命名空间的方式，简化类型的使用</span><br><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">string aaa = File.ReadAllText(&quot;e:\\aaa.txt&quot;);</span><br><span class="line">Console.WriteLine(aaa);</span><br><span class="line">Console.WriteLine(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">// 可以使用 using static 的语法继续进行简化</span><br><span class="line">using static System.Console;</span><br><span class="line">using static System.IO.File;</span><br><span class="line">string aaa = ReadAllText(&quot;e:\\aaa.txt&quot;);</span><br><span class="line">WriteLine(aaa);</span><br><span class="line">WriteLine(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">// 可以使用 using = 的方式，为命名空间起一个别名。这种方式一般用来解决冲突</span><br><span class="line">using SI = System.IO;</span><br><span class="line">using HisSystem;</span><br><span class="line">SI.File.xxx();  // System.IO.File.xxx();</span><br><span class="line">File.xxx();     // HisSystem.FIle.xxx();</span><br></pre></td></tr></table></figure><h4 id="2-2-2-定义"><a href="#2-2-2-定义" class="headerlink" title="2.2.2. 定义"></a>2.2.2. 定义</h4><p>支持嵌套，支持使用 . 的形式进行简写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">using SI = System.IO; // File</span><br><span class="line"></span><br><span class="line">namespace TaxCalculator</span><br><span class="line">&#123;</span><br><span class="line">    namespace Hi</span><br><span class="line">    &#123;</span><br><span class="line">        namespace Ih // TaxCalculator.Hi.Ih.Boy</span><br><span class="line">        &#123;</span><br><span class="line">            class Boy</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        class Girl // TaxCalculator.Hi.Girl</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    namespace A.B.C.D.E.F</span><br><span class="line">    &#123;</span><br><span class="line">        namespace G.H.X</span><br><span class="line">        &#123;</span><br><span class="line">            using static System.Console;</span><br><span class="line">            namespace Y</span><br><span class="line">            &#123;</span><br><span class="line">                class Hello</span><br><span class="line">                &#123;</span><br><span class="line">                    void Say()</span><br><span class="line">                    &#123;</span><br><span class="line">                        WriteLine(&quot;hello&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    namespace B</span><br><span class="line">    &#123;</span><br><span class="line">        using System;</span><br><span class="line">        class Program // TaxCalculator.Program</span><br><span class="line">        &#123;</span><br><span class="line">            static void Main()</span><br><span class="line">            &#123;</span><br><span class="line">                string aaa = SI.File.ReadAllText(&quot;e:\\aaa.txt&quot;);</span><br><span class="line">                Console.WriteLine(aaa);</span><br><span class="line">                Console.WriteLine(&quot;hello&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-BCL-x2F-System"><a href="#2-2-3-BCL-x2F-System" class="headerlink" title="2.2.3. BCL&#x2F;System"></a>2.2.3. BCL&#x2F;System</h4><p>System 命名空间:</p><ul><li>System.IO (Input&#x2F;Output), 文件的处理</li><li>System.Drawing, 绘制图片</li><li>System.Collections，集合类型</li><li>System.Net，网络访问</li><li>System.Text，跟文本相关的内容，比如正则表达式</li><li>System.Threading，多线程</li><li>System.Threading.Tasks，异步编程</li></ul><h3 id="2-3-模板-vs-实例"><a href="#2-3-模板-vs-实例" class="headerlink" title="2.3. 模板 vs 实例"></a>2.3. 模板 vs 实例</h3><p>类型就是用来创建数据结构的一种 <strong>模板</strong>：</p><ul><li>类型本身并不是真正的数据，它只是描述了数据应该怎么被构造出来</li><li>类型它需要有名字，占用的空间，包括一系列的属性和行为</li></ul><p>通过某个类型模板创建实际的对象，称作 <strong>实例化</strong> 该类型:</p><ul><li>它就是真正的数据。类型的实例，类型的对象。所有的数据都是要根据类型创建出来的</li><li>类型的话，要么是平台预定义的，要么是 BCL&#x2F;FCL 中定义的，要么是你自己声明的</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">xxx</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">yyy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i;</span><br><span class="line">    xxx xxx; <span class="comment">// 2 使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> yyy(); <span class="comment">// 2 使用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> a = <span class="number">333</span>; <span class="comment">// 不需要声明，直接实例化</span></span><br></pre></td></tr></table></figure><h3 id="2-4-值类型-vs-引用类型"><a href="#2-4-值类型-vs-引用类型" class="headerlink" title="2.4. 值类型 vs 引用类型"></a>2.4. 值类型 vs 引用类型</h3><p>内存分为两部分:</p><ul><li>栈 (Stack)，速度快</li><li>堆 (Heap)，容积大</li></ul><p><img src="http://yaoqisan.local:7373/html/dotnet/img/value-type-ref-type.png" alt="value-type-ref-type.png"></p><h2 id="3-预定义数值类型"><a href="#3-预定义数值类型" class="headerlink" title="3. 预定义数值类型"></a>3. 预定义数值类型</h2><h3 id="3-1-整数"><a href="#3-1-整数" class="headerlink" title="3.1. 整数"></a>3.1. 整数</h3><p>为了表示显示世界中的计算，人们发明了数字的记法:</p><ul><li>通用的计算方式是 <strong>十进制</strong> (因为人自古来来，都有十根手指头)</li><li>计算机内部使用的是 <strong>二进制</strong> (因为使用电子元件状态表达 0&#x2F;1 是最简单的)</li><li>人们一般使用 <strong>十六进制</strong> 来描述计算机中的二进制 (其表达能力更强，且能跟字节为单位的二进制形成对应关系)</li></ul><p>为了能在计算机中有效存储整数，C# 中预定义了如下类型:</p><ul><li>byte (字节，使用 8bit 表示，它的表现能力最差，只有 0 ~ 255)</li><li>short (短整数，使用 2Byte 表示，能表示到 3 万大小)</li><li>int (整数，4B 长度，能表达到 20 多亿)</li><li>long (长整数，16B 长度，能表达到亿亿的单位)</li></ul><p>另外，考虑是否设置符号位 (Sign&#x2F;Unsign)，上面的类型又有对应的类型:</p><ul><li>sbyte</li><li>ushort</li><li>uint</li><li>ulong</li></ul><p>上述的类型都是用来创建整数数据的模板，它们的区别在于占用空间和表达里。 选择类型的根据是:</p><ul><li>占用小的，表达能力差；占用大的，表达能力强</li><li>在业务的允许范围内，尽量选择占用空间小的类型</li><li>如果不好决定使用声明类型，优先使用 int</li></ul><p>整数:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">byte</span> aa = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">byte</span> az = <span class="number">255</span>;</span><br><span class="line"><span class="built_in">sbyte</span> ba = <span class="number">-128</span>;</span><br><span class="line"><span class="built_in">sbyte</span> bz = <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">short</span> s1 = <span class="number">-32768</span>;</span><br><span class="line"><span class="built_in">short</span> s2 = <span class="number">32767</span>;</span><br><span class="line"><span class="built_in">ushort</span> s3 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ushort</span> s4 = <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i1 = <span class="number">-2147483648</span>;</span><br><span class="line"><span class="built_in">int</span> i2 = <span class="number">21</span>_4748_3647;</span><br><span class="line"><span class="built_in">uint</span> i3 = <span class="number">42</span>_9496_7295;</span><br><span class="line"></span><br><span class="line"><span class="built_in">long</span> l1 = <span class="number">3232323232335555355</span>;</span><br><span class="line"><span class="built_in">ulong</span> l2 = <span class="number">23333333333333333</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line">Console.WriteLine(<span class="number">100</span> * <span class="number">0.28</span>);</span><br><span class="line">Console.WriteLine(<span class="number">100</span> * <span class="number">0.27</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">short</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">long</span> d = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C# 现在允许使用分隔符描述数字，这样具备更好的可读性</span></span><br><span class="line"><span class="built_in">long</span> xxx = <span class="number">11</span>_1161_1311_4441_2323;</span><br><span class="line"><span class="built_in">int</span> yyy = <span class="number">2323</span>;</span><br></pre></td></tr></table></figure><p>可以直接使用二进制&#x2F;十六进制的方式描述数字:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">byte</span> zzz = <span class="number">0b11111111</span>;</span><br><span class="line">Console.WriteLine(zzz);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 16 进制 10 2 </span></span><br><span class="line"><span class="comment">// 0,1,10,11,100,101,110,111</span></span><br><span class="line"><span class="comment">// 1,2,..9,10,11,12..19</span></span><br><span class="line"><span class="comment">// 1, 2,...9, a, b, c, d, e, f / 15, 1111</span></span><br><span class="line"><span class="comment">// 10, 11, 12 .. 1e, 1f     0001_1111</span></span><br><span class="line"><span class="comment">// 20,...............2f</span></span><br><span class="line"><span class="comment">// 30................3f</span></span><br><span class="line"><span class="comment">//                   9f</span></span><br><span class="line"><span class="comment">// a0................af</span></span><br><span class="line"><span class="comment">// b0................bf</span></span><br><span class="line"><span class="comment">// c0................cf</span></span><br><span class="line"><span class="comment">// d0................df</span></span><br><span class="line"><span class="comment">// e0................ef</span></span><br><span class="line"><span class="comment">// f0..............fe.ff 256 1111_1111</span></span><br><span class="line"><span class="comment">// 100 .. 101. .....</span></span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="number">0b11111111</span>_11111110_11111111);</span><br><span class="line">Console.WriteLine(<span class="number">0x1e</span>);</span><br><span class="line">Console.WriteLine(<span class="number">0xff</span>_fe_ab_12);</span><br><span class="line">Console.WriteLine(<span class="number">2222323</span>);</span><br></pre></td></tr></table></figure><p><img src="http://yaoqisan.local:7373/html/dotnet/img/integers.png" alt="integers.png"></p><h3 id="3-2-浮点数"><a href="#3-2-浮点数" class="headerlink" title="3.2. 浮点数"></a>3.2. 浮点数</h3><ul><li><p>根据存储形式，分为单精度 (float) 和双精度 (double)</p></li><li><p><strong>float</strong> 使用 32bit 来存储 (1 个符号位 8 个指数位 23 个尾数)</p></li><li><p><strong>double</strong> 使用 64bit 来存储 (1 个符号位 11 个指数位 52 个尾数)</p></li><li><p>一个小数，转换为计算机存储的形式，难免会有精度的损失。因此</p><ul><li>0.1 + 0.2 ≠ 0.3</li><li>0.6 + 0.7 &#x3D; 1.2999999999999998</li><li>0.28 * 100 &#x3D; 28.000000000000004</li></ul></li><li><p>可以使用</p><p>decimal</p><p>类型，来表示更加精确的数值计算</p><ul><li>它的优点是，可以进行精确的计算</li><li>它的缺点是，它需要占用更大的存储空间 (128bit)</li></ul></li></ul><p><img src="http://yaoqisan.local:7373/html/dotnet/img/float-type.png" alt="float-type.png"></p><h3 id="3-3-Literate-字面量表达"><a href="#3-3-Literate-字面量表达" class="headerlink" title="3.3. Literate (字面量表达)"></a>3.3. Literate (字面量表达)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="comment">// 1112 int</span></span><br><span class="line"><span class="comment">// 1112L long</span></span><br><span class="line"><span class="comment">// 1112UL Unsigned Long</span></span><br><span class="line"><span class="comment">// 1112F float</span></span><br><span class="line"><span class="comment">// 1112.0 double</span></span><br><span class="line"><span class="comment">// 1112M decimal</span></span><br><span class="line">Console.WriteLine(<span class="number">0.1</span>M + <span class="number">0.2</span>M);</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> a = <span class="number">2222</span>;</span><br><span class="line"><span class="built_in">float</span> b1 = <span class="number">33332332323233</span>;</span><br><span class="line"><span class="built_in">float</span> b2 = <span class="number">2323F</span>;</span><br><span class="line"><span class="built_in">decimal</span> c = <span class="number">3.222</span>M;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> x = <span class="number">333</span>;</span><br><span class="line"><span class="built_in">long</span> y1 = <span class="number">54444</span>;</span><br><span class="line"><span class="built_in">long</span> y2 = <span class="number">54444L</span>;</span><br></pre></td></tr></table></figure><h2 id="4-预定义-x2F-非数值·值类型"><a href="#4-预定义-x2F-非数值·值类型" class="headerlink" title="4. 预定义&#x2F;非数值·值类型"></a>4. 预定义&#x2F;非数值·值类型</h2><h3 id="4-1-字符类型-char"><a href="#4-1-字符类型-char" class="headerlink" title="4.1. 字符类型 (char)"></a>4.1. 字符类型 (char)</h3><p>字符集&#x2F;编码格式:</p><ul><li>最原始的英文中的 <strong>ASCII</strong> 编码</li><li>后来出现的，各个国家的，比如 <strong>GBK&#x2F;Big5</strong></li><li>为了消除字符集冲突，出现的 <strong>Unicode</strong> 组织跟字符集。并根据字符集出现了 <strong>UTF-16&#x2F;UTF-8</strong> 等编码格式</li></ul><p>Q &amp; A:</p><ul><li>ucs-2 vs UTF-16 ????</li><li>UTF8 怎么的格式 ????</li></ul><p><img src="http://yaoqisan.local:7373/html/dotnet/img/unicode.png" alt="unicode.png"></p><p>因此，在 C# 中内部，字符是使用 UTF-16 格式存储的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> a = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">char</span> a = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="built_in">char</span> b = <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line"><span class="built_in">char</span> c = <span class="string">&#x27;☺&#x27;</span>;</span><br><span class="line"><span class="built_in">char</span> d = <span class="string">&#x27;⁞&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-布尔类型-bool"><a href="#4-2-布尔类型-bool" class="headerlink" title="4.2. 布尔类型 (bool)"></a>4.2. 布尔类型 (bool)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">bool</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> c = <span class="number">1</span> &gt; <span class="number">2</span>; <span class="comment">// &gt; &lt; == &gt;= &lt;=</span></span><br><span class="line"><span class="built_in">bool</span> d = <span class="number">1</span> == <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a = !!!!!a; <span class="comment">// 反</span></span><br><span class="line">a || b;     <span class="comment">// 或</span></span><br><span class="line">a &amp;&amp; b;     <span class="comment">// 与</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">true</span>; b = <span class="literal">false</span>; d = <span class="literal">true</span>; e = <span class="literal">false</span>;</span><br><span class="line">f = <span class="literal">true</span>; g = <span class="literal">true</span>; h = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">((a || b) &amp;&amp; (c &amp;&amp; d)) || e &amp;&amp; (f || g) || h;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-条件分支-在某种条件之下，做某件事"><a href="#4-2-1-条件分支-在某种条件之下，做某件事" class="headerlink" title="4.2.1. [条件分支] 在某种条件之下，做某件事"></a>4.2.1. [条件分支] 在某种条件之下，做某件事</h4><ul><li>if&#x2F;else if&#x2F;else</li><li>switch (statement&#x2F;expression)</li></ul><p>if:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">if</span> (aaa)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;满足则执行，否则跳过&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;您说我什么条件会被执行?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="built_in">int</span> score = <span class="number">59</span>; <span class="comment">// 分数</span></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;现在你的成绩是: <span class="subst">&#123;score&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;您的成绩还可以啦，请下一次更加优秀哦.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="built_in">int</span> score = <span class="number">59</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;现在你的成绩是: <span class="subst">&#123;score&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (score &lt; <span class="number">30</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;您太棒了，把您爸爸妈妈请过来一起分享这份荣耀吧.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (score &gt; <span class="number">60</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;您的成绩还可以啦，请下一次更加优秀哦.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;您的成绩还可以啦...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;现在你的成绩是: <span class="subst">&#123;score&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;您的成绩还可以啦，请下一次更加优秀哦.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">30</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;您的成绩还可以啦...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;您太棒了，把您爸爸妈妈请过来一起分享这份荣耀吧.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch (是 else if 语法的一种精简版):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">switch (c)</span><br><span class="line">&#123;</span><br><span class="line">    case &#x27;A&#x27;:</span><br><span class="line">    case &#x27;B&#x27;:</span><br><span class="line">        color = ConsoleColor.Yellow;</span><br><span class="line">        break;</span><br><span class="line">    case &#x27;C&#x27;:</span><br><span class="line">        color = ConsoleColor.Green;</span><br><span class="line">        break;</span><br><span class="line">    case &#x27;D&#x27;:</span><br><span class="line">        color = ConsoleColor.Blue;</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        color = ConsoleColor.Black;</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch statement (语句) 和 expression (表达式):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语句，每个分支去做点啥事</span></span><br><span class="line">ConsoleColor color;</span><br><span class="line"><span class="keyword">switch</span> (c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        color = ConsoleColor.Red;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        color = ConsoleColor.Yellow;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        color = ConsoleColor.Green;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        color = ConsoleColor.Blue;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        color = ConsoleColor.Black;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式，返回值</span></span><br><span class="line">ConsoleColor c1 = c <span class="keyword">switch</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> =&gt; ConsoleColor.Red,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span> =&gt; ConsoleColor.Yellow,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span> =&gt; ConsoleColor.Green,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span> =&gt; ConsoleColor.Blue,</span><br><span class="line">    _   =&gt; ConsoleColor.Black</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-循环迭代-重复做某件事"><a href="#4-2-2-循环迭代-重复做某件事" class="headerlink" title="4.2.2. [循环迭代] 重复做某件事"></a>4.2.2. [循环迭代] 重复做某件事</h4><ul><li>for</li><li>while</li><li>do while</li><li>foreach</li></ul><p>遍历字符串:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> s)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; s.Length)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s[i]);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(s[j]);</span><br><span class="line">    j++;</span><br><span class="line">&#125; <span class="keyword">while</span> (j &lt; s.Length);</span><br></pre></td></tr></table></figure><p>使用不同的方式，实现从 1 加到 10000 的和:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名不规范</span></span><br><span class="line"><span class="comment">// - 方法名，需要遵循 Pascal 语法 !!!</span></span><br><span class="line"><span class="comment">// - 变量的命名，要让代码具备自解释性 (望文生义)</span></span><br><span class="line"><span class="comment">// - 变量的名字/参数的变量，需要是驼峰写法</span></span><br><span class="line"><span class="comment">// 从 1 到 10000 &lt;不等于&gt; 从 0 到 10000。循环的过程一定要注意边界条件</span></span><br><span class="line"><span class="comment">// 合理设计方法 (返回值)</span></span><br><span class="line"><span class="comment">// 充分考虑到可变性，将一些值抽取为参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">10000</span>;</span><br><span class="line">    Console.WriteLine(SumWithFor(i) / <span class="number">2</span>);</span><br><span class="line">    Console.WriteLine(SumWithWhile(i));</span><br><span class="line">    Console.WriteLine(SumWithDoWhile(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">SumWithFor</span>(<span class="params"><span class="built_in">int</span> top</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">SumWithWhile</span>(<span class="params"><span class="built_in">int</span> top</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= top)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">SumWithDoWhile</span>(<span class="params"><span class="built_in">int</span> top</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= top);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过循环的方式，处理下面字符串:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将字符串进行反转</span></span><br><span class="line"><span class="comment">// 将所有的大写字母都提到前面</span></span><br><span class="line"><span class="built_in">string</span> a = <span class="string">&quot;hekjsdkfSldAfjKksjsjkKFfjHkl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Fanzhuan</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = str.Length<span class="number">-1</span>; i&gt;=<span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        result += str[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DaxieTiDaoQianMianWithFor</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    StringBuilder xiaoxie = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    StringBuilder daxie = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            xiaoxie.Append(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            daxie.Append(str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    daxie.Append(xiaoxie);</span><br><span class="line">    <span class="keyword">return</span> daxie.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-语句-Statement-vs-表达式-Expression"><a href="#4-2-3-语句-Statement-vs-表达式-Expression" class="headerlink" title="4.2.3. 语句 (Statement) vs 表达式 (Expression)"></a>4.2.3. 语句 (Statement) vs 表达式 (Expression)</h4><p>提问: 表达式和语句有社么区别?</p><p>语句 (Statement):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> r = <span class="keyword">new</span> Random().Next(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i;</span><br><span class="line"><span class="keyword">if</span> (r &gt; <span class="number">50</span>)</span><br><span class="line">    i = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    i = <span class="number">222</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i);</span><br></pre></td></tr></table></figure><p>表达式 (Expression):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> r = <span class="keyword">new</span> Random().Next(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i = (</span><br><span class="line">    <span class="keyword">if</span> (r &gt; <span class="number">50</span>)</span><br><span class="line">        <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="number">222</span>;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(i); <span class="comment">// if 不能作为表达式使用</span></span><br></pre></td></tr></table></figure><h2 id="5-预定义-x2F-非数值·引用类型"><a href="#5-预定义-x2F-非数值·引用类型" class="headerlink" title="5. 预定义&#x2F;非数值·引用类型"></a>5. 预定义&#x2F;非数值·引用类型</h2><h3 id="5-1-string"><a href="#5-1-string" class="headerlink" title="5.1. string"></a>5.1. string</h3><p>字符串，是由字符序列组成的一种数据结构。</p><h4 id="5-1-1-字符串的初始化"><a href="#5-1-1-字符串的初始化" class="headerlink" title="5.1.1. 字符串的初始化"></a>5.1.1. 字符串的初始化</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> g1 = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">System.String g2 = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> g3 = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> message1;</span><br><span class="line"><span class="built_in">string</span> message2 = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">string</span> message3 = String.Empty; <span class="comment">// string message3 = &quot;&quot;;</span></span><br><span class="line"><span class="built_in">string</span> oldPath = <span class="string">&quot;Path:\nc:\\Program Files\\Microsoft Visual Studio 8.0&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> newPath = <span class="string">@&quot;Path:</span></span><br><span class="line"><span class="string">c:\Program Files\Microsoft Visual Studio 9.0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">char</span>[] letters = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> alphabet = <span class="keyword">new</span> <span class="built_in">string</span>(letters);</span><br></pre></td></tr></table></figure><h4 id="5-1-2-字符串的不可变性-Immutable"><a href="#5-1-2-字符串的不可变性-Immutable" class="headerlink" title="5.1.2. 字符串的不可变性 (Immutable)"></a>5.1.2. 字符串的不可变性 (Immutable)</h4><h5 id="5-1-2-1-what-amp-why"><a href="#5-1-2-1-what-amp-why" class="headerlink" title="5.1.2.1. what &amp; why"></a>5.1.2.1. what &amp; why</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a;</span><br><span class="line"><span class="built_in">string</span> b;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>; <span class="comment">// int i; i = 1;</span></span><br><span class="line"><span class="built_in">int</span> j = <span class="number">23</span>;</span><br><span class="line">i += j; <span class="comment">// i = i + j; i = 24;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;h&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> t = <span class="string">&quot;w&quot;</span>;</span><br><span class="line">s += t; <span class="comment">// s = s + t;</span></span><br></pre></td></tr></table></figure><p><img src="http://yaoqisan.local:7373/html/dotnet/img/string-immute.png" alt="string-immute.png"></p><p>字符串是不可更改的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s = &quot;hello&quot;;</span><br><span class="line">Console.WriteLine(s[1]); // 可以通过这种方式读取字符串的某个位置</span><br><span class="line">s[1] = &#x27;x&#x27;;              // 这一句是错误的</span><br></pre></td></tr></table></figure><p>思考:</p><ul><li>为什么要搞成不可变的 ?</li><li>不可变能带来什么好处 ?</li></ul><h5 id="5-1-2-2-System-Text-StringBuilder"><a href="#5-1-2-2-System-Text-StringBuilder" class="headerlink" title="5.1.2.2. System.Text.StringBuilder"></a>5.1.2.2. System.Text.StringBuilder</h5><p>这是 BCL 中提供的一个类，专门使用在 <strong>字符串拼接</strong> 的场景下。</p><p>因为，在预定义的字符串实现中，字符串拼接 (+&#x3D;) 是非常低效的一种行为 (要去理解为什么)。</p><p><img src="http://yaoqisan.local:7373/html/dotnet/img/string-vs-stringbuilder.png" alt="string-vs-stringbuilder.png"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析一下，为什么这段代码会为内存带来大量的垃圾</span></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    s += <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    Console.WriteLine(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要理解，为什么 StringBuilder 会占用更少的空间</span></span><br><span class="line"><span class="comment">// 如何理性看待 String vs StringBuilder 两种类型</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    sb.Append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    Console.WriteLine(sb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s == sb.ToString())</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;哈哈，一样啊&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-3-String-Intern-Pool-字符串池"><a href="#5-1-2-3-String-Intern-Pool-字符串池" class="headerlink" title="5.1.2.3. String Intern Pool (字符串池)"></a>5.1.2.3. String Intern Pool (字符串池)</h5><p>因为字符串是不可变的，所以在字符串的操作中，会产生很多临时字符串 (垃圾)。</p><p>在实际使用中，有很多字符串我们会反复去使用的，所以为了避免重复进行字符串的创建， 会对字符串操作过程中产生的字符串进行缓存管理，即创建一个字符串池管理它们。</p><p>后续进行字符串的声明时，会优先到池中寻找，如果已经存在，那么直接使用它。</p><p>字符串池的根本原因是，字符串是不可变的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> b = <span class="string">&quot;hel&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> c = <span class="string">&quot;lo&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> d = b + c;</span><br><span class="line"><span class="built_in">string</span> e = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 == 判断，两个字符串的值是不是一样的</span></span><br><span class="line">Console.WriteLine(a == d); <span class="comment">// True</span></span><br><span class="line">Console.WriteLine(a == e); <span class="comment">// True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 object.ReferenceEquals 判定是否占用了相同的内存空间</span></span><br><span class="line">Console.WriteLine(<span class="built_in">object</span>.ReferenceEquals(a, d)); <span class="comment">// False</span></span><br><span class="line">Console.WriteLine(<span class="built_in">object</span>.ReferenceEquals(a, e)); <span class="comment">// True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，类比 Java:</span></span><br><span class="line"><span class="comment">// a == b 判断的是 a 跟 b 是否是同一个引用</span></span><br><span class="line"><span class="comment">// a.equals(b) 用来判断 a 跟 b 的值是不是一样的</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// string a = null;</span></span><br><span class="line"><span class="comment">// string b = &quot;hello&quot;;</span></span><br><span class="line"><span class="comment">// a.equals(b) -&gt; b.equals(a);</span></span><br><span class="line"><span class="comment">// &quot;hello&quot;.equal(a); (1)</span></span><br><span class="line"><span class="comment">// if (a != null) a.equal(&quot;hello&quot;); (2)</span></span><br></pre></td></tr></table></figure><h4 id="5-1-3-API-基本操作"><a href="#5-1-3-API-基本操作" class="headerlink" title="5.1.3. [API] 基本操作"></a>5.1.3. [API] 基本操作</h4><p>API (Application Programming Interface) 应用程序编程接口。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">&quot;您好aaa&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> s3 = <span class="string">&quot;𠈓好aaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(s1.Length); <span class="comment">// 由多少个字符组成</span></span><br><span class="line">Console.WriteLine(s2.Length);</span><br><span class="line">Console.WriteLine(s3.Length); <span class="comment">// 这个为什么是 6 ?</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s4 = <span class="string">&quot;中国𠈓您好𠈓blahblaah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjlah中华𠈓你们都是啥kdjfkdjkdfdkjf&quot;</span>;</span><br><span class="line">Console.WriteLine(s4.Length);</span><br><span class="line">Console.WriteLine(<span class="keyword">new</span> StringInfo(s4).LengthInTextElements);</span><br></pre></td></tr></table></figure><h4 id="5-1-4-API-拼接-格式化"><a href="#5-1-4-API-拼接-格式化" class="headerlink" title="5.1.4. [API] 拼接 + 格式化"></a>5.1.4. [API] 拼接 + 格式化</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> friend = <span class="string">&quot;jerry&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">decimal</span> sal = <span class="number">200.12345</span>M;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> r1 = name + <span class="string">&quot;的朋友是&quot;</span></span><br><span class="line">                 + friend + <span class="string">&quot;，它虽然只有&quot;</span></span><br><span class="line">                 + age + <span class="string">&quot;岁，但是它的收入能到达到&quot;</span></span><br><span class="line">                 + sal + <span class="string">&quot;刀&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> r2 = <span class="keyword">new</span> StringBuilder()</span><br><span class="line">    .Append(name)</span><br><span class="line">    .Append(<span class="string">&quot;的朋友是&quot;</span>)</span><br><span class="line">    .Append(friend)</span><br><span class="line">    .Append(<span class="string">&quot;，它虽然只有&quot;</span>)</span><br><span class="line">    .Append(age)</span><br><span class="line">    .Append(<span class="string">&quot;岁，但是它的收入能到达到&quot;</span>)</span><br><span class="line">    .Append(sal)</span><br><span class="line">    .Append(<span class="string">&quot;刀&quot;</span>)</span><br><span class="line">    .ToString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> r3 = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;的朋友是&#123;1&#125;，它虽然只有&#123;2&#125;岁，但是它的收入达到&#123;3:C&#125;&quot;</span>, name, friend, age, sal);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;变量,对齐多少长度:格式&#125;</span></span><br><span class="line"><span class="comment">// [对齐] 正数表示右对齐，负数表示左对齐</span></span><br><span class="line"><span class="comment">// [格式] P 百分比 C 货币 E 科学计数法 D 补齐长度 F/N 小数点多少位 X 十六进制</span></span><br><span class="line"><span class="built_in">string</span> r4 = <span class="string">$&quot;<span class="subst">&#123;name&#125;</span>的朋友是<span class="subst">&#123;friend&#125;</span>，它虽然只有<span class="subst">&#123;age:d5&#125;</span>岁，但是它的收入达到<span class="subst">&#123;sal:C&#125;</span>!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语言-国家或区域</span></span><br><span class="line"><span class="comment">// zh-CN</span></span><br><span class="line"><span class="comment">// en-US</span></span><br><span class="line"><span class="comment">// en-EN</span></span><br><span class="line"><span class="built_in">string</span> ss = sal.ToString(<span class="string">&quot;C&quot;</span>, <span class="keyword">new</span> CultureInfo(<span class="string">&quot;en-US&quot;</span>));</span><br><span class="line"><span class="built_in">string</span> r5 = <span class="string">$&quot;<span class="subst">&#123;name&#125;</span>的朋友是<span class="subst">&#123;friend&#125;</span>，它虽然只有<span class="subst">&#123;age:d5&#125;</span>岁，但是它的收入达到<span class="subst">&#123;ss&#125;</span>!&quot;</span>;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(r5);</span><br></pre></td></tr></table></figure><h4 id="5-1-5-API-子字符串"><a href="#5-1-5-API-子字符串" class="headerlink" title="5.1.5. [API] 子字符串"></a>5.1.5. [API] 子字符串</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">&quot;000o。OOOoOO0O0Ooo000o&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取</span></span><br><span class="line"><span class="built_in">char</span> c = s1[<span class="number">1</span>]; <span class="comment">// 取字符</span></span><br><span class="line"><span class="built_in">string</span> s2 = s1.Substring(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 位置，长度 : el</span></span><br><span class="line"><span class="built_in">string</span> s3 = s1.Substring(<span class="number">2</span>);    <span class="comment">// 从某个位置到最后</span></span><br><span class="line"><span class="built_in">string</span> s4 = s1.Substring(<span class="number">2</span>, <span class="number">0</span>); <span class="comment">// String.Empty &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判</span></span><br><span class="line"><span class="built_in">bool</span> b1 = s1.Contains(<span class="string">&quot;o0&quot;</span>);    <span class="comment">// 是否包含一个子字符串</span></span><br><span class="line"><span class="built_in">bool</span> b2 = s1.StartsWith(<span class="string">&quot;o&quot;</span>);   <span class="comment">// 是不是以 x 开始</span></span><br><span class="line"><span class="built_in">bool</span> b3 = s1.EndsWith(<span class="string">&quot;o&quot;</span>);     <span class="comment">// 是不是以 x 结束的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 序</span></span><br><span class="line"><span class="built_in">int</span> i1 = s1.IndexOf(<span class="string">&quot;O&quot;</span>);</span><br><span class="line"><span class="built_in">int</span> i2 = s1.LastIndexOf(<span class="string">&quot;O&quot;</span>);</span><br><span class="line"><span class="built_in">int</span> i3 = s1.IndexOfAny(<span class="keyword">new</span> []&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;O&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合</span></span><br><span class="line"><span class="built_in">string</span> path = <span class="string">&quot;C:/aaa/work.x/hello.txt&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> drive = path.Substring(<span class="number">0</span>, path.IndexOf(<span class="string">&quot;:&quot;</span>));</span><br><span class="line"><span class="built_in">string</span> dir = path.Substring(<span class="number">0</span>, path.LastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">string</span> file = path.Substring(path.LastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">string</span> ext = path.Substring(path.LastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义版本的 LastIndexOf</span></span><br><span class="line"><span class="built_in">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = path.Length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (path[i] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> dir2 = path.Substring(<span class="number">0</span>, p);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(dir2);</span><br></pre></td></tr></table></figure><h4 id="5-1-6-API-字符串的修改"><a href="#5-1-6-API-字符串的修改" class="headerlink" title="5.1.6. [API] 字符串的修改"></a>5.1.6. [API] 字符串的修改</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 谨记:</span></span><br><span class="line"><span class="comment">// 修改不会作用在原先的字符串上</span></span><br><span class="line"><span class="comment">// 所有的修改，都是返回了一个完全崭新的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">&quot;  000o。OOOoOO0O，0Ooo000o--&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s2 = s1.Insert(<span class="number">3</span>, <span class="string">&quot;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> s3 = s1.Remove(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">string</span> s4 = s1.Replace(<span class="string">&quot;。&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> s5 = s1.Replace(<span class="string">&#x27;，&#x27;</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"><span class="built_in">string</span> s6 = s1.Replace(<span class="string">&quot;OoO&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> s7 = s1.Replace(<span class="string">&quot;OoO&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="literal">true</span>, <span class="keyword">new</span> CultureInfo(<span class="string">&quot;zh-CN&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s8 = s1.PadLeft(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">string</span> s9 = s1.PadLeft(<span class="number">100</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="built_in">string</span> sa = s1.PadRight(<span class="number">100</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> sb = s1.Trim();</span><br><span class="line"><span class="built_in">string</span> sc = s1.Trim(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="built_in">string</span> sd = s1.TrimStart();</span><br><span class="line"><span class="built_in">string</span> de = s1.TrimStart().TrimEnd(<span class="string">&#x27;-&#x27;</span>).PadLeft(<span class="number">50</span>, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> df = s1.ToLower();</span><br><span class="line"><span class="built_in">string</span> dg = s1.ToUpper();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(de);</span><br></pre></td></tr></table></figure><h4 id="5-1-7-API-String-跟-Array-的转换"><a href="#5-1-7-API-String-跟-Array-的转换" class="headerlink" title="5.1.7. [API] String 跟 Array 的转换"></a>5.1.7. [API] String 跟 Array 的转换</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">&quot;  000o。OOOoOO0O，0Ooo000o--&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串到 [数组] 的转换</span></span><br><span class="line"><span class="built_in">char</span>[] a1 = s1.ToCharArray();</span><br><span class="line"><span class="built_in">char</span>[] a2 = s1.ToCharArray(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [数组] 到字符串的转换</span></span><br><span class="line"><span class="built_in">char</span>[] a3 = <span class="keyword">new</span>[] &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="keyword">new</span> <span class="built_in">string</span>(a3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuild vs String</span></span><br><span class="line"><span class="built_in">string</span> s3 = <span class="keyword">new</span> StringBuilder().Append(<span class="string">&quot;hello&quot;</span>).ToString();</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(s1);</span><br></pre></td></tr></table></figure><h3 id="5-2-object"><a href="#5-2-object" class="headerlink" title="5.2. object"></a>5.2. object</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> i1 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">object</span> s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> i2;</span><br><span class="line"><span class="built_in">object</span> s2;</span><br><span class="line"></span><br><span class="line">i2 = <span class="number">20</span>;</span><br><span class="line">s2 = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-dynamic"><a href="#5-3-dynamic" class="headerlink" title="5.3. dynamic"></a>5.3. dynamic</h3><ul><li>静态语言</li><li>动态语言 (动态一时爽，重构hzc)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> i1 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">object</span> s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> i2;</span><br><span class="line"><span class="built_in">object</span> s2;</span><br><span class="line"></span><br><span class="line">i2 = <span class="number">20</span>;</span><br><span class="line">s2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 动态语言的搞法，s 是啥不确定，运行到哪里可以能就变了</span></span><br><span class="line"><span class="keyword">var</span> s;</span><br><span class="line">s = <span class="number">2323</span>;     <span class="comment">// 整数</span></span><br><span class="line">s = <span class="string">&quot;kdjkfd&quot;</span>; <span class="comment">// 字符串</span></span><br><span class="line">Console.WriteLine(s.Length);</span><br><span class="line">s = [<span class="number">2</span>, <span class="number">3</span>];   <span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态类型，s 是啥，出生定终身</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C# 对动态类型的支持</span></span><br><span class="line"><span class="built_in">dynamic</span> a = <span class="number">1111</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a = <span class="keyword">new</span> FileInfo(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="6-用户自定义类型"><a href="#6-用户自定义类型" class="headerlink" title="6. 用户自定义类型"></a>6. 用户自定义类型</h2><ol><li>声明类型</li><li>实例化</li><li>使用</li></ol><h3 id="6-1-class"><a href="#6-1-class" class="headerlink" title="6.1. class"></a>6.1. class</h3><p>类</p><h3 id="6-2-interface"><a href="#6-2-interface" class="headerlink" title="6.2. interface"></a>6.2. interface</h3><p>接口</p><h3 id="6-3-delegate"><a href="#6-3-delegate" class="headerlink" title="6.3. delegate"></a>6.3. delegate</h3><p>委托</p><h3 id="6-4-array"><a href="#6-4-array" class="headerlink" title="6.4. array"></a>6.4. array</h3><p>数组</p><h3 id="6-5-struct"><a href="#6-5-struct" class="headerlink" title="6.5. struct"></a>6.5. struct</h3><p>结构体</p><h3 id="6-6-enum"><a href="#6-6-enum" class="headerlink" title="6.6. enum"></a>6.6. enum</h3><p>枚举</p><h2 id="7-类型转换"><a href="#7-类型转换" class="headerlink" title="7. 类型转换"></a>7. 类型转换</h2><p>基本类型的转换:</p><ul><li><p>如果涉及到转换之后不会存在任何的精度损失的话，会进行隐式转换 (implicit)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a; <span class="built_in">byte</span> b; a = b;</span><br></pre></td></tr></table></figure></li><li><p>如果可能存在精度损失的话，这个时候，必须进行强制转换 (explicit)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a; <span class="built_in">byte</span> b; b = (<span class="built_in">int</span>)a;</span><br></pre></td></tr></table></figure></li><li><p>如果强制转换过程中，出现精度损失的话，默认情况下会按照某种规则截断。注意，不会报错</p></li><li><p>我们可以使用 <code>checked</code> 关键词将转换的语句包围住，然后在转换中出现精度损失的话，会抛出异常</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a; <span class="built_in">byte</span> b; b = check((<span class="built_in">int</span>)a);</span><br></pre></td></tr></table></figure></li></ul><p>引用类型的转换:</p><ul><li><p>引用类型同样存在 implicit&#x2F;explicit 抓换</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">Student s = (Student) p;</span><br></pre></td></tr></table></figure></li><li><p>引用类型的转换，如果转换失败，默认会抛出异常</p></li><li><p>使用 <code>is</code> 语句，判断是否属于某种类型。经常会跟显式转换配合使用:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Student s;</span><br><span class="line"><span class="keyword">if</span> (p <span class="keyword">is</span> Student)</span><br><span class="line">&#123;</span><br><span class="line">    s = (Student) p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    s = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(s);</span><br></pre></td></tr></table></figure></li><li><p>可以使用 <code>as</code> 语句，简化上述的判断跟转换。这是一种很甜的糖:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student s = p <span class="keyword">as</span> Student;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="literal">null</span>) ...</span><br></pre></td></tr></table></figure></li></ul><p>装箱&#x2F;拆箱 (boxing&#x2F;unboxing):</p><ul><li><strong>装箱</strong> 是将值类型转换为 object 类型或由此值类型实现的任何接口类型的过程</li><li>在 C# 中，基本类型也是 object 的实例。 但是为了效率，基本类型都被直接存储在栈上，存储的形式不是对象的形式。 因此，如果想将基本类型当作对象，来进行方法调用的时候，需要将其转换为对象存储形式 为了简化上述过程，在对基本类型进行方法调用的时候，CLR 会自动进行上述转换。 这种隐式转换的机制，叫做自动装箱 (auto-boxing)</li><li>反向的过程叫拆箱</li></ul><h3 id="7-1-隐式转换-x2F-强制转换"><a href="#7-1-隐式转换-x2F-强制转换" class="headerlink" title="7.1. 隐式转换&#x2F;强制转换"></a>7.1. 隐式转换&#x2F;强制转换</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span> a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="built_in">byte</span> ab = (<span class="built_in">byte</span>)a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> s1 = ab + <span class="number">13</span>; <span class="comment">// byte + int</span></span><br><span class="line">ab = (<span class="built_in">byte</span>) (((<span class="built_in">int</span>) ab) + <span class="number">13</span>); <span class="comment">// int + int = int</span></span><br><span class="line">ab = (<span class="built_in">byte</span>) (ab + <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>//</span></span><br><span class="line"><span class="built_in">char</span> a = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="built_in">byte</span> a1 = (<span class="built_in">byte</span>) a;</span><br><span class="line"><span class="built_in">char</span> a2 = (<span class="built_in">char</span>) (a1 + <span class="number">13</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;a&#125;</span> -&gt; <span class="subst">&#123;a1&#125;</span> -&gt; <span class="subst">&#123;a2&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用 checked 来释放危险:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">byte</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">byte</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">byte</span> d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 潜在的危险</span></span><br><span class="line">b = (<span class="built_in">byte</span>) a;</span><br><span class="line">c = (<span class="built_in">byte</span>) a;</span><br><span class="line">d = (<span class="built_in">byte</span>) a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主动释放危险</span></span><br><span class="line">b = checked((<span class="built_in">byte</span>) a);</span><br><span class="line">c = checked((<span class="built_in">byte</span>) a);</span><br><span class="line">d = checked((<span class="built_in">byte</span>) a);</span><br><span class="line">Console.WriteLine(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定危险区域</span></span><br><span class="line">checked</span><br><span class="line">&#123;</span><br><span class="line">    b = (<span class="built_in">byte</span>)a;</span><br><span class="line">    c = (<span class="built_in">byte</span>)a;</span><br><span class="line">    d = (<span class="built_in">byte</span>)a;</span><br><span class="line">    Console.WriteLine(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-引用类型的隐式和强制转换"><a href="#7-2-引用类型的隐式和强制转换" class="headerlink" title="7.2. 引用类型的隐式和强制转换"></a>7.2. 引用类型的隐式和强制转换</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> a = <span class="keyword">new</span> Student();</span><br><span class="line">a = <span class="number">2122</span>;</span><br><span class="line"><span class="comment">// a: object</span></span><br><span class="line">Student s2 = (Student)a;</span><br></pre></td></tr></table></figure><h3 id="7-3-装箱-x2F-拆箱-auto-boxing"><a href="#7-3-装箱-x2F-拆箱-auto-boxing" class="headerlink" title="7.3. 装箱&#x2F;拆箱 (auto-boxing)"></a>7.3. 装箱&#x2F;拆箱 (auto-boxing)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动装箱</span></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">object</span> o = <span class="literal">null</span>;</span><br><span class="line">o = i;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;i: <span class="subst">&#123;i&#125;</span>, o: <span class="subst">&#123;o&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装箱使用的是数据的副本</span></span><br><span class="line">i = <span class="number">5</span>;</span><br><span class="line">o = <span class="number">6</span>;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;i: <span class="subst">&#123;i&#125;</span>, o: <span class="subst">&#123;o&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆箱</span></span><br><span class="line">i = (<span class="built_in">int</span>)o;</span><br></pre></td></tr></table></figure><h3 id="7-4-自定义转换规则"><a href="#7-4-自定义转换规则" class="headerlink" title="7.4. 自定义转换规则"></a>7.4. 自定义转换规则</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span> a = <span class="keyword">new</span> Student();</span><br><span class="line">        Student s2 = (Student)a;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 C# 中，类型转换的规则，是可以自定义的</span></span><br><span class="line">        Student ss = <span class="keyword">new</span> Student();</span><br><span class="line">        ss.id = <span class="number">222</span>;</span><br><span class="line">        <span class="built_in">int</span> i = ss;</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line">        Student st = (Student)<span class="number">333</span>;</span><br><span class="line">        Console.WriteLine(st);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> id;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">int</span> (<span class="params">Student s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s.id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">Student</span>(<span class="params"><span class="built_in">int</span> si</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.id = si;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学号 - 学生，转换的示例:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通使用</span></span><br><span class="line"><span class="built_in">int</span> id = <span class="number">2323232323</span>;</span><br><span class="line">s = <span class="keyword">new</span> Student();</span><br><span class="line">s.id = id;</span><br><span class="line">s.xxx = ksdfj;</span><br><span class="line">s.yyy = kjskdfj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽出为方法</span></span><br><span class="line"><span class="function">Student <span class="title">MakeStudent</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    s = <span class="keyword">new</span> Student();</span><br><span class="line">    s.id = i;</span><br><span class="line">    s.xxx = ksdfj;</span><br><span class="line">    s.yyy = kjskdfj;</span><br><span class="line">&#125;</span><br><span class="line">S = MakeStudent(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽出为类型转换</span></span><br><span class="line">Student s = (Student) id;</span><br></pre></td></tr></table></figure><h3 id="7-5-基于-字符串-之间的互相转换"><a href="#7-5-基于-字符串-之间的互相转换" class="headerlink" title="7.5. 基于 字符串 之间的互相转换"></a>7.5. 基于 <strong>字符串</strong> 之间的互相转换</h3><ul><li>核心两种方法: <code>string.Format</code> 用来转换为字符串，<del>type.Parse</del> 用来从字符串转化</li><li>可以使用 <code>ToString/TryParse</code> 对上面的两个方法进行补充</li></ul><p>简而言之:</p><ul><li>将其他类型转换为字符串: <code>string.Format/ToString</code></li><li>将字符串转换为其他类型: <code>xxx.Parse/TryParse</code></li><li>BCL 中提供了一个叫 <code>Convert</code> 的类，可以实现更多更复杂的转换</li></ul><h4 id="7-5-1-string-Format"><a href="#7-5-1-string-Format" class="headerlink" title="7.5.1. string.Format"></a>7.5.1. string.Format</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> r3 = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;的朋友是&#123;1&#125;，它虽然只有&#123;2&#125;岁，但是它的收入达到&#123;3:C&#125;&quot;</span>, name, friend, age, sal);</span><br></pre></td></tr></table></figure><h4 id="7-5-2-type-ToString"><a href="#7-5-2-type-ToString" class="headerlink" title="7.5.2. type.ToString"></a>7.5.2. type.ToString</h4><p>因为，string 类型是如此重要，所以在 <strong>所有类的基类，即 object 中</strong>, 包含了一个默认的 ToString 方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> sal = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Hahaha</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;hdskfjksjfksjdfkke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Console.WriteLine(p.ToString()); <span class="comment">// Program+Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> sal = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Hahaha</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;hdskfjksjfksjdfkke&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我就是我，不一样的烟火.我的工资: &quot;</span> + <span class="keyword">this</span>.sal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Console.WriteLine(p);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"><span class="built_in">int</span> i = <span class="number">112323</span>;</span><br><span class="line"><span class="built_in">string</span> s1 = i.ToString(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">Console.WriteLine(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">DateTime now = DateTime.Now;</span><br><span class="line"><span class="built_in">string</span> s2 = now.ToString();</span><br><span class="line">Console.WriteLine(s2);</span><br><span class="line"><span class="built_in">string</span> s3 = now.ToString(<span class="string">&quot;现在时间: yyyy年MM月dd日，不告诉你几点&quot;</span>);</span><br><span class="line">Console.WriteLine(s3);</span><br><span class="line">CultureInfo ci = <span class="keyword">new</span> CultureInfo(<span class="string">&quot;zh-CN&quot;</span>);</span><br><span class="line"><span class="built_in">string</span> s4 = now.ToString(<span class="string">&quot;现在时间: yyyy年MMM ddd，不告诉你几点&quot;</span>, ci);</span><br><span class="line">Console.WriteLine(s4);</span><br></pre></td></tr></table></figure><h4 id="7-5-3-type-Parse-x2F-TryParse"><a href="#7-5-3-type-Parse-x2F-TryParse" class="headerlink" title="7.5.3. type.Parse&#x2F;TryParse"></a>7.5.3. type.Parse&#x2F;TryParse</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int</span></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">&quot;1234343&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> i = <span class="built_in">int</span>.Parse(s1) + <span class="number">1</span>;</span><br><span class="line">Console.WriteLine(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double</span></span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">&quot;2322222&quot;</span>;</span><br><span class="line"><span class="built_in">double</span> d = <span class="built_in">double</span>.Parse(s2);</span><br><span class="line">Console.WriteLine(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DateTime</span></span><br><span class="line"><span class="built_in">string</span> s3 = <span class="string">&quot;1999-02-13&quot;</span>;</span><br><span class="line">DateTime dt = DateTime.Parse(s3);</span><br><span class="line">Console.WriteLine(dt.Year);</span><br></pre></td></tr></table></figure><p>转换失败，会抛异常:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s4 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> i2 = <span class="built_in">int</span>.Parse(s4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s4 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">int</span> i2 = <span class="built_in">int</span>.Parse(s4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 转换不了怎么办</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 TryParse 进行转化，如果转换失败，会返回 False:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s4 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(s4, <span class="keyword">out</span> <span class="built_in">int</span> result))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">TryMyParse</span>(<span class="params"><span class="built_in">string</span> s, <span class="keyword">out</span> <span class="built_in">int</span> result</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="built_in">int</span>.Parse(s4);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-4-Convert"><a href="#7-5-4-Convert" class="headerlink" title="7.5.4. Convert"></a>7.5.4. Convert</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = Convert.ToString(<span class="number">82738283782</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">string</span> s2 = Convert.ToString(<span class="number">82738283782</span>, <span class="number">8</span>);</span><br><span class="line">Console.WriteLine(s2);</span><br><span class="line"></span><br><span class="line">Convert.TryFromBase64String();</span><br></pre></td></tr></table></figure><h2 id="8-类-Class"><a href="#8-类-Class" class="headerlink" title="8. 类 (Class)"></a>8. 类 (Class)</h2><h3 id="8-1-字段-Field"><a href="#8-1-字段-Field" class="headerlink" title="8.1. 字段 (Field)"></a>8.1. 字段 (Field)</h3><ul><li><p>作为一个字段，最重要的是 (类型) (名字) &#x3D; (值)</p></li><li><p>可以</p><p>选择性</p><p>使用其他修饰符，为字段增加</p><p>额外</p><p>的功能或限制:</p><ul><li>访问修饰符: private&#x2F;public&#x2F;protected&#x2F;internal 等，用来给予外部的访问限制</li><li>只读&#x2F;常量修饰符: const&#x2F;readonly，用来防止数据被误修改</li><li>静态修饰符: static 的作用是，将这个字段的归属权给予类</li></ul></li></ul><h3 id="8-2-方法-Method"><a href="#8-2-方法-Method" class="headerlink" title="8.2. 方法 (Method)"></a>8.2. 方法 (Method)</h3><h4 id="8-2-1-Basic"><a href="#8-2-1-Basic" class="headerlink" title="8.2.1. Basic"></a>8.2.1. Basic</h4><p>方法是一个具备名字的代码块:</p><ul><li>通过 <code>方法名()</code> 的方式实现方法调用， 也就是在调用的地方将方法名代表的代码块里的代码进行运行</li><li>方法的三要素:<ol><li>一个名字 (方法名)</li><li>传入的数据 (传入参数) 入参写在方法名后面的括号里。如果没有入参，括号保持为空即可</li><li>传出的数据 (返回值) 方法内部，使用 return 表示返回的数据。在方法名前面，添加返回的类型。 如果方法内部没有任何 return 表示方法没有返回值，需要在方法前面添加 void 表示这种情况</li></ol></li></ul><h4 id="8-2-2-方法的重载-overload"><a href="#8-2-2-方法的重载-overload" class="headerlink" title="8.2.2. 方法的重载 (overload)"></a>8.2.2. 方法的重载 (overload)</h4><ul><li>一个类中，可以有同名的方法。需要有不同的参数 (这样才能区分调用)</li><li>请叙述一下 overload 和 override 有什么区别</li></ul><p>方法的示例:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 方法的声明、定义</span></span><br><span class="line">    <span class="built_in">int</span> 增加 (<span class="built_in">int</span> a)  <span class="comment">// 方法名为 [增加]，入参为 [a]</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + <span class="number">1</span>;  <span class="comment">// 返回值为 [a + 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">double</span> 加法 (<span class="built_in">double</span> a, <span class="built_in">double</span> b) <span class="comment">// 可以有多个入参</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">double</span> 没有入参 () <span class="comment">// 可以没有入参</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">111.111</span>; <span class="comment">// 返回 double 类型的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> 没有返回数据 (<span class="built_in">string</span> name) <span class="comment">// 没有返回数据使用 void 表示</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(name); <span class="comment">// 方法体内，没有任何 return 语句，所以方法没有返回任何数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> 没有返回值也没有入参 () <span class="comment">// 这个方法，就是没有返回值也没有入参</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;hello, world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法的调用</span></span><br><span class="line">    <span class="comment">// 使用方法的名字调用方法:</span></span><br><span class="line">    <span class="comment">// - 入参的个数和顺序要跟上述定义的一致</span></span><br><span class="line">    <span class="comment">// - 返回值的类型要跟上述定义的一致，如果 void 类型的函数是不能接受其返回值的</span></span><br><span class="line">    <span class="comment">// 上述方法定义中的参数，又叫形式参数 (形参)</span></span><br><span class="line">    <span class="comment">// 这里调用时传入的参数，又叫实际参数 (实参)</span></span><br><span class="line">    <span class="comment">// 也就是，实参要跟形参相对应!</span></span><br><span class="line">    <span class="built_in">int</span> a = 增加(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">double</span> b = 加法(<span class="number">11</span>, <span class="number">33</span>);</span><br><span class="line">    <span class="built_in">double</span> c = 没有入参();</span><br><span class="line">    没有返回数据(<span class="string">&quot;H&amp;M&quot;</span>);</span><br><span class="line">    没有返回值也没有入参();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-3-参数-值参数-x2F-ref-x2F-out"><a href="#8-2-3-参数-值参数-x2F-ref-x2F-out" class="headerlink" title="8.2.3. 参数 (值参数&#x2F;ref&#x2F;out)"></a>8.2.3. 参数 (值参数&#x2F;ref&#x2F;out)</h4><p>值参数 (默认的):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">5</span>;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    TestZhi(i, p);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;out: i: <span class="subst">&#123;i&#125;</span>, age: $<span class="subst">&#123;p.Age&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestZhi</span>(<span class="params"><span class="built_in">int</span> ii, Person pp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ii = ii + <span class="number">1</span>;</span><br><span class="line">    pp.Age = pp.Age + <span class="number">18</span>;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;in:  i: <span class="subst">&#123;ii&#125;</span>, age: $<span class="subst">&#123;pp.Age&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ref:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    int i = 5;</span><br><span class="line">    Person p = new Person();</span><br><span class="line"></span><br><span class="line">    TestZhi(ref i, p);</span><br><span class="line">    Console.WriteLine($&quot;out: i: &#123;i&#125;, age: $&#123;p.Age&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void TestZhi(ref int ii, Person pp)</span><br><span class="line">&#123;</span><br><span class="line">    ii = ii + 1;</span><br><span class="line">    pp.Age = pp.Age + 18;</span><br><span class="line">    Console.WriteLine($&quot;in:  i: &#123;ii&#125;, age: $&#123;pp.Age&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public int Age = 18;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    Person p = new Person();</span><br><span class="line"></span><br><span class="line">    TestZhi(out i, p);</span><br><span class="line">    Console.WriteLine($&quot;out: i: &#123;i&#125;, age: $&#123;p.Age&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void TestZhi(out int ii, Person pp)</span><br><span class="line">&#123;</span><br><span class="line">    ii = 999;</span><br><span class="line">    pp.Age = pp.Age + 18;</span><br><span class="line">    Console.WriteLine($&quot;in:  i: &#123;ii&#125;, age: $&#123;pp.Age&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public int Age = 18;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://yaoqisan.local:7373/html/dotnet/img/method-parameter.png" alt="method-parameter.png"></p><h4 id="8-2-4-out-参数-用来模拟方法返回多个值的场景"><a href="#8-2-4-out-参数-用来模拟方法返回多个值的场景" class="headerlink" title="8.2.4. out 参数: 用来模拟方法返回多个值的场景"></a>8.2.4. out 参数: 用来模拟方法返回多个值的场景</h4><p>如果不用 out，可以使用 Class 的方式返回多个值，这种方式比较重:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int age;</span><br><span class="line">    double sal;</span><br><span class="line"></span><br><span class="line">    Person p = GetYourInformation();</span><br><span class="line">    name = p.Name;</span><br><span class="line">    age = p.Age;</span><br><span class="line">    sal = p.Sal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static Person GetYourInformation()</span><br><span class="line">&#123;</span><br><span class="line">    return new Person</span><br><span class="line">    &#123;</span><br><span class="line">        Name = &quot;Kitty&quot;,</span><br><span class="line">        Age = 19,</span><br><span class="line">        Sal = 2323323</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public string Name;</span><br><span class="line">    public int Age;</span><br><span class="line">    public double Sal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 out 的方法比较轻量级:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int age;</span><br><span class="line">    double sal;</span><br><span class="line"></span><br><span class="line">    name = GetYourInformation(out age, out sal);</span><br><span class="line">    Console.WriteLine($&quot;&#123;name&#125; 的年龄为 &#123;age&#125; 收入为 &#123;sal&#125;，您可满意?&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static string GetYourInformation(out int age, out double sal)</span><br><span class="line">&#123;</span><br><span class="line">    age = 19;</span><br><span class="line">    sal = 23232;</span><br><span class="line">    return &quot;Kitty&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至可以更简化:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    string name = GetYourInformation(out int age, out double sal);</span><br><span class="line">    Console.WriteLine($&quot;&#123;name&#125; 的年龄为 &#123;age&#125; 收入为 &#123;sal&#125;，您可满意?&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static string GetYourInformation(out int age, out double sal)</span><br><span class="line">&#123;</span><br><span class="line">    age = 19;</span><br><span class="line">    sal = 23232;</span><br><span class="line">    return &quot;Kitty&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-5-数组参数-params"><a href="#8-2-5-数组参数-params" class="headerlink" title="8.2.5. 数组参数 (params)"></a>8.2.5. 数组参数 (params)</h4><p>实现累加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    // 加法</span><br><span class="line">    int r1 = MyAdd2(2, 3);</span><br><span class="line">    int r2 = MyAdd3(2, 3, 4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int MyAdd2(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int MyAdd3(int a, int b, int c)</span><br><span class="line">&#123;</span><br><span class="line">    return a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用数组改良的结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    int r1 = MyAdd(new int[] &#123;2, 3&#125;);</span><br><span class="line">    int r2 = MyAdd(new int[] &#123;2, 3, 4, 5, 6, 7&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int MyAdd(int [] nums)</span><br><span class="line">&#123;</span><br><span class="line">    int r = 0;</span><br><span class="line">    for (int i = 0; i &lt; nums.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用 params 修饰数组，达到进一步简化调用语法的目的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    int r1 = MyAdd(2, 3);</span><br><span class="line">    int r2 = MyAdd(2, 3, 4, 5, 6, 7);</span><br><span class="line">    Console.WriteLine($&quot;&#123;r1&#125; / &#123;r2&#125;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int MyAdd(params int [] nums)</span><br><span class="line">&#123;</span><br><span class="line">    int r = 0;</span><br><span class="line">    for (int i = 0; i &lt; nums.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组参数需要放到后面:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    MyAdd(&quot;最后求取的和是: 0x&#123;0:X&#125;&quot;, 232, 3, 10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void MyAdd(string fmt, params int [] nums)</span><br><span class="line">&#123;</span><br><span class="line">    int r = 0;</span><br><span class="line">    for (int i = 0; i &lt; nums.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        r += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(fmt, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-6-可选参数-x2F-命名参数"><a href="#8-2-6-可选参数-x2F-命名参数" class="headerlink" title="8.2.6. 可选参数&#x2F;命名参数"></a>8.2.6. 可选参数&#x2F;命名参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    Hello();</span><br><span class="line">    Hello(&quot;Hiii!&quot;);</span><br><span class="line">    Hello(&quot;Hi&quot;, &quot;Xiaoming&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Hello(string action = &quot;Hello&quot;, string who = &quot;World&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;&#123;action&#125; &#123;who&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用命名参数，简化多个可选参数存在的情况下的赋值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    Hello(who: &quot;XM&quot;);</span><br><span class="line">    Hello(who: &quot;Xiaoming&quot;, action: &quot;out...&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Hello(string action = &quot;Hello&quot;, string who = &quot;World&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;&#123;action&#125; &#123;who&#125;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-属性-Property"><a href="#8-3-属性-Property" class="headerlink" title="8.3. 属性 (Property)"></a>8.3. 属性 (Property)</h3><p>属性本身就是 [private Field + public Method] 一种语法糖:</p><ul><li>它能减少太多冗余的模板代码；它能简化对实例中数据的可控性的访问，让代码更简洁</li><li>但是不要忘了，它跟 getter&#x2F;setter 方法的本质是一样的。最后编译器还是将我们写的属性代码转换成了 getter&#x2F;setter 方法的形式</li><li>也就是说 <code>r.Width = 333</code> 这样的属性赋值，本质就是方法调用</li></ul><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Rect</span><br><span class="line">&#123;</span><br><span class="line">    public double Width &#123; get; set; &#125;</span><br><span class="line">    public double Height &#123; get; set; &#125;</span><br><span class="line">    public double Area</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return Width * Height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // private double Height;</span><br><span class="line">    // public double GetHeight ()</span><br><span class="line">    // &#123;</span><br><span class="line">    //     return Height;</span><br><span class="line">    // &#125;</span><br><span class="line">    // public void SetHeight (double h);</span><br><span class="line">    // &#123;</span><br><span class="line">    //     Height = h;</span><br><span class="line">    // &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        Rect r = new Rect();</span><br><span class="line">        r.Width = 2000;</span><br><span class="line">        r.Height = 333;</span><br><span class="line">        Console.WriteLine(&quot;面积是: &#123;0&#125;&quot;, r.Area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-索引器-Indexer"><a href="#8-4-索引器-Indexer" class="headerlink" title="8.4. 索引器 (Indexer)"></a>8.4. 索引器 (Indexer)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">static void Main()</span><br><span class="line">&#123;</span><br><span class="line">    string a = &quot;hello&quot;;</span><br><span class="line">    char x1 = a[1];</span><br><span class="line"></span><br><span class="line">    var b = new int[] &#123;1, 2, 3, 4&#125;;</span><br><span class="line">    int x2 = b[1];</span><br><span class="line"></span><br><span class="line">    var c = new List&lt;int&gt; &#123;1, 2, 3, 4&#125;;</span><br><span class="line">    int x3 = c[1];</span><br><span class="line"></span><br><span class="line">    var d = new Dictionary&lt;string, int&gt; &#123;&#123;&quot;xm&quot;, 22&#125;, &#123;&quot;xh&quot;, 24&#125;&#125;;</span><br><span class="line">    int x4 = d[&quot;xm&quot;];</span><br><span class="line"></span><br><span class="line">    var p = new Person();</span><br><span class="line">    p[1] = &quot;您好&quot;;</span><br><span class="line">    p[5] = &quot;你好&quot;;</span><br><span class="line">    p[3] = &quot;八嘎&quot;;</span><br><span class="line">    Console.WriteLine(p[1]);</span><br><span class="line">    Console.WriteLine(p[2]);</span><br><span class="line">    Console.WriteLine(p[3]);</span><br><span class="line">    Console.WriteLine(p[4]);</span><br><span class="line">    Console.WriteLine(p[5]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private Dictionary&lt;int, string&gt; hiStyles = new Dictionary&lt;int, string&gt;();</span><br><span class="line"></span><br><span class="line">    public string this[int i]</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (!hiStyles.TryGetValue(i, out string hiStyle))</span><br><span class="line">            &#123;</span><br><span class="line">                hiStyle = &quot;Hello&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            return $&quot;&#123;hiStyle&#125; &#123;i&#125;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            hiStyles[i] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-构造方法-x2F-构造器-Constructor"><a href="#8-5-构造方法-x2F-构造器-Constructor" class="headerlink" title="8.5. 构造方法&#x2F;构造器 (Constructor)"></a>8.5. 构造方法&#x2F;构造器 (Constructor)</h3><h4 id="8-5-1-对象的实例化"><a href="#8-5-1-对象的实例化" class="headerlink" title="8.5.1. 对象的实例化"></a>8.5.1. 对象的实例化</h4><p>对象的实例化，分为下面几个步骤:</p><ol><li>在内存中，分配相应的空间</li><li>按照类型进行相关字段的初始化工作</li><li>调用相应的 <strong>构造方法</strong>，进行相关初始化工作</li></ol><h4 id="8-5-2-构造器"><a href="#8-5-2-构造器" class="headerlink" title="8.5.2. 构造器"></a>8.5.2. 构造器</h4><p>所谓的构造方法，就是类中定义的一个特殊方法。它用来对实例空间进行若干初始化工作:</p><ul><li>构造方法可以写多个，即可以重载 (overload)</li><li>我们也可以不写任何构造方法，那么编译器在编译的时候，会自动帮我们插入一个 <strong>无参的空的</strong>。 但是，如果你在类中，定义了任何的构造方法，那么编译器就不会帮你再生成了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class X</span><br><span class="line">&#123;</span><br><span class="line">    public X()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public X(int a, int b) // 2</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        new X(); // 如果没有参数，那么会调用无参构造器 1</span><br><span class="line">        new X(1, 2); // 回去调用相应的具备两个参数，并且类型正确的构造器 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-5-3-构造器链"><a href="#8-5-3-构造器链" class="headerlink" title="8.5.3. 构造器链"></a>8.5.3. 构造器链</h4><ul><li>如果不显式继承某个类，那么继承的将是 object。即可以忽略掉 <code>: Object</code></li><li>如果不显式添加构造器，那么编译器会自动插入一个无参的。即可以省略掉 <code>public Son() &#123;&#125;</code></li><li>如果不显式指定构造器顺序，那么任意构造器都会首先执行父类的无参构造器。即可以省略掉 <code>: base()</code></li><li>显式指定构造器顺序，需要手动添加 <code>: base(xxx)</code> 或者 <code>: this(xxx)</code></li><li>基本的规则是: 从下往上寻找，然后从上往下执行。这样就构成了 <strong>构造器链</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">GP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GP</span>() : <span class="title">base</span>() <span class="comment">// 4</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是你爷爷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GP</span>(<span class="params"><span class="built_in">string</span> address</span>) : <span class="title">base</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;爷爷我的地址是 &#123;0&#125;&quot;</span>, address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GP</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> address</span>) : <span class="title">base</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;爷爷 &#123;0&#125; 的地址是 &#123;0&#125;&quot;</span>, name, address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">PP</span> : <span class="title">GP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PP</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是爸爸&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PP</span>(<span class="params"><span class="built_in">string</span> address</span>) : <span class="title">base</span>() <span class="comment">// 3</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;爸爸我的地址是 &#123;0&#125;&quot;</span>, address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PP</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> address</span>) : <span class="title">base</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;爸爸 &#123;0&#125; 的地址是 &#123;0&#125;&quot;</span>, name, address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">You</span> : <span class="title">PP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span>() : <span class="title">base</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我的儿子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">this</span>(<span class="params">name, <span class="string">&quot;广西&quot;</span></span>) <span class="comment">// 1</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> addr</span>) : <span class="title">base</span>(<span class="params">addr</span>) <span class="comment">// 2</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;&#123;0&#125; 的 &#123;1&#125;&quot;</span>, addr, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> : <span class="title">You</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">You u = <span class="keyword">new</span> You(<span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="8-5-4-静态构造器"><a href="#8-5-4-静态构造器" class="headerlink" title="8.5.4. 静态构造器"></a>8.5.4. 静态构造器</h4><ul><li>构造器是用来初始化 <strong>对象</strong> 的</li><li>静态构造器是用来初始化 <strong>类</strong> 的</li><li>对象的初始化工作，是在代码中通过 new Class 的方式触发的</li><li>类的初始化工作，是由 CLR 自动执行的，一般来说，你第一次使用到某个类的时候，这个类就会 <strong>被</strong> 自动加载</li><li>静态的构造器，只能有一个，而且不能带任何参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class TipCalculator : CalculatorBase</span><br><span class="line">&#123;</span><br><span class="line">    static TipCalculator()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;我是一个带 static 的构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6-析构方法-x2F-析构器-Deconstructor"><a href="#8-6-析构方法-x2F-析构器-Deconstructor" class="headerlink" title="8.6. 析构方法&#x2F;析构器 (Deconstructor)"></a>8.6. 析构方法&#x2F;析构器 (Deconstructor)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~TipCalculator()</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;我死的好惨啊&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~文件()</span><br><span class="line">&#123;</span><br><span class="line">    this.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-7-静态方法-Static"><a href="#8-7-静态方法-Static" class="headerlink" title="8.7. 静态方法 (Static)"></a>8.7. 静态方法 (Static)</h3><p>将归属权，交给类。调用的时候，使用 <code>类名.xxx</code> 方式。</p><h3 id="8-8-将数据设置为不变的-const-x2F-readonly"><a href="#8-8-将数据设置为不变的-const-x2F-readonly" class="headerlink" title="8.8. 将数据设置为不变的 (const&#x2F;readonly)"></a>8.8. 将数据设置为不变的 (const&#x2F;readonly)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过 private 等操作符可以保护数据的外部访问安全</span><br><span class="line">通过 const/readonly 可以防止内鬼</span><br></pre></td></tr></table></figure><p>const:</p><ul><li>即常量</li><li>基于编译期的替换，运行期是没有任何这个变量的信息的</li><li>相对来说，它不需要占用存储，而且不需要运行时检查，所以效率高</li><li>它的使用限制较多，比如，只能将一些简单的值赋予它</li><li>不能添加 static 修饰，但可以使用 <code>类名.PI</code> 来访问</li></ul><p>readonly:</p><ul><li>限定变量只能读，不能修改</li><li>可以修饰任何的字段，不管是不是静态的</li><li>相对来说，需要占用空间、需要运行时检查，效率会低一些</li><li><strong>注意</strong>，使用 readonly 修饰数组等变量，虽然可以防止数组被重新赋值，但不能避免里面的元素被修改</li></ul><p>有内鬼，停止交易:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Congming</span><br><span class="line">&#123;</span><br><span class="line">    private const double PI = 3.1415926;</span><br><span class="line">    private readonly double pppi = 3.14;</span><br><span class="line"></span><br><span class="line">    public double QiuMianJi(double r)</span><br><span class="line">    &#123;</span><br><span class="line">        pppi = 333;  // x</span><br><span class="line">        PI = 333;    // x</span><br><span class="line">        return pppi * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-9-继承-Inheritance"><a href="#8-9-继承-Inheritance" class="headerlink" title="8.9. 继承 (Inheritance)"></a>8.9. 继承 (Inheritance)</h3><ul><li>继承表示，我的是我的，你的也是我的。使用 <code>:</code> 语法表示继承关系</li><li>继承主要用来消除冗余，让逻辑得以 <strong>复用</strong>。逻辑上来说，跟自然界的分门别类是对应一致的</li><li>new 对象的时候，会 <strong>开辟空间、初始化字段、调用构造器</strong>。如果存在继承关系的话，创建的实例是分为多部分的</li><li>调用实例上的某个方法 A，如果 A 调用了另一个方法 B，这时候，优先会使用 A 自身部分上面定义的 B。 如果想让 A 调用的 B 是派生类 <strong>最下面</strong> 的 B 的话，使用 <code>virutal/override</code> 将 B 设置为 <strong>虚函数</strong> 即可。 子类中存在的相同方法，如果不是 override 的，那么将会是 new 的。new 可以不写</li><li>在 C# 中，只允许有一个父类，即 <strong>单继承</strong></li><li>所有类的根基类是 <strong>object</strong>。object 中定义了 ToString&#x2F;GetType&#x2F;Equal 等方法。因此，所有的对象都拥有这几个方法</li><li>在方法中，使用 <strong>this</strong> 表示当前的对象，使用 <strong>base</strong> 表示父类部分。base.Xxx 表示调用父类部分的 Xxx</li><li>使用 private 修饰的数据不能被继承使用，这时候应该使用 <strong>protected</strong></li></ul><p>基本语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class A : object &#123; void Say() &#123;Console.WriteLine(&quot;hello&quot;);&#125; &#125;</span><br><span class="line">class B : A &#123;&#125;</span><br><span class="line">class C : B &#123; void Say() &#123;Console.WriteLine(&quot;world&quot;);&#125; &#125;</span><br><span class="line">class D : C &#123;&#125;</span><br><span class="line">D d = new D();</span><br><span class="line">d.Say();</span><br></pre></td></tr></table></figure><h4 id="8-9-1-虚方法-virtual-x2F-override"><a href="#8-9-1-虚方法-virtual-x2F-override" class="headerlink" title="8.9.1. 虚方法 (virtual&#x2F;override)"></a>8.9.1. 虚方法 (virtual&#x2F;override)</h4><p>虚函数:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span> &#123; Console.WriteLine(<span class="keyword">this</span>.Name()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">Say</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;heihei&quot;</span> + Name()); <span class="keyword">base</span>.Say(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;who&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;hahaha&quot;</span> + Name()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">D</span> : <span class="title">C</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;ryou&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> D();</span><br><span class="line">d.Say();</span><br></pre></td></tr></table></figure><p>虚不虚?</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Say</span>()</span> &#123; Console.WriteLine(<span class="keyword">this</span>.Name()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;heihei&quot;</span> + Name()); <span class="keyword">base</span>.Say(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;who&quot;</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Say</span>()</span> &#123; Console.WriteLine(<span class="string">&quot;hahaha&quot;</span> + Name()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">D</span> : <span class="title">C</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">Name</span>()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;ryou&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A a = <span class="keyword">new</span> D();</span><br><span class="line">a.Say();</span><br><span class="line"><span class="keyword">class</span> <span class="title">GrandPP</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">PP</span> : <span class="title">GrandPP</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">You</span> : <span class="title">PP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">You</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> addr</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(name + <span class="string">&quot;:&quot;</span> + addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> You();</span><br><span class="line"><span class="keyword">new</span> You(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> You(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;湖南&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="8-9-2-抽象方法-abstract"><a href="#8-9-2-抽象方法-abstract" class="headerlink" title="8.9.2. 抽象方法 (abstract)"></a>8.9.2. 抽象方法 (abstract)</h4><ul><li>继承下来的，不一定是权利，也有可能是义务。俗语有云 <strong>父债子偿</strong></li><li>通过在父类中，将某个方法用 <code>abstract</code> 修饰，表示它是债务…</li><li>抽象方法可以 (1) 约束子类的行为 (2) 将父类中无法实现的功能，交给子类去实现</li><li>抽象类是不能被实例化的</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Baba</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Money = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Sanjuhua</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;漂亮的女孩子都比较危险&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我有很多钱，藏在某个地方&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;但我不告诉你在哪里&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 花光这些钱();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">You</span> : <span class="title">Baba</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Sanjuhua</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;漂亮的女孩子是值得我们花一生去追求的&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我有很多钱，就放在中国银行的钱库里&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;但不要把钱放眼里，作为真男人，要敢于 996，奉献人生价值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> 花光这些钱()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第一天，花了 3 亿&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第二天，花了 33 亿&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第三天，花了 333 亿&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;第四天，梦醒了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-10-多态-Polymorphism"><a href="#8-10-多态-Polymorphism" class="headerlink" title="8.10. 多态 (Polymorphism)"></a>8.10. 多态 (Polymorphism)</h3><p>多态是一个来自生物学上的概念，<a href="https://baike.baidu.com/item/%E5%A4%9A%E6%80%81%E7%8E%B0%E8%B1%A1">参见百度百科</a>:</p><ul><li>在语言中，多态指调用同一个类型的相同方法&#x2F;属性，会产生不同结果的现象。 产生不同结果的原因是方法实质调用了不同派生类中的不同实现。</li><li>虚方法是实现多态性的主要手段，接口和抽象类是多态的充分体现</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量处理 (关心的是共性)</span></span><br><span class="line"></span><br><span class="line">Animal[] animals = <span class="keyword">new</span> Animal[<span class="number">3</span>];</span><br><span class="line">animals[<span class="number">0</span>] = <span class="keyword">new</span> Animal();</span><br><span class="line">animals[<span class="number">1</span>] = <span class="keyword">new</span> 美女();</span><br><span class="line">animals[<span class="number">2</span>] = <span class="keyword">new</span> 野兽();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; animals.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Animal a = animals[i];</span><br><span class="line">    a.Eat();</span><br><span class="line">    a.Sleep();</span><br><span class="line">    a.WakeUp();</span><br><span class="line">    a.Drink();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配的参数类型</span></span><br><span class="line"><span class="keyword">interface</span> 能干活的东西 &#123; <span class="keyword">void</span> 干活(); &#125;</span><br><span class="line"><span class="keyword">class</span> 人 : 能干活的东西 &#123; <span class="keyword">void</span> 干活 () &#123; ... &#125;; &#125;</span><br><span class="line"><span class="keyword">class</span> 猪 : 能干活的东西 &#123; <span class="keyword">void</span> 干活 () &#123; ... &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> 招聘 (能干活的东西 x) &#123;</span><br><span class="line">    x.干活();</span><br><span class="line">&#125;</span><br><span class="line">招聘(人);</span><br><span class="line">招聘(猪);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配的返回值 (约定跟实现的和谐)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Dog <span class="title">GiveADog</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> 二哈();</span><br><span class="line">&#125;</span><br><span class="line">Animal aaa = GiveADog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口与多态</span></span><br><span class="line"></span><br><span class="line">IHelpable xxx = <span class="keyword">new</span> TipCalculator(<span class="number">222</span>);</span><br><span class="line">xxx.Help();</span><br></pre></td></tr></table></figure><h3 id="8-11-静态类-x2F-static"><a href="#8-11-静态类-x2F-static" class="headerlink" title="8.11. 静态类&#x2F;static"></a>8.11. 静态类&#x2F;static</h3><p>限制里面所有的方法，必须是静态的。典型的代表是 Math 类。</p><h3 id="8-12-密封类-x2F-sealed"><a href="#8-12-密封类-x2F-sealed" class="headerlink" title="8.12. 密封类&#x2F;sealed"></a>8.12. 密封类&#x2F;sealed</h3><p>这就从语法上，避免了某个类被继承的可能。</p><h3 id="8-13-分部类-x2F-partial"><a href="#8-13-分部类-x2F-partial" class="headerlink" title="8.13. 分部类&#x2F;partial"></a>8.13. 分部类&#x2F;partial</h3><p>让类可以写成多部分。在编译的环节，编译器将会帮助我们自动合并之后再编译。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MyLove</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 你想我吗()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MyLove</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 我想你()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-14-基类-Object"><a href="#8-14-基类-Object" class="headerlink" title="8.14. 基类 Object"></a>8.14. 基类 Object</h3><h4 id="8-14-1-ToString"><a href="#8-14-1-ToString" class="headerlink" title="8.14.1. ToString"></a>8.14.1. ToString</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">TipCalculator</span> : <span class="title">CalculatorBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;我是一个账单类，传入的参数是 <span class="subst">&#123;Bill&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, <span class="keyword">new</span> TipCalculator(<span class="number">200</span>));</span><br></pre></td></tr></table></figure><h3 id="8-15-类的扩展机制"><a href="#8-15-类的扩展机制" class="headerlink" title="8.15. 类的扩展机制"></a>8.15. 类的扩展机制</h3><p>为某个类扩展功能的基本方式:</p><ol><li>直接修改源码，添加想要的方法</li><li>通过继承的方式，你的是我的我的还是我的</li></ol><p>如果无法修改源码、而且不能继承时，就需要下面这种扩展手段，具备特点:</p><ul><li>很灵活很方便</li><li>但需要慎用</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="number">90.</span>Repeat(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">        Console.WriteLine(<span class="number">30.</span>Repeat(<span class="string">&quot;+  &quot;</span>));</span><br><span class="line">        Console.WriteLine(<span class="number">30.</span>Repeat(<span class="string">&quot;|  &quot;</span>));</span><br><span class="line">        Console.WriteLine(<span class="number">30.</span>Repeat(<span class="string">&quot;|  &quot;</span>));</span><br><span class="line">        <span class="number">100.</span>Times(() =&gt; Console.Write(<span class="string">&quot;IOU &quot;</span>)); Console.WriteLine();</span><br><span class="line">        Console.WriteLine(<span class="number">30.</span>Repeat(<span class="string">&quot;|  &quot;</span>));</span><br><span class="line">        Console.WriteLine(<span class="number">30.</span>Repeat(<span class="string">&quot;|  &quot;</span>));</span><br><span class="line">        Console.WriteLine(<span class="number">30.</span>Repeat(<span class="string">&quot;+  &quot;</span>));</span><br><span class="line">        Console.WriteLine(<span class="number">90.</span>Repeat(<span class="string">&quot;-&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SuibianQigemingzi</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Cl0ne</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;hello <span class="subst">&#123;s&#125;</span>!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClOne</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;hello <span class="subst">&#123;s&#125;</span>!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">C1one</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;hello <span class="subst">&#123;s&#125;</span>!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hello</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;hello <span class="subst">&#123;s&#125;</span>!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hi</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> s, <span class="built_in">int</span> n = <span class="number">1</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;s&#125;</span> 加上 <span class="subst">&#123;n&#125;</span> 为 <span class="subst">&#123;s + n&#125;</span>!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Rot13</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">char</span> c <span class="keyword">in</span> str)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(RotChar(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">char</span> <span class="title">RotChar</span>(<span class="params"><span class="built_in">char</span> c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span> code = (<span class="built_in">byte</span>)c;</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">char</span>)(code + <span class="number">13</span> &gt; <span class="number">122</span> ? code - <span class="number">13</span> : code + <span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">char</span>)(code + <span class="number">13</span> &gt; <span class="number">90</span> ? code - <span class="number">13</span> : code + <span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Repeat</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> count, <span class="built_in">string</span> source</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Times</span>(<span class="params"><span class="keyword">this</span> <span class="built_in">int</span> count, Action action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-接口-Interface"><a href="#9-接口-Interface" class="headerlink" title="9. 接口 (Interface)"></a>9. 接口 (Interface)</h2><ul><li>接口本质就是一个可以进行 <strong>多继承</strong> 的纯的抽象类。它是单继承的一种例外</li><li>使用 interface 关键词声明接口，接口里面只能包含方法。按照习惯，一般使用 IXxx 的方式命名接口</li><li>不需要使用 public 修饰符，因为接口里所有方法默认都是公开的。方法不需要有方法体</li><li>接口实际上就是一种 <strong>合同</strong>，它起到的作用是制定统一的 <strong>规则</strong></li><li>接口有很多好处: blahblahblah… 面向接口编程是一种好的编程实践</li></ul><h3 id="9-1-IComparable-接口使用示例"><a href="#9-1-IComparable-接口使用示例" class="headerlink" title="9.1. IComparable 接口使用示例"></a>9.1. IComparable 接口使用示例</h3><p>IComparable 用来为两个对象进行比较提供比较的规则:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span> : <span class="title">IComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Salary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">double</span> sal, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Salary = sal;</span><br><span class="line">        Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareTo</span>(<span class="params"><span class="built_in">object</span>? obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> wo = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> ni = (Person) obj;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (wo.Salary &gt; ni.Salary) return -1;</span></span><br><span class="line">        <span class="comment">// if (wo.Salary &lt; ni.Salary) return 1;</span></span><br><span class="line">        <span class="comment">// return 0;</span></span><br><span class="line">        <span class="keyword">return</span> wo.Salary - ni.Salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;a-小明&quot;</span>, <span class="number">20000</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&quot;c-小张&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>);</span><br><span class="line">    <span class="keyword">var</span> p3 = <span class="keyword">new</span> Person(<span class="string">&quot;b-小王&quot;</span>, <span class="number">15000</span>, <span class="number">35</span>);</span><br><span class="line">    <span class="keyword">var</span> p4 = <span class="keyword">new</span> Person(<span class="string">&quot;d-小红&quot;</span>, <span class="number">7500</span>, <span class="number">19</span>);</span><br><span class="line">    <span class="keyword">var</span> p5 = <span class="keyword">new</span> Person(<span class="string">&quot;e-小强&quot;</span>, <span class="number">5000</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> persons = <span class="keyword">new</span> Person[] &#123;p1, p2, p3, p4, p5&#125;;</span><br><span class="line"></span><br><span class="line">    Array.Sort(persons);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> persons)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;p.Name&#125;</span>: <span class="subst">&#123;p.Age&#125;</span> 岁, 收入为 <span class="subst">&#123;p.Salary&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-结构体-Struct"><a href="#10-结构体-Struct" class="headerlink" title="10. 结构体 (Struct)"></a>10. 结构体 (Struct)</h2><ul><li>它跟 class 非常像，但它是值类型</li><li>由于是值类型，所以效率高:<ul><li>栈上，用完退栈，不需要垃圾回收</li><li>对象内部</li></ul></li><li>实际上，我们的常见预定义类型，都是实现为 struct (int&#x2F;float)</li><li>结构体，默认是密封的，因此，它不能继承</li><li>它支持 partial 的用法</li><li>它支持使用构造器:<ul><li>在构造器中，需要确保为每个成员赋值</li><li>包含一个默认构造器，里面会对所有成员进行初始化，我们不能将其覆盖掉</li></ul></li><li>它不需要，也不能有析构方法</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TestStuct();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;结束了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestStuct</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    YellowMan a = <span class="keyword">new</span> YellowMan();</span><br><span class="line">    a.Name = <span class="string">&quot;小黄人甲&quot;</span>;</span><br><span class="line">    a.Score = <span class="number">333.4</span>;</span><br><span class="line"></span><br><span class="line">    YellowMan b = <span class="keyword">new</span> YellowMan();</span><br><span class="line">    b.Name = <span class="string">&quot;小黄人乙&quot;</span>;</span><br><span class="line">    b.Score = <span class="number">133.4</span>;</span><br><span class="line"></span><br><span class="line">    b.ZiWoJieShao();</span><br><span class="line">    Console.WriteLine(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> YellowMan(<span class="string">&quot;kkk&quot;</span>, <span class="number">222</span>);</span><br><span class="line">    Console.WriteLine(d.Name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> YellowMan</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Score;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YellowMan</span>(<span class="params"><span class="built_in">string</span> n, <span class="built_in">double</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = n;</span><br><span class="line">        Score = s;</span><br><span class="line">        Age = <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ZiWoJieShao</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;我是 <span class="subst">&#123;Name&#125;</span>,我的可爱程度为 <span class="subst">&#123;Score&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, 小黄人&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> YellowMan c = <span class="keyword">new</span> YellowMan();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-枚举-Enum"><a href="#11-枚举-Enum" class="headerlink" title="11. 枚举 (Enum)"></a>11. 枚举 (Enum)</h2><p>int&#x2F;1 2 3 .. .. 3 double ….. bool: true&#x2F;false</p><p>Gender (男&#x2F;女&#x2F;未知)</p><h3 id="11-1-基本使用"><a href="#11-1-基本使用" class="headerlink" title="11.1. 基本使用"></a>11.1. 基本使用</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    checked</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine((<span class="built_in">int</span>)Gender3.女);</span><br><span class="line">        Console.WriteLine((<span class="built_in">int</span>)Gender3.男);</span><br><span class="line">        Console.WriteLine((<span class="built_in">int</span>)Gender3.我也不知道是男是女它到底是男是女呢谁知道呢不管他了);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Gender4.我也不知道是男是女它到底是男是女呢谁知道呢不管他了 == Gender4.男)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Yes.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> MyBool</span><br><span class="line">&#123;</span><br><span class="line">    True,</span><br><span class="line">    False</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Gender</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女,</span><br><span class="line">    我也不知道是男是女它到底是男是女呢谁知道呢不管他了</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Gender2</span><br><span class="line">&#123;</span><br><span class="line">    男 = <span class="number">0</span>,</span><br><span class="line">    女 = <span class="number">1</span>,</span><br><span class="line">    我也不知道是男是女它到底是男是女呢谁知道呢不管他了 = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Gender3</span><br><span class="line">&#123;</span><br><span class="line">    男 = <span class="number">110</span>,</span><br><span class="line">    女,</span><br><span class="line">    我也不知道是男是女它到底是男是女呢谁知道呢不管他了 = <span class="number">120</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Gender4</span><br><span class="line">&#123;</span><br><span class="line">    男 = <span class="number">110</span>,</span><br><span class="line">    女,</span><br><span class="line">    我也不知道是男是女它到底是男是女呢谁知道呢不管他了 = 男</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Gender5 : <span class="built_in">short</span></span><br><span class="line">&#123;</span><br><span class="line">    男 = <span class="number">110</span>,</span><br><span class="line">    女,</span><br><span class="line">    我也不知道是男是女它到底是男是女呢谁知道呢不管他了 = 男</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyGender</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> 男 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> 女 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> 我也不知道是男是女它到底是男是女呢谁知道呢不管他了 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-Flags-TODO"><a href="#11-2-Flags-TODO" class="headerlink" title="11.2. Flags (TODO)"></a>11.2. Flags (TODO)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Flags</span>]</span><br><span class="line"><span class="built_in">enum</span> FeichangJincouDeLeixing</span><br><span class="line">&#123;</span><br><span class="line">    A = <span class="number">0x12</span>,</span><br><span class="line">    B = <span class="number">0x13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">111111</span></span><br><span class="line"><span class="number">101001</span></span><br></pre></td></tr></table></figure><h3 id="11-3-基本-API"><a href="#11-3-基本-API" class="headerlink" title="11.3. 基本 API"></a>11.3. 基本 API</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> name <span class="keyword">in</span> Enum.GetNames(<span class="keyword">typeof</span>(Gender)))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> v <span class="keyword">in</span> Enum.GetValues(<span class="keyword">typeof</span>(Gender)))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine((<span class="built_in">int</span>)v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-委托-Delegate"><a href="#12-委托-Delegate" class="headerlink" title="12. 委托 (Delegate)"></a>12. 委托 (Delegate)</h2><ul><li>背景:<ul><li>我们需要通过参数的形式去传递一些逻辑</li><li>逻辑的基本单元是方法</li><li>很遗憾的是，方法在 C# 中并不是某种类型，也不具备相应的实例。因此，它不能作为参数被传递</li><li>所以，我们需要通过一定方式，达到能够传递方法 (以及其中的逻辑) 的目的</li><li>一种传统的方式，是将方法包含在某个类中，然后实例化并传递。但是这种方式特别麻烦</li><li>因此，在 C# 中为了解决这个问题，就推出了一种类型，叫做委托 (Delegate)</li></ul></li><li>总而言之，通过委托机制，达到 <strong>像传递对象实例一样，传递方法</strong> 的目的</li></ul><h3 id="12-1-写一个方法-MyAdd-，求取-若干数-的和"><a href="#12-1-写一个方法-MyAdd-，求取-若干数-的和" class="headerlink" title="12.1. 写一个方法 MyAdd ，求取 若干数 的和"></a>12.1. 写一个方法 MyAdd ，求取 <strong>若干数</strong> 的和</h3><h4 id="12-1-1-原始写法"><a href="#12-1-1-原始写法" class="headerlink" title="12.1.1. 原始写法"></a>12.1.1. 原始写法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Console.ForegroundColor = ConsoleColor.Red;</span></span><br><span class="line">    <span class="comment">// Console.WriteLine(sum);</span></span><br><span class="line">    <span class="comment">// Console.ResetColor();</span></span><br><span class="line">    <span class="comment">// 将上面三局，放到一个对象里，然后</span></span><br><span class="line">    <span class="built_in">object</span> o1 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> r1 = MyAdd(o1, <span class="number">12</span>, <span class="number">32</span>, <span class="number">1112232</span>, <span class="number">43</span>, <span class="number">1112212</span>, <span class="number">3232323</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="built_in">int</span> r2 = MyAdd(o2, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>);</span><br><span class="line">    <span class="built_in">int</span> r3 = MyAdd(o3, <span class="number">11</span>, <span class="number">2323</span>, <span class="number">4344</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params"><span class="built_in">object</span> gaosuwogaigansm, <span class="keyword">params</span> <span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Console.ForegroundColor = ConsoleColor.Red;</span></span><br><span class="line">    <span class="comment">// Console.WriteLine(sum);</span></span><br><span class="line">    <span class="comment">// Console.ResetColor();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Console.BackgroundColor = ConsoleColor.Red;</span></span><br><span class="line">    <span class="comment">// Console.WriteLine(&quot;和为：&quot;+sum);</span></span><br><span class="line">    <span class="comment">// Console.ResetColor();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File.AppendAllText(@&quot;E:\jiafa.txt&quot;, sum + &quot;\r\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// SpeechSynthesizer synth = new SpeechSynthesizer();</span></span><br><span class="line">    <span class="comment">// synth.Speak(sum.ToString());</span></span><br><span class="line">    <span class="comment">// synth.Dispose();</span></span><br><span class="line"></span><br><span class="line">    Bitmap image = <span class="keyword">new</span> Bitmap(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">    &#123;</span><br><span class="line">        g.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">        g.DrawString(sum.ToString(), <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    image.Save(<span class="string">@&quot;e:\hello.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点评:</p><ul><li>不能实现不同调用的时候，具备不同逻辑</li></ul><h4 id="12-1-2-通过一个-Flag-来通知-MyAdd-要去调用什么逻辑"><a href="#12-1-2-通过一个-Flag-来通知-MyAdd-要去调用什么逻辑" class="headerlink" title="12.1.2. 通过一个 Flag 来通知 MyAdd 要去调用什么逻辑"></a>12.1.2. 通过一个 Flag 来通知 MyAdd 要去调用什么逻辑</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r1 = MyAdd(<span class="number">1</span>,    <span class="number">12</span>, <span class="number">32</span>, <span class="number">1112232</span>, <span class="number">43</span>, <span class="number">1112212</span>, <span class="number">3232323</span>, <span class="number">123</span>);</span><br><span class="line">        <span class="built_in">int</span> r2 = MyAdd(<span class="number">2</span>,    <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>);</span><br><span class="line">        <span class="built_in">int</span> r3 = MyAdd(<span class="number">4</span>,    <span class="number">11</span>, <span class="number">2323</span>, <span class="number">4344</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params"><span class="built_in">int</span> flag, <span class="keyword">params</span> <span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Print1(sum);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                Print2(sum);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                ToFile(sum);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                Speech(sum);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                Draw(sum);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print1</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">        Console.WriteLine(sum);</span><br><span class="line">        Console.ResetColor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print2</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.BackgroundColor = ConsoleColor.Red;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;和为：&quot;</span> + sum);</span><br><span class="line">        Console.ResetColor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ToFile</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        File.AppendAllText(<span class="string">@&quot;E:\jiafa.txt&quot;</span>, sum + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Speech</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SpeechSynthesizer synth = <span class="keyword">new</span> SpeechSynthesizer();</span><br><span class="line">        synth.Speak(sum.ToString());</span><br><span class="line">        synth.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bitmap image = <span class="keyword">new</span> Bitmap(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">        &#123;</span><br><span class="line">            g.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            g.DrawString(sum.ToString(), <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        image.Save(<span class="string">@&quot;e:\hello.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点评:</p><ul><li>很直观，很简洁，很清晰</li><li>使用 flag 很难通过数字判断出来相对应的逻辑 (可以通过 enum 的改造，改善这个问题)</li><li>灵活性严重不足，扩张起来麻烦死了。</li></ul><h4 id="12-1-3-没有中间商赚差价，借助类和接口的方式，传递不同的方法"><a href="#12-1-3-没有中间商赚差价，借助类和接口的方式，传递不同的方法" class="headerlink" title="12.1.3. 没有中间商赚差价，借助类和接口的方式，传递不同的方法"></a>12.1.3. 没有中间商赚差价，借助类和接口的方式，传递不同的方法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r1 = MyAdd(<span class="keyword">new</span> Print1(), <span class="number">12</span>, <span class="number">32</span>, <span class="number">1112232</span>, <span class="number">43</span>, <span class="number">1112212</span>, <span class="number">3232323</span>, <span class="number">123</span>);</span><br><span class="line">        <span class="built_in">int</span> r2 = MyAdd(<span class="keyword">new</span> PrintAndWuwuwu(), <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params">IMyAdd o, <span class="keyword">params</span> <span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        o.A(sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span><span class="doctag">///</span>//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">interface</span> <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Print1</span> : <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line">            Console.ResetColor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Print2</span> : <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.BackgroundColor = ConsoleColor.Red;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;和为：&quot;</span> + sum);</span><br><span class="line">            Console.ResetColor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ToFile</span> : <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            File.AppendAllText(<span class="string">@&quot;E:\jiafa.txt&quot;</span>, sum + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">PrintAndWuwuwu</span> : <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.BackgroundColor = ConsoleColor.Green;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;哈哈哈，呜呜呜：&quot;</span> + sum);</span><br><span class="line">            Console.ResetColor();</span><br><span class="line">            SpeechSynthesizer synth = <span class="keyword">new</span> SpeechSynthesizer();</span><br><span class="line">            synth.Speak(<span class="string">&quot;呜呜呜呜呜呜呜，哈哈哈!&quot;</span>);</span><br><span class="line">            synth.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Speech</span> : <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SpeechSynthesizer synth = <span class="keyword">new</span> SpeechSynthesizer();</span><br><span class="line">            synth.Speak(sum.ToString());</span><br><span class="line">            synth.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Draw</span> : <span class="title">IMyAdd</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">A</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Bitmap image = <span class="keyword">new</span> Bitmap(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">            <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">            &#123;</span><br><span class="line">                g.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">                g.DrawString(sum.ToString(), <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            image.Save(<span class="string">@&quot;e:\hello.jpg&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-1-4-模板代码实在不爽，委托类型出现来救场"><a href="#12-1-4-模板代码实在不爽，委托类型出现来救场" class="headerlink" title="12.1.4. 模板代码实在不爽，委托类型出现来救场"></a>12.1.4. 模板代码实在不爽，委托类型出现来救场</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 声明一种数据类型，叫 MyWeiTuo，是委托类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyWeiTuo</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 2. 通过 new 操作符，为这种类型创建一个实例</span></span><br><span class="line">        MyWeiTuo v1 = <span class="keyword">new</span> MyWeiTuo(PrintAndWuwuwu);</span><br><span class="line">        <span class="comment">// 3. 使用这个实例。这里主要用作方法的参数传递</span></span><br><span class="line">        <span class="built_in">int</span> r1 = MyAdd(v1, <span class="number">12</span>, <span class="number">32</span>, <span class="number">1112232</span>, <span class="number">43</span>, <span class="number">1112212</span>, <span class="number">3232323</span>, <span class="number">123</span>);</span><br><span class="line">        <span class="built_in">int</span> r2 = MyAdd(<span class="keyword">new</span> MyWeiTuo(Print2), <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>);</span><br><span class="line">        <span class="built_in">int</span> r3 = MyAdd(MyLove, <span class="number">222</span>, <span class="number">333</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params">MyWeiTuo o, <span class="keyword">params</span> <span class="built_in">int</span>[] nums</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        o(sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print1</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">        Console.WriteLine(sum);</span><br><span class="line">        Console.ResetColor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print2</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.BackgroundColor = ConsoleColor.Red;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;和为：&quot;</span> + sum);</span><br><span class="line">        Console.ResetColor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ToFile</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        File.AppendAllText(<span class="string">@&quot;E:\jiafa.txt&quot;</span>, sum + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintAndWuwuwu</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.BackgroundColor = ConsoleColor.Green;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;哈哈哈，呜呜呜：&quot;</span> + sum);</span><br><span class="line">        Console.ResetColor();</span><br><span class="line">        SpeechSynthesizer synth = <span class="keyword">new</span> SpeechSynthesizer();</span><br><span class="line">        synth.Speak(<span class="string">&quot;呜呜呜呜呜呜呜，哈哈哈!&quot;</span>);</span><br><span class="line">        synth.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Speech</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SpeechSynthesizer synth = <span class="keyword">new</span> SpeechSynthesizer();</span><br><span class="line">        synth.Speak(sum.ToString());</span><br><span class="line">        synth.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bitmap image = <span class="keyword">new</span> Bitmap(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">        &#123;</span><br><span class="line">            g.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            g.DrawString(sum.ToString(), <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        image.Save(<span class="string">@&quot;e:\hello.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyLove</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我就是喜欢黄色，则么了.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-2-基本语法"><a href="#12-2-基本语法" class="headerlink" title="12.2. 基本语法"></a>12.2. 基本语法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明 (委托类型)</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyMethod1</span>()</span>;</span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyMethod2</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 2. 实例化</span></span><br><span class="line">        MyMethod1 m1 = <span class="keyword">new</span> MyMethod1(Hahaha);</span><br><span class="line">        MyMethod2 m2 = <span class="keyword">new</span> MyMethod2(<span class="keyword">new</span> Program().Heiheihei);</span><br><span class="line">        MyMethod1 m3 = Hahaha;</span><br><span class="line">        MyMethod2 m4 = <span class="keyword">new</span> Program().Heiheihei;</span><br><span class="line">        MyMethod2 m5 = Hehehe;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 使用</span></span><br><span class="line">        m1();</span><br><span class="line">        m2(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hahaha</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;hahaha, henkuaile.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">Heiheihei</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Hehehe</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b * a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-匿名委托"><a href="#12-3-匿名委托" class="headerlink" title="12.3. 匿名委托"></a>12.3. 匿名委托</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyAddWT</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 2. 实例化</span></span><br><span class="line">        MyAddWT maw = <span class="built_in">delegate</span>(<span class="built_in">int</span> sum)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;hahaha, henkuaile.&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 3. 使用</span></span><br><span class="line">        MyAdd(<span class="number">1</span>, <span class="number">3</span>, maw);</span><br><span class="line"></span><br><span class="line">        MyAdd(<span class="number">111</span>, <span class="number">333</span>, <span class="built_in">delegate</span>(<span class="built_in">int</span> sum)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我的结果是 &#123;0&#125;&quot;</span>, sum);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        MyAdd(<span class="number">121</span>, <span class="number">232</span>, <span class="built_in">delegate</span>(<span class="built_in">int</span> sum)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;我不告诉你结果&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, MyAddWT maw</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = a + b;</span><br><span class="line">        maw(r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-4-表达式语法"><a href="#12-4-表达式语法" class="headerlink" title="12.4. 表达式语法"></a>12.4. 表达式语法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明</span></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyAddWT</span>(<span class="params"><span class="built_in">int</span> sum</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyAddWT</span>(<span class="params"><span class="built_in">double</span> sum</span>)</span>;</span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MyAddWT</span>(<span class="params"><span class="built_in">double</span> sum</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// MyAddWT maw1 = new MyAddWT(MyAddShixian);</span></span><br><span class="line">        <span class="comment">// MyAddWT maw2 = MyAddShixian;</span></span><br><span class="line"></span><br><span class="line">        MyAddWT maw3 = <span class="built_in">delegate</span>(<span class="built_in">int</span> sum)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 实例化</span></span><br><span class="line">        MyAddWT maw4 = (<span class="built_in">int</span> sum) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        MyAddWT maw5 = (sum) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        MyAddWT maw6 = sum =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        MyAddWT maw7 = sum =&gt; Console.WriteLine(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 使用</span></span><br><span class="line">        MyAdd(<span class="number">111</span>, <span class="number">222</span>, maw7);</span><br><span class="line">        MyAdd(<span class="number">222</span>, <span class="number">333</span>, s =&gt; Console.WriteLine(<span class="string">$&quot;result: <span class="subst">&#123;s&#125;</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, MyAddWT maw</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = a + b;</span><br><span class="line">        maw(r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-5-内建的委托类型-Action-x2F-Func"><a href="#12-5-内建的委托类型-Action-x2F-Func" class="headerlink" title="12.5. 内建的委托类型 Action&#x2F;Func"></a>12.5. 内建的委托类型 Action&#x2F;Func</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//MyAdd2(222, 333, (a, b, r) =&gt; Console.WriteLine($&quot;&#123;a&#125; 加上 &#123;b&#125; 等于 &#123;r&#125;&quot;));</span></span><br><span class="line">        <span class="comment">//MyAdd2(222, 333, (a, b, r) =&gt; Console.WriteLine($&quot;&#123;a&#125; add &#123;b&#125; equals &#123;r&#125;&quot;));</span></span><br><span class="line">        MyAdd2(<span class="number">222</span>, <span class="number">333</span>, (a, b, r, s1, s2) =&gt; Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;a&#125;</span> <span class="subst">&#123;s1&#125;</span> <span class="subst">&#123;b&#125;</span> <span class="subst">&#123;s2&#125;</span> <span class="subst">&#123;r&#125;</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd1</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, Action act</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = a + b;</span><br><span class="line">        act();</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd2</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, Action&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">string</span>&gt; act</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = a + b;</span><br><span class="line">        act(a, b, r, <span class="string">&quot;jiashang&quot;</span>, <span class="string">&quot;dengyu&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-6-多播委托"><a href="#12-6-多播委托" class="headerlink" title="12.6. 多播委托"></a>12.6. 多播委托</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyWT a = <span class="keyword">new</span> MyWT(MyAdd);</span><br><span class="line">        MyWT b = <span class="keyword">new</span> MyWT(MyMul);</span><br><span class="line">        MyWT c = <span class="keyword">new</span> MyWT(MyFuza);</span><br><span class="line"></span><br><span class="line">        MyWT d = a + b + c + a + a + a + a;</span><br><span class="line">        MyWT e = d + b;</span><br><span class="line">        e += a;</span><br><span class="line">        e -= a;</span><br><span class="line">        Console.WriteLine(e(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// var d = a + b + c;</span></span><br><span class="line">        <span class="comment">// Console.WriteLine(d(4,5));</span></span><br><span class="line">        <span class="comment">// Console.WriteLine((a + b + c)(4, 5));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyAdd</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = a + b;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Add: &#123;0&#125;&quot;</span>, r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyMul</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = a * b;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Mul: &#123;0&#125;&quot;</span>, r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MyFuza</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> r = (<span class="built_in">int</span>)(a * a + Math.Pow(b, <span class="number">4</span>));</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fuza: &#123;0&#125;&quot;</span>, r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-7-练习-如何简化图片绘制的代码"><a href="#12-7-练习-如何简化图片绘制的代码" class="headerlink" title="12.7. [练习] 如何简化图片绘制的代码"></a>12.7. [练习] 如何简化图片绘制的代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawHello</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bitmap image = <span class="keyword">new</span> Bitmap(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">        &#123;</span><br><span class="line">            g.DrawString(<span class="string">&quot;Hello&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        image.Save(<span class="string">@&quot;e:\hello.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawWorld</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bitmap image = <span class="keyword">new</span> Bitmap(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">        &#123;</span><br><span class="line">            g.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            g.DrawString(<span class="string">&quot;World&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkOrange, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        image.Save(<span class="string">@&quot;e:\hello.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WithGraphics(<span class="string">@&quot;e:\hello333.jpg&quot;</span>, g =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            g.DrawString(<span class="string">&quot;wqwww&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Aria&quot;</span>, <span class="number">46</span>), Brushes.Aqua, <span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">            g.DrawString(<span class="string">&quot;Hello&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        WithGraphics(<span class="string">@&quot;e:\hello4444.jpg&quot;</span>, pen =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            pen.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">            pen.DrawString(<span class="string">&quot;World&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkOrange, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WithGraphics</span>(<span class="params"><span class="built_in">string</span> file, Action&lt;Graphics&gt; act, <span class="built_in">int</span> width = <span class="number">256</span>, <span class="built_in">int</span> height = <span class="number">256</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (File.Exists(file))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;文件已经存在....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (width &lt;= <span class="number">0</span> || height &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;尺寸不能为负&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Bitmap image2 = new Bitmap(file);</span></span><br><span class="line">        Bitmap image = <span class="keyword">new</span> Bitmap(width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">        &#123;</span><br><span class="line">            act(g);</span><br><span class="line">            g.DrawString(<span class="string">&quot;161&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">24</span>), Brushes.Red, width - <span class="number">50</span>, height - <span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        image.Save(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-8-练习-如何简化输出程序执行时间的逻辑"><a href="#12-8-练习-如何简化输出程序执行时间的逻辑" class="headerlink" title="12.8. [练习] 如何简化输出程序执行时间的逻辑"></a>12.8. [练习] 如何简化输出程序执行时间的逻辑</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        WithElapsedTime(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            WithGraphics(<span class="string">@&quot;e:\hello333.jpg&quot;</span>, g =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                g.DrawString(<span class="string">&quot;wqwww&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Aria&quot;</span>, <span class="number">46</span>), Brushes.Aqua, <span class="number">0</span>, <span class="number">300</span>);</span><br><span class="line">                g.DrawString(<span class="string">&quot;Hello&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkGreen, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">            &#125;, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WithElapsedTime(() =&gt;</span><br><span class="line">            WithGraphics(<span class="string">@&quot;e:\hello4444.jpg&quot;</span>, pen =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                pen.FillRectangle(Brushes.Yellow, <span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">                pen.DrawString(<span class="string">&quot;World&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;Monospace&quot;</span>, <span class="number">26</span>), Brushes.DarkOrange, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WithElapsedTime</span>(<span class="params">Action code</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        sw.Start();</span><br><span class="line">        code();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;程序执行消耗的时间为: &#123;0&#125;&quot;</span>, sw.ElapsedMilliseconds);</span><br><span class="line">        sw.Stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WithGraphics</span>(<span class="params"><span class="built_in">string</span> file, Action&lt;Graphics&gt; act, <span class="built_in">int</span> width = <span class="number">256</span>, <span class="built_in">int</span> height = <span class="number">256</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (File.Exists(file))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;文件已经存在....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (width &lt;= <span class="number">0</span> || height &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;尺寸不能为负&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Bitmap image2 = new Bitmap(file);</span></span><br><span class="line">        Bitmap image = <span class="keyword">new</span> Bitmap(width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(image))</span><br><span class="line">        &#123;</span><br><span class="line">            act(g);</span><br><span class="line">            g.DrawString(<span class="string">&quot;161&quot;</span>, <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">24</span>), Brushes.Red, width - <span class="number">50</span>, height - <span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        image.Save(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-数组-Array"><a href="#13-数组-Array" class="headerlink" title="13. 数组 (Array)"></a>13. 数组 (Array)</h2><h3 id="13-1-一维数组"><a href="#13-1-一维数组" class="headerlink" title="13.1. 一维数组"></a>13.1. 一维数组</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明</span></span><br><span class="line"><span class="built_in">int</span>[] arr1;</span><br><span class="line"><span class="built_in">string</span>[] arr2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 实例化</span></span><br><span class="line">arr1 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 初始值</span></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">22</span>;</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="number">45</span>;</span><br><span class="line">arr1[<span class="number">3</span>] = <span class="number">555</span>;</span><br><span class="line"><span class="comment">// arr1[4] = 777; // System.IndexOutOfRangeException</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 基本访问</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr1.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="built_in">string</span>[] arr2;</span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">5</span>];</span><br><span class="line">arr2[<span class="number">3</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">Console.WriteLine(arr2[<span class="number">0</span>] == <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Student</span></span><br><span class="line">Student[] arr3;</span><br><span class="line">arr3 = <span class="keyword">new</span> Student[<span class="number">8</span>];</span><br><span class="line">arr3[<span class="number">3</span>] = <span class="keyword">new</span> Student();</span><br><span class="line">Console.WriteLine(arr3[<span class="number">0</span>] == <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>数组表示法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] arr0;</span><br><span class="line">arr0 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>];</span><br><span class="line">arr0[<span class="number">0</span>] = <span class="number">22</span>;</span><br><span class="line">arr0[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr0[<span class="number">2</span>] = <span class="number">45</span>;</span><br><span class="line">arr0[<span class="number">3</span>] = <span class="number">555</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arr1 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>];</span><br><span class="line">arr1[<span class="number">0</span>] = <span class="number">22</span>;</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="number">45</span>;</span><br><span class="line">arr1[<span class="number">3</span>] = <span class="number">555</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arr2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>] &#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arr3 = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[] arr4 = &#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr5 = <span class="keyword">new</span> <span class="built_in">int</span>[]&#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> arr6 = <span class="keyword">new</span> [] &#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小结:</span></span><br><span class="line"><span class="built_in">int</span>[] arr = &#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> []&#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br></pre></td></tr></table></figure><p>数组的扩张:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] arr = &#123; <span class="number">22</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">555</span> &#125;;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">666</span>;</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">777</span>;</span><br></pre></td></tr></table></figure><h3 id="13-2-多维数组-Dimensional-Array"><a href="#13-2-多维数组-Dimensional-Array" class="headerlink" title="13.2. 多维数组 (Dimensional Array)"></a>13.2. 多维数组 (Dimensional Array)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[,,] arr =</span><br><span class="line">&#123;</span><br><span class="line">    &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;&#125;,</span><br><span class="line">    &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;&#125;,</span><br><span class="line">    &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;&#125;,</span><br><span class="line">    &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Console.WriteLine(arr.Rank); <span class="comment">// 秩</span></span><br><span class="line">Console.WriteLine(arr.Length);</span><br><span class="line">Console.WriteLine(arr.GetLength(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="13-3-交错数组-Jagged-Array"><a href="#13-3-交错数组-Jagged-Array" class="headerlink" title="13.3. 交错数组 (Jagged Array)"></a>13.3. 交错数组 (Jagged Array)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[][] arr = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>[][,] arr2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>][,];</span><br><span class="line">arr2[<span class="number">2</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[,] &#123; &#123;<span class="number">2</span>&#125;, &#123;<span class="number">3</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><h2 id="14-元组-Tuple-x2F-ValueTuple"><a href="#14-元组-Tuple-x2F-ValueTuple" class="headerlink" title="14. 元组 (Tuple&#x2F;ValueTuple)"></a>14. 元组 (Tuple&#x2F;ValueTuple)</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> Score;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Tel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用数组的方式，可以存储处理相同类型的数据</span></span><br><span class="line">        <span class="built_in">int</span>[] ids = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span>[] names = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小红&quot;</span>, <span class="string">&quot;大黄&quot;</span>, <span class="string">&quot;张三&quot;</span> &#125;;</span><br><span class="line">        <span class="built_in">double</span>[] scores = <span class="keyword">new</span> <span class="built_in">double</span>[] &#123; <span class="number">67.5</span>, <span class="number">60</span>, <span class="number">59.9</span>, <span class="number">90</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用类和对象的方式，可以处理不同数据的存储 (强大，但麻烦)</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.Id = <span class="number">2</span>;</span><br><span class="line">        s1.Name = <span class="string">&quot;小红&quot;</span>;</span><br><span class="line">        s1.Score = <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> s3 = <span class="keyword">new</span> Student &#123; Id = <span class="number">1</span>, Name = <span class="string">&quot;小明&quot;</span>, Score = <span class="number">67.5</span> &#125;;</span><br><span class="line">        <span class="keyword">var</span> s4 = <span class="keyword">new</span> Student &#123; Id = <span class="number">3</span>, Name = <span class="string">&quot;大黄&quot;</span>, Score = <span class="number">59</span>, Tel = <span class="string">&quot;+86110&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匿名类型，不需要事先声明一个类，就可以实例化出一个对象来</span></span><br><span class="line">        <span class="keyword">var</span> s5 = <span class="keyword">new</span> &#123; Xuehao = <span class="number">3</span>, Xingming = <span class="string">&quot;大黄&quot;</span>, Fenshu = <span class="number">59</span>, Dianhua = <span class="string">&quot;+86110&quot;</span>, Dizhi = <span class="string">&quot;地球村&quot;</span> &#125;;</span><br><span class="line">        Console.WriteLine(s5.Fenshu);</span><br><span class="line">        Console.WriteLine(s5.GetType());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 元组 (Tuple)</span></span><br><span class="line">        Tuple&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; s6 = <span class="keyword">new</span> Tuple&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">111</span>, <span class="number">2222</span>);</span><br><span class="line">        Tuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">int</span>, <span class="built_in">string</span>&gt; s61 = Tuple.Create(<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        xxx(s61);</span><br><span class="line">        Console.WriteLine(s61.Item1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 out 的方式，处理方法的多个返回值</span></span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="built_in">int</span> age = yyy(<span class="keyword">out</span> name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Tuple 的方式</span></span><br><span class="line">        <span class="keyword">var</span> r = zzz();</span><br><span class="line">        Console.WriteLine(r.Item1);</span><br><span class="line">        Console.WriteLine(r.Item2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ValueTuple</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xxx</span>(<span class="params">Tuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">int</span>, <span class="built_in">string</span>&gt; sss</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;sss.Item2&#125;</span> 的成绩为 <span class="subst">&#123;sss.Item3&#125;</span>!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">yyy</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span> age = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Tuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; <span class="title">zzz</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Tuple.Create(<span class="number">16</span>, <span class="string">&quot;xiaohua&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ValueTuple:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 元组 (Tuple，很丑很温柔)</span></span><br><span class="line">        Tuple&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; s6 = <span class="keyword">new</span> Tuple&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">111</span>, <span class="number">2222</span>);</span><br><span class="line">        Tuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">int</span>, <span class="built_in">string</span>&gt; s61 = Tuple.Create(<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ValueTuple</span></span><br><span class="line">        ValueTuple&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; s7 = <span class="keyword">new</span> ValueTuple&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">111</span>, <span class="number">2222</span>);</span><br><span class="line">        ValueTuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>, <span class="built_in">int</span>, <span class="built_in">string</span>&gt; s71 = ValueTuple.Create(<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> s72 = ValueTuple.Create(<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        s72.Item3 = <span class="number">77</span>;</span><br><span class="line">        Console.WriteLine(s72.Item3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化，语法糖</span></span><br><span class="line">        <span class="keyword">var</span> s73 = (<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        Console.WriteLine(s73.Item2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s74 = (<span class="number">111</span>, name: <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        Console.WriteLine(s74.name);</span><br><span class="line">        <span class="keyword">var</span> s75 = (id: <span class="number">111</span>, name: <span class="string">&quot;小明&quot;</span>, score: <span class="number">67</span>, tel: <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;s75.name&#125;</span> 的分数是 <span class="subst">&#123;s75.score&#125;</span>，快告诉ta爸爸，号码是 <span class="subst">&#123;s75.tel&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//var s76 = (111, &quot;小明&quot;, 67, &quot;110&quot;);</span></span><br><span class="line">        <span class="comment">//var id = s76.Item1;</span></span><br><span class="line">        <span class="comment">//var name = s76.Item2;</span></span><br><span class="line">        <span class="comment">//var score = s76.Item3;</span></span><br><span class="line">        <span class="comment">//var tel = s76.Item4;</span></span><br><span class="line">        (<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">double</span> score, <span class="built_in">string</span> tel) = (<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> (id2, name2, score2, tel2) = (<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;name2&#125;</span> 的分数是 <span class="subst">&#123;score2&#125;</span>，快告诉ta爸爸，号码是 <span class="subst">&#123;tel2&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> (_, _, _, tel3) = (<span class="number">111</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">67</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// xxx1 的调用</span></span><br><span class="line">        <span class="built_in">string</span> n1;</span><br><span class="line">        <span class="built_in">int</span> a1 = xxx1(<span class="keyword">out</span> n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// xxx2 的调用</span></span><br><span class="line">        <span class="keyword">var</span> t1 = xxx2();</span><br><span class="line">        Console.WriteLine(t1.Item2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// xxx3 的调用</span></span><br><span class="line">        <span class="keyword">var</span> (age2, name8) = xxx3();</span><br><span class="line">        Console.WriteLine(age2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// xxx4 的调用</span></span><br><span class="line">        <span class="keyword">var</span> (aa4, nn4) = xxx3();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;名字是 <span class="subst">&#123;nn4&#125;</span>, 年龄是 <span class="subst">&#123;aa4&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">xxx1</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;xm&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Tuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; <span class="title">xxx2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Tuple.Create(<span class="number">16</span>, <span class="string">&quot;xm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ValueTuple&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; <span class="title">xxx3</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ValueTuple.Create(<span class="number">16</span>, <span class="string">&quot;xm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> (<span class="built_in">int</span>, <span class="built_in">string</span>) xxx4()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">16</span>, <span class="string">&quot;xm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-集合-Collections"><a href="#15-集合-Collections" class="headerlink" title="15. 集合 (Collections)"></a>15. 集合 (Collections)</h2><h3 id="15-1-System-Collections"><a href="#15-1-System-Collections" class="headerlink" title="15.1. System.Collections"></a>15.1. System.Collections</h3><h4 id="15-1-1-ArrayList"><a href="#15-1-1-ArrayList" class="headerlink" title="15.1.1. ArrayList"></a>15.1.1. ArrayList</h4><ul><li>以数字为下标</li><li>有序的，自动编号</li><li>集合 (数据容器)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 数组，本身长度是不能变化的</span></span><br><span class="line">        <span class="comment">// 因此，要往数组里添加元素，只能创建一个更长的数组取代它</span></span><br><span class="line">        <span class="keyword">var</span> a1 = <span class="keyword">new</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">var</span> a2 = <span class="keyword">new</span> <span class="built_in">int</span>[a1.Length + <span class="number">1</span>];</span><br><span class="line">        a2[<span class="number">0</span>] = a1[<span class="number">0</span>];</span><br><span class="line">        a2[<span class="number">1</span>] = a1[<span class="number">1</span>];</span><br><span class="line">        a2[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">        a2[<span class="number">3</span>] = a1[<span class="number">2</span>];</span><br><span class="line">        a1 = a2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们可以通过自定义一个类的方式，将上述的操作封装起来</span></span><br><span class="line">        <span class="keyword">var</span> na1 = <span class="keyword">new</span> NideArray();</span><br><span class="line">        na1.Add(<span class="number">1</span>);</span><br><span class="line">        na1.Add(<span class="number">2</span>);</span><br><span class="line">        na1.Add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> o <span class="keyword">in</span> na1.innerArray)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接使用 BCL 中的集合类，不需要造轮子</span></span><br><span class="line">        <span class="keyword">var</span> al = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        al.Add(<span class="number">1</span>);</span><br><span class="line">        al.Add(<span class="number">21111</span>);</span><br><span class="line">        al.Add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;长度 &#123;0&#125;&quot;</span>, al.Count);</span><br><span class="line">        al.Remove(<span class="number">3</span>);</span><br><span class="line">        al.RemoveAt(<span class="number">0</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;长度 &#123;0&#125;&quot;</span>, al.Count);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> o <span class="keyword">in</span> al)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">NideArray</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span>[] innerArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">object</span> o</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">object</span>[innerArray.Length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; innerArray.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = innerArray[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[arr.Length - <span class="number">1</span>] = o;</span><br><span class="line">        innerArray = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params"><span class="built_in">object</span> o</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-1-2-Hashtable"><a href="#15-1-2-Hashtable" class="headerlink" title="15.1.2. Hashtable"></a>15.1.2. Hashtable</h4><ul><li>以对象为下标</li><li>k-v pair &#x2F; 键值对</li><li>对于 key 最重要的是: 唯一性</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 序号 vs 名字</span></span><br><span class="line">        <span class="keyword">var</span> t1 = (<span class="number">123</span>, <span class="string">&quot;小明&quot;</span>, <span class="number">78.5</span>, <span class="string">&quot;110&quot;</span>); <span class="comment">// t1.Item1, t1.Item2 ...</span></span><br><span class="line">        <span class="keyword">var</span> t2 = (id: <span class="number">123</span>, name: <span class="string">&quot;小明&quot;</span>, score: <span class="number">78.5</span>); <span class="comment">// t2.name, t2.score</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序号</span></span><br><span class="line">        <span class="keyword">var</span> n1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        n1.Add(<span class="string">&quot;小明&quot;</span>); <span class="comment">// 0</span></span><br><span class="line">        n1.Add(<span class="string">&quot;小红&quot;</span>); <span class="comment">// 1</span></span><br><span class="line">        n1.Add(<span class="string">&quot;小蓝&quot;</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        s1.Add(<span class="number">59.5</span>); <span class="comment">// 0</span></span><br><span class="line">        s1.Add(<span class="number">97.5</span>); <span class="comment">// 1</span></span><br><span class="line">        s1.Add(<span class="number">67.5</span>); <span class="comment">// 2</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;取某个值: &#123;0&#125;&quot;</span>, s1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> name = n1[i].ToString();</span><br><span class="line">            <span class="built_in">double</span> score = (<span class="built_in">double</span>)s1[i];</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;name&#125;</span> 的成绩为 <span class="subst">&#123;score&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显式指定名字 (k-v)</span></span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        s2.Add(<span class="string">&quot;小明&quot;</span>, <span class="number">59.5</span>);</span><br><span class="line">        s2.Add(<span class="string">&quot;小红&quot;</span>, <span class="number">97.5</span>);</span><br><span class="line">        s2.Add(<span class="string">&quot;小蓝&quot;</span>, <span class="number">67.5</span>);</span><br><span class="line">        s2.Add(<span class="string">&quot;小强&quot;</span>, <span class="number">167.5</span>);</span><br><span class="line">        s2.Add(<span class="string">&quot;小弱&quot;</span>, <span class="number">667.5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;取某个值: &#123;0&#125;&quot;</span>, s2[<span class="string">&quot;小明&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (DictionaryEntry o <span class="keyword">in</span> s2)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;- <span class="subst">&#123;o.Key&#125;</span>: <span class="subst">&#123;o.Value&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> k <span class="keyword">in</span> s2.Keys)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以以自定义对象为下标，但是 <strong>需要重写 GetHashCode&#x2F;Equals 方法</strong>:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 以对象为 Key</span></span><br><span class="line">        <span class="keyword">var</span> s3 = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        s3.Add(<span class="keyword">new</span> Student(<span class="string">&quot;小明&quot;</span>), <span class="number">59.5</span>);</span><br><span class="line">        s3.Add(<span class="keyword">new</span> Student(<span class="string">&quot;小红&quot;</span>), <span class="number">97.5</span>);</span><br><span class="line">        s3.Add(<span class="keyword">new</span> Student(<span class="string">&quot;小蓝&quot;</span>), <span class="number">67.5</span>);</span><br><span class="line">        s3.Add(<span class="keyword">new</span> Student(<span class="string">&quot;小强&quot;</span>), <span class="number">167.5</span>);</span><br><span class="line">        s3.Add(<span class="keyword">new</span> Student(<span class="string">&quot;小弱&quot;</span>), <span class="number">667.5</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;+ &#123;0&#125;&quot;</span>, s3[<span class="keyword">new</span> Student(<span class="string">&quot;小弱&quot;</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Tel &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name</span>)</span> =&gt; Name = name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">GetHashCode</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Name.GetHashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">Equals</span>(<span class="params"><span class="built_in">object</span>? obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Student s = obj <span class="keyword">as</span> Student;</span><br><span class="line">        <span class="keyword">return</span> s != <span class="literal">null</span> &amp;&amp; Name == s.Name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-1-3-Queue"><a href="#15-1-3-Queue" class="headerlink" title="15.1.3. Queue"></a>15.1.3. Queue</h4><p>FIFO (First In First Out，先进先出):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> q1 = <span class="keyword">new</span> Queue();</span><br><span class="line">q1.Enqueue(<span class="number">111</span>);</span><br><span class="line">q1.Enqueue(<span class="number">222</span>);</span><br><span class="line">q1.Enqueue(<span class="number">333</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> who = q1.Dequeue();</span><br><span class="line">Console.WriteLine(who);</span><br><span class="line">Console.WriteLine(q1.Peek()); <span class="comment">// 只看不移除</span></span><br><span class="line">Console.WriteLine(q1.Dequeue());</span><br><span class="line"></span><br><span class="line">Console.WriteLine(q1.Count);</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span>[] arr = q1.ToArray();</span><br></pre></td></tr></table></figure><h4 id="15-1-4-Stack"><a href="#15-1-4-Stack" class="headerlink" title="15.1.4. Stack"></a>15.1.4. Stack</h4><p>LIFO (Last In First Out，后进先出):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Stack();</span><br><span class="line">s1.Push(<span class="number">111</span>);</span><br><span class="line">s1.Push(<span class="number">222</span>);</span><br><span class="line">s1.Push(<span class="number">333</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> who = s1.Pop();</span><br><span class="line">Console.WriteLine(who);</span><br><span class="line">Console.WriteLine(s1.Peek());</span><br><span class="line">Console.WriteLine(s1.Pop());</span><br><span class="line"></span><br><span class="line">Console.WriteLine(s1.Count);</span><br><span class="line">Console.WriteLine(s1.Peek());</span><br><span class="line"></span><br><span class="line">s1.Clear();</span><br></pre></td></tr></table></figure><p>实现自己的栈:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>: <span class="keyword">class</span> <span class="title">MyStack</span></span><br><span class="line"> 2: &#123;</span><br><span class="line"> <span class="number">3</span>:     <span class="keyword">private</span> <span class="built_in">int</span> stackTop = <span class="number">0</span>; <span class="comment">// 栈顶</span></span><br><span class="line"> <span class="number">4</span>:     <span class="keyword">private</span> <span class="built_in">object</span>[] _items = <span class="keyword">new</span> <span class="built_in">object</span>[<span class="number">200</span>];</span><br><span class="line"> <span class="number">5</span>: </span><br><span class="line"> <span class="number">6</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params"><span class="built_in">object</span> w</span>)</span></span><br><span class="line"><span class="function"> 7:</span>     &#123;</span><br><span class="line"> <span class="number">8</span>:         _items[stackTop] = w;</span><br><span class="line"> <span class="number">9</span>:         stackTop = stackTop + <span class="number">1</span>;</span><br><span class="line"><span class="number">10</span>:     &#125;</span><br><span class="line"><span class="number">11</span>: </span><br><span class="line"><span class="number">12</span>:     <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Pop</span>()</span></span><br><span class="line"><span class="function">13:</span>     &#123;</span><br><span class="line"><span class="number">14</span>:         stackTop = stackTop - <span class="number">1</span>;</span><br><span class="line"><span class="number">15</span>:         <span class="keyword">return</span> _items[stackTop];</span><br><span class="line"><span class="number">16</span>:     &#125;</span><br><span class="line"><span class="number">17</span>: </span><br><span class="line"><span class="number">18</span>:     <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Peek</span>()</span></span><br><span class="line"><span class="function">19:</span>     &#123;</span><br><span class="line"><span class="number">20</span>:         <span class="keyword">return</span> _items[stackTop - <span class="number">1</span>];</span><br><span class="line"><span class="number">21</span>:     &#125;</span><br><span class="line"><span class="number">22</span>: </span><br><span class="line"><span class="number">23</span>:     <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line"><span class="number">24</span>:     &#123;</span><br><span class="line"><span class="number">25</span>:         <span class="keyword">get</span> =&gt; stackTop;</span><br><span class="line"><span class="number">26</span>:     &#125;</span><br><span class="line"><span class="number">27</span>: </span><br><span class="line"><span class="number">28</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line"><span class="function">29:</span>     &#123;</span><br><span class="line"><span class="number">30</span>:         stackTop = <span class="number">0</span>;</span><br><span class="line"><span class="number">31</span>:     &#125;</span><br><span class="line"><span class="number">32</span>: &#125;</span><br></pre></td></tr></table></figure><h4 id="15-1-5-SortedList-x2F-BitArray"><a href="#15-1-5-SortedList-x2F-BitArray" class="headerlink" title="15.1.5. SortedList&#x2F;BitArray"></a>15.1.5. SortedList&#x2F;BitArray</h4><h3 id="15-2-System-Collections-Generic"><a href="#15-2-System-Collections-Generic" class="headerlink" title="15.2. System.Collections.Generic"></a>15.2. System.Collections.Generic</h3><h4 id="15-2-1-List-lt-T-gt"><a href="#15-2-1-List-lt-T-gt" class="headerlink" title="15.2.1. List &lt;T&gt;"></a>15.2.1. List <code>&lt;T&gt;</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; l1 = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l2 = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">l2.Add(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">l2.Add(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">l2.Add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">l2.Add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">l2.Add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">l2.Add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">l2.Insert(<span class="number">1</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">l2.RemoveAll(s =&gt; s.Length &lt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l3 = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123;<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">l3.Insert(<span class="number">1</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">l3.RemoveAll(s =&gt; s.Length &lt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = l2[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> e <span class="keyword">in</span> l2)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-2-2-Dictionary-lt-TKey-TValue-gt"><a href="#15-2-2-Dictionary-lt-TKey-TValue-gt" class="headerlink" title="15.2.2. Dictionary&lt;TKey, TValue&gt;"></a>15.2.2. Dictionary&lt;TKey, TValue&gt;</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">double</span>&gt;();</span><br><span class="line">d1.Add(<span class="string">&quot;xm&quot;</span>, <span class="number">67.5</span>);</span><br><span class="line">d1.Add(<span class="string">&quot;xh&quot;</span>, <span class="number">97.5</span>);</span><br><span class="line">d1.Add(<span class="string">&quot;xl&quot;</span>, <span class="number">75</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="string">&quot;xm&quot;</span>, <span class="number">67.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;xh&quot;</span>, <span class="number">97.5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;xl&quot;</span>, <span class="number">75</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">double</span> s1 = d2[<span class="string">&quot;xh&quot;</span>];</span><br><span class="line">Console.WriteLine(s1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> isSuccess = d2.TryAdd(<span class="string">&quot;xm&quot;</span>, <span class="number">100</span>);</span><br><span class="line">Console.WriteLine(isSuccess);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">value</span> <span class="keyword">in</span> d2.Values)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-2-3-Queue-lt-T-gt"><a href="#15-2-3-Queue-lt-T-gt" class="headerlink" title="15.2.3. Queue &lt;T&gt;"></a>15.2.3. Queue <code>&lt;T&gt;</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var q1 = new Queue&lt;string&gt;();</span><br><span class="line">q1.Enqueue(&quot;小明&quot;);</span><br><span class="line">q1.Enqueue(&quot;小兰&quot;);</span><br><span class="line">q1.Enqueue(&quot;小朱&quot;);</span><br><span class="line"></span><br><span class="line">string n1 = q1.Dequeue();</span><br><span class="line">Console.WriteLine(n1);</span><br></pre></td></tr></table></figure><h4 id="15-2-4-Stack-lt-T-gt"><a href="#15-2-4-Stack-lt-T-gt" class="headerlink" title="15.2.4. Stack &lt;T&gt;"></a>15.2.4. Stack <code>&lt;T&gt;</code></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Stack&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">s1.Push(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">s1.Push(<span class="string">&quot;小兰&quot;</span>);</span><br><span class="line">s1.Push(<span class="string">&quot;小朱&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> n1 = s1.Pop();</span><br><span class="line"><span class="built_in">string</span> n2 = s1.Peek();</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> shibushichenggongle = s1.TryPop(<span class="keyword">out</span> <span class="built_in">string</span> n3);</span><br><span class="line">Console.WriteLine(shibushichenggongle);</span><br></pre></td></tr></table></figure><h4 id="15-2-5-LinkedList-lt-T-gt"><a href="#15-2-5-LinkedList-lt-T-gt" class="headerlink" title="15.2.5. LinkedList &lt;T&gt;"></a>15.2.5. LinkedList <code>&lt;T&gt;</code></h4><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.linkedlist-1?view=net-5.0">https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.linkedlist-1?view=net-5.0</a></p><h4 id="15-2-6-HashSet-lt-T-gt"><a href="#15-2-6-HashSet-lt-T-gt" class="headerlink" title="15.2.6. HashSet &lt;T&gt;"></a>15.2.6. HashSet <code>&lt;T&gt;</code></h4><ul><li>无序</li><li>唯一</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hs1 = <span class="keyword">new</span> HashSet&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">hs1.Add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">hs1.Add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">hs1.Add(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">hs1.Add(<span class="string">&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hs2 = <span class="keyword">new</span> HashSet&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">hs2.Add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">hs2.Add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(hs1.Count);</span><br><span class="line">hs1.IntersectWith(hs2);</span><br><span class="line">hs1.UnionWith(hs2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重的一种方法</span></span><br><span class="line"><span class="keyword">var</span> list1 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">22</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> hs3 = <span class="keyword">new</span> HashSet&lt;<span class="built_in">int</span>&gt;(list1);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> o <span class="keyword">in</span> hs3.ToList())</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-2-7-SortedList-x2F-Set-x2F-Dictionary-lt-gt"><a href="#15-2-7-SortedList-x2F-Set-x2F-Dictionary-lt-gt" class="headerlink" title="15.2.7. SortedList&#x2F;Set&#x2F;Dictionary&lt;&gt;"></a>15.2.7. SortedList&#x2F;Set&#x2F;Dictionary&lt;&gt;</h4><h3 id="15-3-System-Collections-Immutable"><a href="#15-3-System-Collections-Immutable" class="headerlink" title="15.3. System.Collections.Immutable"></a>15.3. System.Collections.Immutable</h3><p>ImmutableList:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> list1 = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Console.WriteLine(list1.Count);</span><br><span class="line">    Xxx(list1.ToImmutableList());</span><br><span class="line">    Console.WriteLine(list1.Count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Xxx</span>(<span class="params">ImmutableList&lt;<span class="built_in">string</span>&gt; l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    l.Add(<span class="string">&quot;kkkkkkk&quot;</span>);</span><br><span class="line">    l.Add(<span class="string">&quot;kkkkkk2&quot;</span>);</span><br><span class="line">    l = l.Add(<span class="string">&quot;kkkk&quot;</span>).Add(<span class="string">&quot;1&quot;</span>).Add(<span class="string">&quot;33&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> s <span class="keyword">in</span> l)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-IEnumerable-x2F-Linq"><a href="#16-IEnumerable-x2F-Linq" class="headerlink" title="16. IEnumerable&#x2F;Linq"></a>16. IEnumerable&#x2F;Linq</h2><ol><li>string&#x2F;array&#x2F;List&#x2F;Dict 虽然不是同一种类型，但是很像，有没有内在相似的逻辑? [思考]</li><li>a) 容器 b) 遍历</li><li>将上述两点逻辑，抽象为接口 IEnumerable&#x2F;IEnumerator(MoveNext,Current)</li><li>为了便于使用这个接口，出现 foreach 语法</li><li>通过插件的形式，推出了 Linq 的机制 (Where&#x2F;Select&#x2F;OrderBy&#x2F;Avg&#x2F;Sum)<ul><li>Method 语法</li><li>Query 表达式语法 (Linq to Object)</li></ul></li><li>Linq Provider (Linq 供应商&#x2F;提供者):<ul><li>Linq to XML</li><li>Linq to SQL</li><li>Linq to Entity</li></ul></li></ol><h3 id="16-1-IEnumerable-x2F-IEnumerator-x2F-foreach"><a href="#16-1-IEnumerable-x2F-IEnumerator-x2F-foreach" class="headerlink" title="16.1. IEnumerable&#x2F;IEnumerator&#x2F;foreach"></a>16.1. IEnumerable&#x2F;IEnumerator&#x2F;foreach</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        List&lt;<span class="built_in">double</span>&gt; l1 = <span class="keyword">new</span> List&lt;<span class="built_in">double</span>&gt; &#123;<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">4.6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Rainbow rb = <span class="keyword">new</span> Rainbow();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> e <span class="keyword">in</span> rb)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Rainbow</span> : <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] colors = &#123;<span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Yellow&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;Dian&quot;</span>, <span class="string">&quot;Purple&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;我有 <span class="subst">&#123;colors.Length&#125;</span> 种颜色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyEnumerator(colors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyEnumerator</span> : <span class="title">IEnumerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>[] colors;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEnumerator</span>(<span class="params"><span class="built_in">string</span>[] cs</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            colors = <span class="keyword">new</span> <span class="built_in">string</span>[cs.Length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; cs.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                colors[i] = cs[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; colors.Length - <span class="number">1</span> || index &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> colors[index - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型版本:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Rainbow</span> : <span class="title">IEnumerable</span>&lt;<span class="title">string</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] colors = &#123;<span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Yellow&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;Dian&quot;</span>, <span class="string">&quot;Purple&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;我有 <span class="subst">&#123;colors.Length&#125;</span> 种颜色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator&lt;<span class="built_in">string</span>&gt; <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;222&quot;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;333&quot;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;444&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IEnumerator IEnumerable.GetEnumerator()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetEnumerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-2-Iterator"><a href="#16-2-Iterator" class="headerlink" title="16.2. Iterator"></a>16.2. Iterator</h3><p>语法糖。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; colors.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> colors[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>灵活的遍历逻辑:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        List&lt;<span class="built_in">double</span>&gt; l1 = <span class="keyword">new</span> List&lt;<span class="built_in">double</span>&gt; &#123;<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">4.6</span>&#125;;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; d = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        Rainbow rb = <span class="keyword">new</span> Rainbow();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> e <span class="keyword">in</span> rb.GetMyEnumerator4)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Rainbow</span> : <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] colors = &#123;<span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Yellow&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;Dian&quot;</span>, <span class="string">&quot;Purple&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;我有 <span class="subst">&#123;colors.Length&#125;</span> 种颜色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetMyEnumerator1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">GetMyEnumerator1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; colors.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> colors[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IEnumerator GetMyEnumerator2</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;赤&quot;</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;橙&quot;</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;黄&quot;</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;绿&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable <span class="title">GetMyEnumerator3</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IEnumerable GetMyEnumerator4</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-3-Linq"><a href="#16-3-Linq" class="headerlink" title="16.3. Linq"></a>16.3. Linq</h3><p>Linq (Language Integrated Query，语言集成扩展)：</p><ul><li>基于 IEnumerable <code>&lt;T&gt;</code> 类型进行的 <strong>扩展</strong></li><li>实现在 System.Linq.Enumerable 类中，通过扩展方法的形式实现的</li><li>支持两种语法: Method Syntax 和 Query Syntax</li></ul><h4 id="16-3-1-Method-Syntax"><a href="#16-3-1-Method-Syntax" class="headerlink" title="16.3.1. Method Syntax"></a>16.3.1. Method Syntax</h4><ul><li>筛选操作符: Where&#x2F;OfType</li><li>投射操作符: Select&#x2F;SelectMany</li><li>顺序操作符: OrderBy&#x2F;ThenBy&#x2F;OrderByDescending&#x2F;ThenByDescending&#x2F;Reverse</li><li>连接操作符: Join&#x2F;GroupJoin</li><li>组合操作符: GroupBy&#x2F;ToLookup</li><li>限定操作符: Any&#x2F;All&#x2F;Contains</li><li>范围操作符: Take&#x2F;Skip&#x2F;TakeWhile&#x2F;SkipWhile</li><li>集合操作符: Distinct&#x2F;Union&#x2F;Intersect&#x2F;Except&#x2F;Zip</li><li>返回单元素: First&#x2F;FirstOrDefault&#x2F;Last&#x2F;LastOrDefault&#x2F;ElementAt&#x2F;ElementAtOrDefault&#x2F;Single&#x2F;SingleOrDefault</li><li>聚合操作符: Count&#x2F;Sum&#x2F;Min&#x2F;Max&#x2F;Average&#x2F;Aggregate</li><li>转换操作符: ToArray&#x2F;AsEnumerable&#x2F;ToList&#x2F;ToDictionary&#x2F;Cast</li><li>生成操作符: Empty&#x2F;Range&#x2F;Repeat</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">666</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="built_in">int</span>[] a11 = &#123;<span class="number">666</span>, <span class="number">777</span>, <span class="number">888</span>&#125;;</span><br><span class="line">        <span class="built_in">object</span>[] a2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;666&quot;</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="string">&quot;7&quot;</span>, <span class="number">5.5</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span>[] a3 = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;where&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;You&quot;</span>&#125;;</span><br><span class="line">        List&lt;<span class="built_in">double</span>&gt; l1 = <span class="keyword">new</span> List&lt;<span class="built_in">double</span>&gt; &#123;<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">4.6</span>&#125;;</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; d = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;BookType&gt; types = <span class="keyword">new</span> List&lt;BookType&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> BookType(<span class="number">1</span>, <span class="string">&quot;科技类&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BookType(<span class="number">2</span>, <span class="string">&quot;科幻类&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BookType(<span class="number">3</span>, <span class="string">&quot;科学类&quot;</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> List&lt;Book&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">&quot;C# 编程语言&quot;</span>, <span class="number">222</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">&quot;VueJS&quot;</span>, <span class="number">22</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">&quot;三体&quot;</span>, <span class="number">23</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">4</span>, <span class="string">&quot;星际穿越&quot;</span>, <span class="number">54</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">5</span>, <span class="string">&quot;仙剑&quot;</span>, <span class="number">64</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">6</span>, <span class="string">&quot;动物世界&quot;</span>, <span class="number">222</span>, <span class="number">3</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">9</span>, <span class="string">&quot;钢铁是怎么炼成的&quot;</span>, <span class="number">11</span>, <span class="number">3</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤、筛选</span></span><br><span class="line">        IEnumerable&lt;<span class="built_in">int</span>&gt; r1 = a1.Where(x =&gt; x &gt; <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">var</span> r2 = a2.OfType&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> r3 = a2.Where(x =&gt; x <span class="keyword">is</span> <span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 投射</span></span><br><span class="line">        <span class="keyword">var</span> r4 = a1.Select(x =&gt; x &gt; <span class="number">10</span> ? x : x + <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">var</span> r5 = a1.Select(x =&gt; <span class="string">$&quot;这个数是: <span class="subst">&#123;x + <span class="number">1</span>&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> r6 = a1.Select(x =&gt; (x, <span class="string">$&quot;<span class="subst">&#123;x + <span class="number">1</span>&#125;</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">var</span> r7 = a1.Reverse();</span><br><span class="line">        <span class="keyword">var</span> r8 = a1.OrderBy(x =&gt; -x);</span><br><span class="line">        <span class="keyword">var</span> r9 = a1.OrderByDescending(x =&gt; x);</span><br><span class="line">        <span class="keyword">var</span> r10 = a3.OrderBy(x =&gt; x.Length);</span><br><span class="line">        <span class="keyword">var</span> r11 = a3.OrderBy(x =&gt; x.Length).ThenByDescending(x =&gt; x[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> r12 = books.OrderBy(x =&gt; x.Price);</span><br><span class="line">        <span class="keyword">var</span> r13 = books.Where(x =&gt; x.TypeId != <span class="number">2</span>).OrderBy(x =&gt; x.Price);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接</span></span><br><span class="line">        <span class="keyword">var</span> r14 = books.Join(</span><br><span class="line">            types,</span><br><span class="line">            book =&gt; book.TypeId,</span><br><span class="line">            type =&gt; type.ID,</span><br><span class="line">            (book, type) =&gt; (typeName: type.Name, book)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">var</span> r15 = books</span><br><span class="line">            .Join(</span><br><span class="line">                types,</span><br><span class="line">                book =&gt; book.TypeId,</span><br><span class="line">                type =&gt; type.ID,</span><br><span class="line">                (book, type) =&gt; (typeName: type.Name, book)</span><br><span class="line">            )</span><br><span class="line">            .Where(o =&gt; o.typeName == <span class="string">&quot;科幻类&quot;</span>)</span><br><span class="line">            .Select(o =&gt; o.book);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 范围</span></span><br><span class="line">        <span class="keyword">var</span> r16 = a1.Take(<span class="number">3</span>); <span class="comment">// limit 3</span></span><br><span class="line">        <span class="keyword">var</span> r17 = a1.TakeLast(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">var</span> r18 = a1.TakeWhile(x =&gt; x &lt; <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">var</span> r19 = a1.Skip(<span class="number">2</span>).Take(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">var</span> r20 = a1.SkipLast(<span class="number">3</span>).Where(x =&gt; x &gt; <span class="number">1</span>).OrderBy(x =&gt; x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 集合</span></span><br><span class="line">        <span class="keyword">var</span> r21 = a1.Except(a11);</span><br><span class="line">        <span class="keyword">var</span> r22 = a1.Union(a11);</span><br><span class="line">        <span class="keyword">var</span> r23 = a1.Distinct(); <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">var</span> r24 = a1.Zip(a1.Select(x =&gt; x + <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回单个</span></span><br><span class="line">        <span class="keyword">var</span> r25 = a1.Zip(a1.Select(x =&gt; x + <span class="number">100</span>)).First();</span><br><span class="line">        <span class="keyword">var</span> r26 = a1.Zip(a1.Select(x =&gt; x + <span class="number">100</span>)).Last();</span><br><span class="line">        <span class="keyword">var</span> r27 = a1.Zip(a1.Select(x =&gt; x + <span class="number">100</span>)).ElementAt(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">var</span> r28 = a1.Zip(a1.Select(x =&gt; x + <span class="number">100</span>)).Take(<span class="number">1</span>).Single();</span><br><span class="line">        <span class="keyword">var</span> r29 = a1.Where(x =&gt; x &gt; <span class="number">10000</span>).FirstOrDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 聚合</span></span><br><span class="line">        <span class="keyword">var</span> r30 = a1.Sum();</span><br><span class="line">        <span class="keyword">var</span> r31 = a1.Average();</span><br><span class="line">        <span class="keyword">var</span> r32 = a1.Max();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换 (IEnumerable)</span></span><br><span class="line">        <span class="built_in">int</span>[] r33 = a1.Take(<span class="number">3</span>).ToArray();</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; r34 = a1.Take(<span class="number">3</span>).ToList();</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; r35 = a1.Take(<span class="number">3</span>).ToDictionary(x =&gt; <span class="string">$&quot;id-<span class="subst">&#123;x&#125;</span>&quot;</span>, x =&gt; x);</span><br><span class="line">        <span class="built_in">string</span> r36  = <span class="built_in">string</span>.Concat(<span class="string">&quot;hello, world&quot;</span>.Select(x =&gt; (<span class="built_in">char</span>) (x + <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态、生成</span></span><br><span class="line">        <span class="keyword">var</span> r37 = Enumerable.Empty&lt;<span class="built_in">int</span>&gt;(); <span class="comment">// 生成一个空的 int 的可枚举类</span></span><br><span class="line">        IEnumerable&lt;<span class="built_in">int</span>&gt; r38 = Enumerable.Range(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">var</span> r39 = Enumerable.Repeat(<span class="string">&quot;xxx&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">var</span> r40 = <span class="built_in">string</span>.Concat(Enumerable.Repeat(<span class="string">&quot;-&quot;</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(r40);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//foreach (var e in r39)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.WriteLine(e);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-3-2-Query-Syntax-x2F-Expression"><a href="#16-3-2-Query-Syntax-x2F-Expression" class="headerlink" title="16.3.2. Query Syntax&#x2F;Expression"></a>16.3.2. Query Syntax&#x2F;Expression</h4><ul><li>Query 表达式，最终会被通过 Provider 提供的机制翻译成相关的方法调用。最终效果是一样的。不过 Provider 可能会进行一定程度的优化</li><li>在一个 Query 表达式中，from 和 select&#x2F;group 是必须的，其他可选</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">        <span class="built_in">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">666</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="built_in">int</span>[] a11 = &#123;<span class="number">666</span>, <span class="number">777</span>, <span class="number">888</span>&#125;;</span><br><span class="line">        <span class="built_in">object</span>[] a2 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;666&quot;</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="string">&quot;7&quot;</span>, <span class="number">5.5</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span>[] a3 = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;where&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;You&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;BookType&gt; types = <span class="keyword">new</span> List&lt;BookType&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> BookType(<span class="number">1</span>, <span class="string">&quot;科技类&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BookType(<span class="number">2</span>, <span class="string">&quot;科幻类&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> BookType(<span class="number">3</span>, <span class="string">&quot;科学类&quot;</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;Book&gt; books = <span class="keyword">new</span> List&lt;Book&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">&quot;C# 编程语言&quot;</span>, <span class="number">222</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">&quot;VueJS&quot;</span>, <span class="number">22</span>, <span class="number">1</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">3</span>, <span class="string">&quot;三体&quot;</span>, <span class="number">23</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">4</span>, <span class="string">&quot;星际穿越&quot;</span>, <span class="number">54</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">5</span>, <span class="string">&quot;仙剑&quot;</span>, <span class="number">64</span>, <span class="number">2</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">6</span>, <span class="string">&quot;动物世界&quot;</span>, <span class="number">222</span>, <span class="number">3</span>),</span><br><span class="line">            <span class="keyword">new</span> Book(<span class="number">9</span>, <span class="string">&quot;钢铁是怎么炼成的&quot;</span>, <span class="number">11</span>, <span class="number">3</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        IEnumerable&lt;<span class="built_in">int</span>&gt; r0 = <span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">select</span> x;</span><br><span class="line">        <span class="keyword">var</span> r1 = a1.Where(x =&gt; x &gt; <span class="number">5</span>).Select(x =&gt; x);</span><br><span class="line">        <span class="keyword">var</span> r2 = <span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">where</span> x &gt; <span class="number">5</span> <span class="keyword">select</span> x;</span><br><span class="line">        <span class="keyword">var</span> r3 = <span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">where</span> x &gt; <span class="number">5</span> <span class="keyword">select</span> x + <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> r4 = <span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">where</span> x &gt; <span class="number">5</span> <span class="keyword">select</span> <span class="string">$&quot;I am <span class="subst">&#123;x * x&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r5 = <span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">where</span> x &gt; <span class="number">5</span> <span class="keyword">orderby</span> x <span class="keyword">select</span> x;</span><br><span class="line">        <span class="keyword">var</span> r6 = <span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">where</span> x &gt; <span class="number">5</span> <span class="keyword">orderby</span> x <span class="keyword">descending</span> <span class="keyword">select</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r7 =</span><br><span class="line">            <span class="keyword">from</span> book <span class="keyword">in</span> books</span><br><span class="line">            <span class="keyword">join</span> type <span class="keyword">in</span> types</span><br><span class="line">            <span class="keyword">on</span> book.TypeId <span class="keyword">equals</span> type.<span class="function">ID</span></span><br><span class="line"><span class="function">            <span class="title">select</span> (<span class="params">type.Name, book, type</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r8 = <span class="keyword">from</span> book <span class="keyword">in</span> books</span><br><span class="line">            <span class="keyword">join</span> type <span class="keyword">in</span> types <span class="keyword">on</span> book.TypeId <span class="keyword">equals</span> type.ID</span><br><span class="line">            <span class="keyword">where</span> type.Name == <span class="string">&quot;科幻类&quot;</span></span><br><span class="line">            <span class="keyword">select</span> book;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">double</span> avg1 = r8.Average(book =&gt; book.Price);</span><br><span class="line">        <span class="built_in">double</span> avg2 = r8.Select(book =&gt; book.Price).Average();</span><br><span class="line">        <span class="built_in">double</span> avg3 =</span><br><span class="line">            (</span><br><span class="line">                <span class="keyword">from</span> book <span class="keyword">in</span> books</span><br><span class="line">                <span class="keyword">join</span> type <span class="keyword">in</span> types <span class="keyword">on</span> book.TypeId <span class="keyword">equals</span> type.ID</span><br><span class="line">                <span class="keyword">where</span> type.Name == <span class="string">&quot;科幻类&quot;</span></span><br><span class="line">                <span class="keyword">select</span> book</span><br><span class="line">            )</span><br><span class="line">            .Average(book =&gt; book.Price);</span><br><span class="line">        <span class="built_in">double</span> avg4 = (</span><br><span class="line">            <span class="keyword">from</span> book <span class="keyword">in</span> books</span><br><span class="line">            <span class="keyword">join</span> type <span class="keyword">in</span> types <span class="keyword">on</span> book.TypeId <span class="keyword">equals</span> type.ID</span><br><span class="line">            <span class="keyword">where</span> type.Name == <span class="string">&quot;科幻类&quot;</span></span><br><span class="line">            <span class="keyword">select</span> book.Price</span><br><span class="line">        ).Average();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r9 =</span><br><span class="line">            <span class="keyword">from</span> x <span class="keyword">in</span> a1</span><br><span class="line">            <span class="keyword">let</span> y = x * x</span><br><span class="line">            <span class="keyword">where</span> y &gt; <span class="number">5</span></span><br><span class="line">            <span class="keyword">orderby</span> y</span><br><span class="line">            <span class="keyword">select</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r10 =</span><br><span class="line">            <span class="keyword">from</span> book <span class="keyword">in</span> books</span><br><span class="line">            <span class="keyword">group</span> book <span class="keyword">by</span> book.TypeId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r11 = <span class="keyword">from</span> a <span class="keyword">in</span> books</span><br><span class="line">            <span class="keyword">join</span> b <span class="keyword">in</span> types <span class="keyword">on</span> a.TypeId <span class="keyword">equals</span> b.ID <span class="keyword">into</span> xxx <span class="comment">// into</span></span><br><span class="line">            <span class="keyword">from</span> c <span class="keyword">in</span> xxx</span><br><span class="line">            <span class="keyword">select</span> c;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> c1 = (<span class="keyword">from</span> x <span class="keyword">in</span> a1 <span class="keyword">where</span> x &gt; <span class="number">5</span> <span class="keyword">select</span> x).Take(<span class="number">3</span>).Count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> e <span class="keyword">in</span> r10)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-4-Linq-to-XML"><a href="#16-4-Linq-to-XML" class="headerlink" title="16.4. Linq to XML"></a>16.4. Linq to XML</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;</span><br><span class="line">  &lt;book&gt;</span><br><span class="line">    &lt;name&gt;jQuery&lt;/name&gt;</span><br><span class="line">    &lt;price&gt;<span class="number">23</span>&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book&gt;</span><br><span class="line">    &lt;name&gt;VueJS&lt;/name&gt;</span><br><span class="line">    &lt;price&gt;<span class="number">123.5</span>&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book&gt;</span><br><span class="line">    &lt;name&gt;CSharp&lt;/name&gt;</span><br><span class="line">    &lt;price&gt;<span class="number">26.5</span>&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">  &lt;book&gt;</span><br><span class="line">    &lt;name&gt;Java&lt;/name&gt;</span><br><span class="line">    &lt;price&gt;<span class="number">53.5</span>&lt;/price&gt;</span><br><span class="line">  &lt;/book&gt;</span><br><span class="line">&lt;/books&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> xml = XElement.Load(<span class="string">@&quot;e:\ccc.xml&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> price1 = ((XElement)((XElement) xml.LastNode).LastNode).Value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> count1 = xml.Elements(<span class="string">&quot;book&quot;</span>).Count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r1 = xml.Elements(<span class="string">&quot;book&quot;</span>)</span><br><span class="line">            .OrderByDescending(GetBookPrice)</span><br><span class="line">            .Take(<span class="number">2</span>)</span><br><span class="line">            .Select(GetBookPrice)</span><br><span class="line">            .Average();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r2 = xml.Elements(<span class="string">&quot;book&quot;</span>).Select(GetBookPrice);</span><br><span class="line">        <span class="keyword">var</span> r3 = r2.OrderByDescending(x =&gt; x).Take(<span class="number">2</span>).Average();</span><br><span class="line">        <span class="keyword">var</span> r4 = r2.Average();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Console.WriteLine(r3 - r4);</span></span><br><span class="line">        <span class="comment">//Console.WriteLine(r2.OrderByDescending(x =&gt; x).Take(2).Average() - r2.Average());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Query Expression</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r5 = <span class="keyword">from</span> book <span class="keyword">in</span> xml.Elements(<span class="string">&quot;book&quot;</span>)</span><br><span class="line">                 <span class="function"><span class="keyword">where</span> <span class="title">GetBookName</span>(<span class="params">book</span>) !</span>= <span class="string">&quot;jQuery&quot;</span></span><br><span class="line">                 <span class="function"><span class="keyword">orderby</span> <span class="title">GetBookPrice</span>(<span class="params">book</span>)</span></span><br><span class="line"><span class="function">                 <span class="title">select</span> (<span class="params">GetBookName(book</span>), <span class="title">GetBookPrice</span>(<span class="params">book</span>))</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r6 = (<span class="keyword">from</span> book <span class="keyword">in</span> xml.Elements(<span class="string">&quot;book&quot;</span>)</span><br><span class="line">                  <span class="function"><span class="keyword">where</span> <span class="title">GetBookName</span>(<span class="params">book</span>) !</span>= <span class="string">&quot;jQuery&quot;</span></span><br><span class="line">                  <span class="function"><span class="keyword">orderby</span> <span class="title">GetBookPrice</span>(<span class="params">book</span>)</span></span><br><span class="line"><span class="function">                  <span class="keyword">select</span> <span class="title">GetBookPrice</span>(<span class="params">book</span>)).<span class="title">Average</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r7 = <span class="keyword">from</span> book <span class="keyword">in</span> xml.Elements(<span class="string">&quot;book&quot;</span>) <span class="function"><span class="keyword">where</span> <span class="title">GetBookName</span>(<span class="params">book</span>) !</span>= <span class="string">&quot;jQuery&quot;</span> <span class="function"><span class="keyword">select</span> <span class="title">GetBookPrice</span>(<span class="params">book</span>)</span>;</span><br><span class="line">        <span class="keyword">var</span> r8 = r7.OrderByDescending(x =&gt; x).Take(<span class="number">2</span>).Average();</span><br><span class="line">        <span class="keyword">var</span> r9 = r7.Average();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> r <span class="keyword">in</span> r5)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> book <span class="keyword">in</span> XElement.Load(<span class="string">@&quot;e:\ccc.xml&quot;</span>).Elements(<span class="string">&quot;book&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(book.Elements(<span class="string">&quot;name&quot;</span>).First().Value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">from</span> book <span class="keyword">in</span> XElement.Load(<span class="string">@&quot;e:\ccc.xml&quot;</span>).Elements(<span class="string">&quot;book&quot;</span>)</span><br><span class="line">            <span class="keyword">let</span> name = GetBookName(book)</span><br><span class="line">            <span class="keyword">let</span> price = GetBookPrice(book)</span><br><span class="line">            <span class="keyword">where</span> price &gt; <span class="number">100</span> <span class="function"><span class="keyword">orderby</span> price</span></span><br><span class="line"><span class="function">            <span class="title">select</span> (<span class="params">name, price</span>)</span></span><br><span class="line"><span class="function">        ).<span class="title">ToList</span>().<span class="title">ForEach</span>(<span class="params">x =&gt; Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;x.name&#125;</span> 的价格为 <span class="subst">&#123;x.price&#125;</span>&quot;</span></span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">double</span> <span class="title">GetBookPrice</span>(<span class="params">XElement bookElement</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">double</span>.Parse(bookElement.Descendants(<span class="string">&quot;price&quot;</span>).First().Value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetBookName</span>(<span class="params">XElement bookElement</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bookElement.Descendants(<span class="string">&quot;name&quot;</span>).First().Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17-泛型-Generic"><a href="#17-泛型-Generic" class="headerlink" title="17. 泛型 (Generic)"></a>17. 泛型 (Generic)</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> ps = <span class="keyword">new</span> MyStack();</span><br><span class="line">        ps.Push(<span class="keyword">new</span> Person());</span><br><span class="line">        ps.Push(<span class="number">2222</span>);</span><br><span class="line">        ps.Push(<span class="keyword">new</span> Person());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不简洁，需要手动转型</span></span><br><span class="line">        <span class="comment">// 不安全</span></span><br><span class="line">        <span class="comment">// 低效率</span></span><br><span class="line"></span><br><span class="line">        Person p = (Person)ps.Pop();</span><br><span class="line">        Console.WriteLine(p);</span><br><span class="line">        ((Person)ps.Pop()).Say();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自然而然的解决方案: 为每种类型创建一个单独的 Stack</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ps2 = <span class="keyword">new</span> PersonStack();</span><br><span class="line">        ps2.Push(<span class="keyword">new</span> Person());</span><br><span class="line">        ps2.Push(<span class="keyword">new</span> Person());</span><br><span class="line"></span><br><span class="line">        Person p1= ps2.Pop();</span><br><span class="line">        p1.Say();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ps3 = <span class="keyword">new</span> StudentStack();</span><br><span class="line">        ps3.Push(<span class="keyword">new</span> Student());</span><br><span class="line">        ps3.Push(<span class="keyword">new</span> Student());</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(ps3.Pop());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上述的方案可以解决所有问题，但带来了新的问题: 每次重复定义这些类型很麻烦</span></span><br><span class="line">        <span class="comment">// 那能不能通过某种方法，自动生成这些类型呢</span></span><br><span class="line">        <span class="comment">// CSharp 给出的解决方案是: 泛型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ps4 = <span class="keyword">new</span> MyStack&lt;Person&gt;();</span><br><span class="line">        <span class="keyword">var</span> ps5 = <span class="keyword">new</span> MyStack&lt;Student&gt;();</span><br><span class="line">        MyStack&lt;<span class="built_in">int</span>&gt; ps6 = <span class="keyword">new</span> MyStack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> ps7 = <span class="keyword">new</span> MyStack&lt;<span class="built_in">double</span>&gt;();</span><br><span class="line">        <span class="keyword">var</span> ps9 = <span class="keyword">new</span> MyStack&lt;FileInfo&gt;();</span><br><span class="line">        <span class="keyword">var</span> ps8 = <span class="keyword">new</span> MyStack&lt;Stack&gt;();</span><br><span class="line">        <span class="keyword">var</span> ps0 = <span class="keyword">new</span> MyStack&lt;<span class="built_in">bool</span>&gt;();</span><br><span class="line"></span><br><span class="line">        ps4.Push(<span class="keyword">new</span> Person());</span><br><span class="line">        ps4.Push(<span class="keyword">new</span> Person());</span><br><span class="line">        Person p9 = ps4.Pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">X</span>&gt; <span class="comment">// 模板</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> stackTop = <span class="number">0</span>; <span class="comment">// 栈顶</span></span><br><span class="line">    <span class="keyword">private</span> X[] _items = <span class="keyword">new</span> X[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">X w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[stackTop] = w;</span><br><span class="line">        stackTop = stackTop + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> X <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stackTop = stackTop - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> _items[stackTop];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> X <span class="title">Peek</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _items[stackTop - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; stackTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stackTop = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">PersonStack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> stackTop = <span class="number">0</span>; <span class="comment">// 栈顶</span></span><br><span class="line">    <span class="keyword">private</span> Person[] _items = <span class="keyword">new</span> Person[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">Person w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[stackTop] = w;</span><br><span class="line">        stackTop = stackTop + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stackTop = stackTop - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> _items[stackTop];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">Peek</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _items[stackTop - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; stackTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stackTop = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">StudentStack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> stackTop = <span class="number">0</span>; <span class="comment">// 栈顶</span></span><br><span class="line">    <span class="keyword">private</span> Student[] _items = <span class="keyword">new</span> Student[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">Student w</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[stackTop] = w;</span><br><span class="line">        stackTop = stackTop + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">Pop</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stackTop = stackTop - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> _items[stackTop];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">Peek</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _items[stackTop - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; stackTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        stackTop = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-1-方法泛型"><a href="#17-1-方法泛型" class="headerlink" title="17.1. 方法泛型"></a>17.1. 方法泛型</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Count</span>&lt;<span class="title">TSource</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;TSource&gt; source</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-事件-Event"><a href="#18-事件-Event" class="headerlink" title="18. 事件 (Event)"></a>18. 事件 (Event)</h2><ul><li>不是现在发生的事，而是未来发生的</li><li>满足某个条件之后，才会发生的</li><li>满足一定条件时，要执行的代码逻辑</li><li>比如，你们要毕业，你们要做些什么</li><li>比如，如果发生火灾，你要做些什么</li><li>比如，在页面上，用户做了某些动作，会导致执行什么逻辑</li><li>这种被动式被执行的逻辑，称作事件</li></ul><p>每个同学毕业的时候，都有自己的计划。这就是 [毕业事件]:</p><ul><li>达成的条件是，毕业的日期到了</li><li>条件达成后，每个同学有不同的计划</li></ul><h3 id="18-1-如果使用一般的写法"><a href="#18-1-如果使用一般的写法" class="headerlink" title="18.1. 如果使用一般的写法"></a>18.1. 如果使用一般的写法</h3><p>每个同学，需要不停判断，毕业的时间有没有达成。如果达成了，就做某件事。反复判断。</p><p>自己判断，自己触发:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A 同学</span></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DateTime.Now.Second % <span class="number">10</span> == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;继承家产&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 同学</span></span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DateTime.Now.Second % <span class="number">10</span> == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;回家啃老&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C、D、E... 同学都是相似的逻辑</span></span><br><span class="line"></span><br><span class="line">t1.Start();</span><br><span class="line">t2.Start();</span><br><span class="line"></span><br><span class="line">t1.Join();</span><br><span class="line">t2.Join();</span><br></pre></td></tr></table></figure><h3 id="18-2-上述的写法虽然没有错误，但是存在一些问题"><a href="#18-2-上述的写法虽然没有错误，但是存在一些问题" class="headerlink" title="18.2. 上述的写法虽然没有错误，但是存在一些问题"></a>18.2. 上述的写法虽然没有错误，但是存在一些问题</h3><ul><li>逻辑重复严重，冗余很大</li><li>不停判断条件是否达成的代码过于繁琐，每个同学自己维护这段代码，有些不合理</li></ul><p>因此，我们需要 1) 将重复的代码剥离出来 2) 条件的判断只需要交付一个专门的人处理就可以了</p><p>专人判断，集中逻辑:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DateTime.Now.Second % <span class="number">10</span> == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;回家继承家产&quot;</span>); <span class="comment">// A</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;搬砖&quot;</span>);        <span class="comment">// B</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;创业&quot;</span>);        <span class="comment">// C</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;回家啃老&quot;</span>);    <span class="comment">// D</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;结婚&quot;</span>);        <span class="comment">// E...</span></span><br><span class="line">        &#125;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.Start();</span><br><span class="line">t1.Join();</span><br></pre></td></tr></table></figure><h3 id="18-3-上述代码虽然简洁了，但是条件和最后要执行的逻辑写在一起，耦合度太大"><a href="#18-3-上述代码虽然简洁了，但是条件和最后要执行的逻辑写在一起，耦合度太大" class="headerlink" title="18.3. 上述代码虽然简洁了，但是条件和最后要执行的逻辑写在一起，耦合度太大"></a>18.3. 上述代码虽然简洁了，但是条件和最后要执行的逻辑写在一起，耦合度太大</h3><p>因此，我们需要一种方式，将它们分开。这时候我们想到，委托是实现逻辑分离最佳的工具。</p><p>专人判断，分离目标:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BiYe = <span class="keyword">new</span> Action(() =&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 专门负责判断条件是否达成 (发布事件的 Publisher)</span></span><br><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DateTime.Now.Second % <span class="number">10</span> == <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            BiYe();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只需要向相应委托内添加自己的计划辑 (订阅上述事件 Subcriber)</span></span><br><span class="line">BiYe += () =&gt; Console.WriteLine(<span class="string">&quot;搬砖&quot;</span>);</span><br><span class="line">BiYe += () =&gt; Console.WriteLine(<span class="string">&quot;结婚&quot;</span>);</span><br><span class="line">BiYe += () =&gt; Console.WriteLine(<span class="string">&quot;啃老&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.Start();</span><br><span class="line">t1.Join();</span><br></pre></td></tr></table></figure><h3 id="18-4-接下来，可以将第一段代码单独抽出来，作为单独的-Publisher，从而实现更好的分离"><a href="#18-4-接下来，可以将第一段代码单独抽出来，作为单独的-Publisher，从而实现更好的分离" class="headerlink" title="18.4. 接下来，可以将第一段代码单独抽出来，作为单独的 Publisher，从而实现更好的分离"></a>18.4. 接下来，可以将第一段代码单独抽出来，作为单独的 Publisher，从而实现更好的分离</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件的发布者，暴露了一个叫 BiYe 的事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Action BiYe;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (DateTime.Now.Second % <span class="number">10</span> == <span class="number">5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    BiYe();</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用者，只需要订阅，完全不需要关心发布者是怎么实现的内在逻辑</span></span><br><span class="line"><span class="comment">// 完美的解耦合 (分离)</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Teacher();</span><br><span class="line">t.BiYe += (s, e) =&gt; Console.WriteLine(<span class="string">&quot;回家吃饭&quot;</span>);</span><br><span class="line">t.BiYe += (s, e) =&gt; Console.WriteLine(<span class="string">&quot;回家抱娃&quot;</span>);</span><br><span class="line">t.Start();</span><br></pre></td></tr></table></figure><h3 id="18-5-通过上述实现，我们可以看到事件是通过委托实现的，但还是有些缺点"><a href="#18-5-通过上述实现，我们可以看到事件是通过委托实现的，但还是有些缺点" class="headerlink" title="18.5. 通过上述实现，我们可以看到事件是通过委托实现的，但还是有些缺点"></a>18.5. 通过上述实现，我们可以看到事件是通过委托实现的，但还是有些缺点</h3><ul><li>Action 等名字不够直观，没法做到望文生义</li><li>按道理，订阅者没有权力在外部去操作 BiYe 的执行。但现在的权限控制完全做不到这样的限制</li></ul><p>因此，C# 提供了标准的 event 关键词和 EventHandler 委托，解决上述痛点:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler BiYe;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (DateTime.Now.Second % <span class="number">10</span> == <span class="number">5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    BiYe.Invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的事件声明，可以扩展为属性:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> EventHandler _biye;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> EventHandler BiYe;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">add</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;可以添加更多自己的逻辑&quot;</span>);</span><br><span class="line">        _biye += <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">remove</span></span><br><span class="line">    &#123;</span><br><span class="line">        _biye -= <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-6-接下来，要考虑的是，能不能在事件触发的时候，传递一些参数"><a href="#18-6-接下来，要考虑的是，能不能在事件触发的时候，传递一些参数" class="headerlink" title="18.6. 接下来，要考虑的是，能不能在事件触发的时候，传递一些参数"></a>18.6. 接下来，要考虑的是，能不能在事件触发的时候，传递一些参数</h3><p>EventHandler 两个参数:</p><ul><li>object sender，用来表示谁是订阅者</li><li>EventArgs args，用来传递一些参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Teacher</span><br><span class="line">&#123;</span><br><span class="line">    public event EventHandler BiYe;</span><br><span class="line"></span><br><span class="line">    public void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        var t1 = new Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                if (DateTime.Now.Second % 10 == 5)</span><br><span class="line">                &#123;</span><br><span class="line">                    // BiYe(this, new MyEventArgs(5));</span><br><span class="line">                    BiYe.Invoke(this, new MyEventArgs(5));</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.Sleep(100);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyEventArgs : EventArgs</span><br><span class="line">&#123;</span><br><span class="line">    public MyEventArgs(int canshu)</span><br><span class="line">    &#123;</span><br><span class="line">        Canshu = canshu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int Canshu &#123; get; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-异常-Exception"><a href="#19-异常-Exception" class="headerlink" title="19. 异常 (Exception)"></a>19. 异常 (Exception)</h2><h3 id="19-1-传统方式"><a href="#19-1-传统方式" class="headerlink" title="19.1. 传统方式"></a>19.1. 传统方式</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不够直观，啥是 int，分别有啥含义</span></span><br><span class="line"><span class="comment">// 代码变啰嗦了，不简洁了</span></span><br><span class="line"><span class="comment">// 编码难度变大了，错误的处理，干扰主干逻辑</span></span><br><span class="line"><span class="comment">// 调用这需要知道定义者，每个错误逻辑的含义</span></span><br><span class="line"><span class="comment">// 错误的处理，不是强制性的，所以容易隐藏 BUG，很难排查</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Kuaijiang</span> (<span class="params"><span class="built_in">string</span> gender</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (gender == <span class="string">&quot;男&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你真帅!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gender == <span class="string">&quot;女&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;能加你微信吗?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-2-通过-Exception-提供-解耦合-的处理方式"><a href="#19-2-通过-Exception-提供-解耦合-的处理方式" class="headerlink" title="19.2. 通过 Exception 提供 解耦合 的处理方式"></a>19.2. 通过 Exception 提供 <strong>解耦合</strong> 的处理方式</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Kuaijiang(<span class="string">&quot;女孩儿&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(GenderTooLongException ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;怎么搞的，这都能错？&quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;调用失败: &quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;做其他事情&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Kuaijiang</span> (<span class="params"><span class="built_in">string</span> gender</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gender.Length &gt; <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenderTooLongException(<span class="string">&quot;性别怎么可能大约2?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (gender != <span class="string">&quot;男&quot;</span> &amp;&amp; gender != <span class="string">&quot;女&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Exception ex = <span class="keyword">new</span> Exception(<span class="string">&quot;性别错误&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gender == <span class="string">&quot;男&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;你真帅!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (gender == <span class="string">&quot;女&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;能加你微信吗?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">GenderTooLongException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenderTooLongException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-3-异常的嵌套，以及-finally"><a href="#19-3-异常的嵌套，以及-finally" class="headerlink" title="19.3. 异常的嵌套，以及 finally"></a>19.3. 异常的嵌套，以及 finally</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SampleOfException1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; validGenders = <span class="keyword">new</span>() &#123; <span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                夸奖(<span class="string">&quot;女孩儿&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(GenderTooLongException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;怎么搞的，这都能错？&quot;</span> + ex.Message);</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;22222&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;4444&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;调用失败: &quot;</span> + ex.Message);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;555&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;3333&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//try</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">            <span class="comment">//    Kuaijiang(&quot;女2&quot;);</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">//catch</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> 夸奖 (<span class="built_in">string</span>  gender)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Kuaijiang(gender);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;[爸爸] 哈哈，出错了吧&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;[爸爸] 我处理完了!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Kuaijiang</span> (<span class="params"><span class="built_in">string</span> gender</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (gender.Length &gt; <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> GenderTooLongException(<span class="string">&quot;性别怎么可能大约2?&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!validGenders.Contains(gender))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;性别错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (gender == <span class="string">&quot;男&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;你真帅!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (gender == <span class="string">&quot;女&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;能加你微信吗?&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">GenderTooLongException</span> : <span class="title">Exception</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GenderTooLongException</span>(<span class="params"><span class="built_in">string</span> message</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-反射和特性-Reflection-x2F-Attribute"><a href="#20-反射和特性-Reflection-x2F-Attribute" class="headerlink" title="20. 反射和特性 (Reflection&#x2F;Attribute)"></a>20. 反射和特性 (Reflection&#x2F;Attribute)</h2><h3 id="20-1-反射-Reflection"><a href="#20-1-反射-Reflection" class="headerlink" title="20.1. 反射 (Reflection)"></a>20.1. 反射 (Reflection)</h3><ul><li><p>反射就是运行时查看程序集 (Assembly) 元数据 (metadata) 的行为</p></li><li><p>元数据，就是程序集所包含的所有的类型、属性、参数等数据</p></li><li><p>C# 通过 <code>System.Reflection</code> 这个命名空间下的类，给出了反射的实现</p></li><li><p>为了能够实现反射，运行时在运行的时候，会为每一个 Class 创建一个对应的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type</span><br></pre></td></tr></table></figure><p>类型的对象</p><ul><li>typeof</li><li>GetType</li><li>assembly.GetTypes()</li></ul></li><li><p>类 <code>Assembly</code> 中提供了加载程序集和操作元数据的相关方法</p></li><li><p>可以通过辅助类 <code>Activator</code> 快速创建一个实例</p></li></ul><p>正大光明的类型使用方式:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Student</span> &#123;&#125;</span><br><span class="line"><span class="comment">// var typeofStudent = new Type(Student);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">s1.SayHello();</span><br></pre></td></tr></table></figure><p>创建 Assembly 的若干方法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ass1 = Assembly.Load(<span class="string">&quot;DAL&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ass2 = Assembly.LoadFile(<span class="string">@&quot;e:\Model.dll&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ass3 = Assembly.LoadFrom(<span class="string">&quot;DAL&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ass4 = Assembly.LoadFrom(<span class="string">@&quot;e:\Model.dll&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ass5 = Assembly.GetExecutingAssembly();</span><br><span class="line"></span><br><span class="line">Type[] types = ass1.GetTypes();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> type <span class="keyword">in</span> types)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Class: <span class="subst">&#123;type&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    MethodInfo[] methods = type.GetMethods();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> m <span class="keyword">in</span> methods)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(m);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 Type 的若干方法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">Type type1 = i.GetType();</span><br><span class="line"></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">Type type2 = s.GetType();</span><br><span class="line"></span><br><span class="line">Type type3 = <span class="keyword">typeof</span>(Student);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ass = Assembly.GetExecutingAssembly();</span><br><span class="line">Type type4 = ass.GetTypes()[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>通过反射的方式，动态调用方法的过程:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ass = Assembly.GetExecutingAssembly();</span><br><span class="line"><span class="built_in">object</span> o = ass.CreateInstance(<span class="string">&quot;SampleOfReflection.X&quot;</span>);</span><br><span class="line">MethodInfo m = o.GetType().GetMethod(<span class="string">&quot;SayHello&quot;</span>);</span><br><span class="line">m.Invoke(o, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="20-2-例子-ToModelList"><a href="#20-2-例子-ToModelList" class="headerlink" title="20.2. [例子] ToModelList"></a>20.2. [例子] ToModelList</h3><p>版本 1:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ToModelList</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> DataTable dt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        dt.Rows.Cast&lt;DataRow&gt;()</span><br><span class="line">        .Select(r =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            T t = (T) Activator.CreateInstance(<span class="keyword">typeof</span>(T));</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="function">PropertyInfo p <span class="keyword">in</span> <span class="title">typeof</span>(<span class="params">T</span>).<span class="title">GetProperties</span>())</span></span><br><span class="line">            &#123;</span><br><span class="line">                p.SetValue(t, r[p.Name.ToLower()]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;)</span><br><span class="line">        .ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本 2:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ToModelList2</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> DataTable dt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;T&gt; lst = (List&lt;T&gt;)Activator</span><br><span class="line">        .CreateInstance(<span class="keyword">typeof</span>(List&lt;&gt;).MakeGenericType(<span class="keyword">typeof</span>(T)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (DataRow r <span class="keyword">in</span> dt.Rows)</span><br><span class="line">    &#123;</span><br><span class="line">        T t = (T)Activator.CreateInstance(<span class="keyword">typeof</span>(T));</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function">PropertyInfo p <span class="keyword">in</span> <span class="title">typeof</span>(<span class="params">T</span>).<span class="title">GetProperties</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            p.SetValue(t, r[p.Name.ToLower()]);</span><br><span class="line">        &#125;</span><br><span class="line">        lst.GetType().GetMethod(<span class="string">&quot;Add&quot;</span>).Invoke(lst, <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; t &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较原版:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Group&gt; <span class="title">ToModelList</span>(<span class="params">DataTable dt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Group&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (DataRow r <span class="keyword">in</span> dt.Rows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> g = <span class="keyword">new</span> Group</span><br><span class="line">        &#123;</span><br><span class="line">            Gno = (<span class="built_in">int</span>)r[<span class="string">&quot;gno&quot;</span>],</span><br><span class="line">            Name = (<span class="built_in">string</span>)r[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">            Cs = (<span class="built_in">int</span>)r[<span class="string">&quot;cs&quot;</span>],</span><br><span class="line">            Fs = (<span class="built_in">int</span>)r[<span class="string">&quot;fs&quot;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">        list.Add(g);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-3-特性-Attribute"><a href="#20-3-特性-Attribute" class="headerlink" title="20.3. 特性 (Attribute)"></a>20.3. 特性 (Attribute)</h3><ul><li>特性是向程序集添加用户自定义元数据的方式</li><li>基本使用过程: [定义] – 添加到 [目标 (target)] – [消费 (consumer)]</li><li>定义特性，只需要继承 Attribute 即可。类的命名以 Attribute 结尾，如 MyIgnoreAttribute</li><li>特性的消费，需要使用反射的方式 (type.GetCustomerAttribute)</li><li>特性只有被消费才具备其存在的意义。其意义是在消费的时候，使用者赋予的</li><li>特性就像人生，定一个小目标，然后去实现它</li></ul><h4 id="20-3-1-特性就是一个普通的类"><a href="#20-3-1-特性就是一个普通的类" class="headerlink" title="20.3.1. 特性就是一个普通的类"></a>20.3.1. 特性就是一个普通的类</h4><p><strong>最好</strong> 按照一定的命名规范来命名 (当然，你不按照命名规范，也拿你没办法):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">RainAttribute</span> : <span class="title">Attribute</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>特新本身是没有任何意义的，但是如果我们将其放到其他的地方。 程序在编译运行的过程中，会记录这些特性 (元数据中会保留特性的信息)。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Rain</span>]</span><br><span class="line">[<span class="meta">RainAttribute</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">Xxx</span> &#123;&#125;  <span class="comment">// - Type - 反射 - 额外的信息，这个类上有个 RainAttribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Yyy</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Rain</span>]</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">A</span>()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="20-3-2-通过反射得到它的实例，然后就可以使用了"><a href="#20-3-2-通过反射得到它的实例，然后就可以使用了" class="headerlink" title="20.3.2. 通过反射得到它的实例，然后就可以使用了"></a>20.3.2. 通过反射得到它的实例，然后就可以使用了</h4><p>在使用反射方式，处理相关逻辑的时候，就可以借题发挥、指鹿为马了:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rt = type.GetCustomerAttribute&lt;RainAttribute&gt;();</span><br><span class="line"><span class="comment">// 既然上面有这个，那么的话，说明这个类是不能被...的，能被...的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rt) 不实例化;</span><br><span class="line"><span class="keyword">if</span> (rt) 实例化的时候，记录日志;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>/ 获取方法上面的特性</span></span><br><span class="line"><span class="keyword">var</span> mType = yType.GetMethod(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> rt2 = mType.GetCustomerAttribute&lt;RainAttribute&gt;();</span><br></pre></td></tr></table></figure><h2 id="21-异步编程"><a href="#21-异步编程" class="headerlink" title="21. 异步编程"></a>21. 异步编程</h2><h3 id="21-1-Process"><a href="#21-1-Process" class="headerlink" title="21.1. Process"></a>21.1. Process</h3><ul><li>点击打开程序，会自动创建进程</li><li>通过代码的形式，创建进行</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Process np = Process.Start(<span class="string">&quot;notepad.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">np.Kill();</span><br><span class="line">np.CloseMainWindow();</span><br></pre></td></tr></table></figure><h3 id="21-2-Thread"><a href="#21-2-Thread" class="headerlink" title="21.2. Thread"></a>21.2. Thread</h3><p>C# 1.0 中加入的。</p><p>基本语法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">t.Start();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thread tc = Thread.CurrentThread;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;t.ManagedThreadId&#125;</span> / <span class="subst">&#123;t.Name&#125;</span> / <span class="subst">&#123;t.IsAlive&#125;</span> / <span class="subst">&#123;t.IsBackground&#125;</span>&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;tc.ManagedThreadId&#125;</span> / <span class="subst">&#123;tc.Name&#125;</span> / <span class="subst">&#123;tc.IsAlive&#125;</span> / <span class="subst">&#123;tc.IsBackground&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t.Start();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine();</span><br></pre></td></tr></table></figure><p>线程之间可以共享数据:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> isFinished = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!isFinished) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        isFinished = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    t1.Start();</span><br><span class="line">    t2.Start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程是不是一定能让任务变快:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">sw.Start();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> j = <span class="number">111110</span>;</span><br><span class="line">    Math.Pow(j, j);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(sw.Elapsed);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stopwatch sw = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">sw.Start();</span><br><span class="line">Thread[] ts = <span class="keyword">new</span> Thread[<span class="number">10000000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> j = <span class="number">111110</span>;</span><br><span class="line">            Math.Pow(j, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    ts[i] = t;</span><br><span class="line">    t.Start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> t <span class="keyword">in</span> ts) t.Join();</span><br><span class="line">Console.WriteLine(sw.Elapsed);</span><br></pre></td></tr></table></figure><p>创建很多线程：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Thread.Sleep(<span class="number">2222222</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    t.Start();</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="21-3-ThreadPool"><a href="#21-3-ThreadPool" class="headerlink" title="21.3. ThreadPool"></a>21.3. ThreadPool</h3><p>C# 2.0 出现线程池。(IoC&#x2F;DI)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool.QueueUserWorkItem(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="21-4-TPL-Task-Parallel-Libary"><a href="#21-4-TPL-Task-Parallel-Libary" class="headerlink" title="21.4. TPL (Task-Parallel Libary)"></a>21.4. TPL (Task-Parallel Libary)</h3><p>C# 3&#x2F;4 版本中，出现了更高一层的抽象:</p><ul><li>Thread 是一种昂贵的资源，创建和销毁和维护需要时间，而且需要空间 (1M)</li><li>因此，充分利用 Thread 的方式，就是创建一个 Pool 来反复使用</li><li>但是通过 Pool 的方式，不能够充分屏蔽线程的操作细节，但是 Pool 提供的 API 过于简陋</li><li>因此，通过进一步抽象，使用 Task 概念来暴露线程需要完成的工作。 Task 交给背后的 Pool 之后，通过一定的线程调度机制，会使用 Pool 提供的某个线程， 去执行 Task 中的逻辑。</li><li>Task 对象用来表示包含了异步逻辑，以及异步的执行结果的对象。Task 可以组合。 我们可以将大任务，分成若干小任务，小任务完成之后组合成大任务。</li></ul><h4 id="21-4-1-Task-Run"><a href="#21-4-1-Task-Run" class="headerlink" title="21.4.1. Task.Run"></a>21.4.1. Task.Run</h4><p>基本使用:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Task t = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Task.WaitAll(t1, t2);</span></span><br><span class="line"><span class="comment">//Task.WaitAny(t1, t2);</span></span><br><span class="line"><span class="comment">//t1.Wait(); // 阻塞当前线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带返回值的使用:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise Style</span></span><br><span class="line">Task&lt;<span class="built_in">string</span>&gt; t = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Task.FromResult(sb.ToString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(t.Result); <span class="comment">// 等待任务完成，阻塞当前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;<span class="built_in">string</span>&gt; t = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.ToString(); <span class="comment">// this one</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(t.Result); <span class="comment">// 等待任务完成，阻塞当前</span></span><br></pre></td></tr></table></figure><p>带 CancellationToken 的 Task.Run:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cts = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">cts.CancelAfter(<span class="number">1000</span>);</span><br><span class="line">cts.Token.Register(() =&gt; Console.WriteLine(<span class="string">&quot;jieshule&quot;</span>));</span><br><span class="line"></span><br><span class="line">Task t = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Task t = Task.Run(() =&gt;</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int i = 0; i &lt; 10000; i++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         cts.Token.ThrowIfCancellationRequested();</span></span><br><span class="line">    <span class="comment">//         Console.Write(&quot;O&quot;);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;, cts.Token);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//while (!cts.Token.IsCancellationRequested &amp;&amp; i++ &lt; 10000)</span></span><br><span class="line">    <span class="comment">//&#123; </span></span><br><span class="line">    <span class="comment">//    Console.Write(&quot;O&quot;);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        cts.Token.ThrowIfCancellationRequested();</span><br><span class="line">        Console.Write(<span class="string">&quot;O&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i++ &lt; <span class="number">1000</span>);</span><br><span class="line">&#125;, cts.Token);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cts.Cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21-4-2-其他创建任务的方式"><a href="#21-4-2-其他创建任务的方式" class="headerlink" title="21.4.2. 其他创建任务的方式"></a>21.4.2. 其他创建任务的方式</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Task t = <span class="keyword">new</span> TaskFactory().StartNew(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Task t = <span class="keyword">new</span> Task(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, TaskCreationOptions.LongRunning);</span><br><span class="line">t.Start();</span><br><span class="line">Task t = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="21-4-3-任务协作"><a href="#21-4-3-任务协作" class="headerlink" title="21.4.3. 任务协作"></a>21.4.3. 任务协作</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Task t1 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;拿扫把&quot;</span>);</span><br><span class="line">    Task t2 = Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;扫地&quot;</span>);</span><br><span class="line">        Task t3 = Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;集合&quot;</span>);</span><br><span class="line">            Task t4 = Task.Run(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">t1.Wait();</span><br></pre></td></tr></table></figure><p>使用 ContinueWith 简化:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;拿扫把&quot;</span>);</span><br><span class="line">&#125;).ContinueWith((s) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;扫地&quot;</span>);</span><br><span class="line">&#125;).ContinueWith((s) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;集合&quot;</span>);</span><br><span class="line">&#125;).ContinueWith((s) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">&#125;).Wait();</span><br></pre></td></tr></table></figure><h3 id="21-5-TAL-Task-based-Asyncronize-Pattern"><a href="#21-5-TAL-Task-based-Asyncronize-Pattern" class="headerlink" title="21.5. TAL (Task-based Asyncronize Pattern)"></a>21.5. TAL (Task-based Asyncronize Pattern)</h3><p>C# 5 中，出现了 async&#x2F;await 关键词:</p><ul><li><p>异步方法</p><p>，需要使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">async</span><br></pre></td></tr></table></figure><p>来修饰</p><ul><li>返回值必须是 Task 或者 Task <code>&lt;T&gt;</code> (有些情况下可以返回 void),</li><li>参数不能是 ref&#x2F;out 类型,</li><li>方法名，按照约定，最好是以 Async 结尾</li></ul></li><li><p>&#96;&#96;&#96;<br>await</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  关键词，只能用于 async 修饰的方法内:</span><br><span class="line"></span><br><span class="line">  - await 关键词后面跟着的是 awaitable 类型 (实现了 GetAwaiter 方法的类型) 的对象</span><br><span class="line">  - 我们一般来说，没有必要手动创建 awaitable 对象，而是直接使用 Task</span><br><span class="line">  - await 会检查后面的 awaitable 对象的状态:</span><br><span class="line">    - 如果它已经完成，那么拿到返回结果之后继续</span><br><span class="line">    - 如果没有完成，将当前异步方法 **挂起**，然后返回调用这个异步方法的方法继续执行。 如果后续 awaitable 状态变更为完成的话，异步方法将会被 **恢复**，并继续执行接下来的逻辑</span><br><span class="line">- 异步方法的调用，本身不会创建任何线程的</span><br><span class="line"></span><br><span class="line">```C#</span><br><span class="line">static async Task&lt;int&gt; GetUrlContentLengthAsync()</span><br><span class="line">&#123;</span><br><span class="line">    var client = new HttpClient();</span><br><span class="line"></span><br><span class="line">    Task&lt;string&gt; getStringTask =</span><br><span class="line">        client.GetStringAsync(&quot;https://docs.microsoft.com/dotnet&quot;);</span><br><span class="line"></span><br><span class="line">    DoIndependentWork();</span><br><span class="line"></span><br><span class="line">    string contents = await getStringTask; // 魔法之源。如果任务没结束，把方法挂起来</span><br><span class="line"></span><br><span class="line">    string cbaidu = await client.GetStringAsync(&quot;https://www.baidu.com&quot;);</span><br><span class="line">    Console.WriteLine($&quot;百度的访问结束: &#123;cbaidu.Length&#125;&quot;);</span><br><span class="line"></span><br><span class="line">    string cbing = await client.GetStringAsync(&quot;https://bing.com&quot;);</span><br><span class="line">    Console.WriteLine($&quot;bing的访问结束: &#123;cbing.Length&#125;&quot;);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(&quot;Finished.&quot;);</span><br><span class="line"></span><br><span class="line">    return contents.Length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static async Task Main()</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;111&quot;);</span><br><span class="line">    Task&lt;int&gt; t = GetUrlContentLengthAsync();</span><br><span class="line">    Console.WriteLine(&quot;222&quot;);</span><br><span class="line">    Console.WriteLine(await t); // Console.WriteLine(t.Result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="21-6-Parallel"><a href="#21-6-Parallel" class="headerlink" title="21.6. Parallel"></a>21.6. Parallel</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for (int i = 0; i &lt; 1000; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    Console.WriteLine(i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Task.WaitAll(</span></span><br><span class="line"><span class="comment">//    Enumerable.Range(0, 1000)</span></span><br><span class="line"><span class="comment">//        .Select(n =&gt; Task.Run(() =&gt; Console.WriteLine(n)))</span></span><br><span class="line"><span class="comment">//        .ToArray()</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Parallel.For(0, 1000, (n) =&gt;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    Console.WriteLine(n);</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; numbers = Enumerable.Range(<span class="number">0</span>, <span class="number">1000</span>).ToList();</span><br><span class="line"><span class="comment">//foreach (var n in numbers) Console.WriteLine(n);</span></span><br><span class="line"><span class="comment">//Parallel.ForEach(numbers, (n) =&gt; Console.WriteLine(n));</span></span><br><span class="line"></span><br><span class="line">Parallel.Invoke(</span><br><span class="line">    () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> ii = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Task.Delay(<span class="number">10</span>).Wait();</span><br><span class="line">            ii += Math.Pow(i, <span class="keyword">new</span> Random().Next(<span class="number">50</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Task.CurrentId&#125;</span> 计算完毕: <span class="subst">&#123;ii&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Task.Delay(<span class="number">10</span>).Wait();</span><br><span class="line">            <span class="built_in">double</span> ii = Math.Pow(i, i * i + <span class="number">3</span>) - <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Task.CurrentId&#125;</span> 计算完毕&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Task.Delay(<span class="number">10</span>).Wait();</span><br><span class="line">            <span class="built_in">double</span> ii = Math.Pow(i, i * i) / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Task.CurrentId&#125;</span> 计算完毕&quot;</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="21-7-任务的同步和协作"><a href="#21-7-任务的同步和协作" class="headerlink" title="21.7. 任务的同步和协作"></a>21.7. 任务的同步和协作</h3><h4 id="21-7-1-Monitor-Enter-x2F-Exit"><a href="#21-7-1-Monitor-Enter-x2F-Exit" class="headerlink" title="21.7.1. Monitor.Enter&#x2F;Exit"></a>21.7.1. Monitor.Enter&#x2F;Exit</h4><p>锁的基本使用:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建锁</span></span><br><span class="line"><span class="built_in">object</span> o = <span class="keyword">new</span> <span class="built_in">object</span>(); <span class="comment">// 将其当成一把锁，最好就是 object。尤其不要使用 this</span></span><br><span class="line"></span><br><span class="line">Task.Run(xxx);</span><br><span class="line">Task.Run(xxx);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxx</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 2. 抢夺锁</span></span><br><span class="line">    Monitor.Enter(o); <span class="comment">// 如果抢不到，那么等 (阻塞)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 执行关键代码</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;执行关键区域的代码&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 释放锁</span></span><br><span class="line">    Monitor.Exit(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更加健壮一点的写法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建锁</span></span><br><span class="line"><span class="built_in">object</span> o = <span class="keyword">new</span> <span class="built_in">object</span>(); <span class="comment">// 将其当成一把锁，最好就是 object。尤其不要使用 this</span></span><br><span class="line"></span><br><span class="line">Task.Run(xxx);</span><br><span class="line">Task.Run(xxx);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxx</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 2. 抢夺锁</span></span><br><span class="line">    Monitor.Enter(o); <span class="comment">// 如果抢不到，那么等 (阻塞)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 3. 执行关键代码</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行关键区域的代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 4. 释放锁</span></span><br><span class="line">        Monitor.Exit(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我不想等 (我只能等若干时间):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建锁</span></span><br><span class="line"><span class="built_in">object</span> o = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">Task.Run(xxx);</span><br><span class="line">Task.Run(xxx);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxx</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 2. 抢夺锁</span></span><br><span class="line">    <span class="built_in">bool</span> isTaken = Monitor.TryEnter(o); <span class="comment">// 我等不到，就拉倒 (非阻塞)</span></span><br><span class="line">    <span class="built_in">bool</span> isTaken = Monitor.TryEnter(o, <span class="number">666</span>); <span class="comment">// 我只能等这么久</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 判断有没有拿到锁</span></span><br><span class="line">    <span class="keyword">if</span> (isTaken)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 4. 执行关键代码</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;执行关键区域的代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 5. 释放锁</span></span><br><span class="line">            Monitor.Exit(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，一定要避免死锁的产生:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> lock1 = <span class="keyword">new</span>();</span><br><span class="line"><span class="built_in">object</span> lock2 = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line">Task t1 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Monitor.Enter(lock1);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    Task.Delay(<span class="number">2000</span>).Wait();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Monitor.Enter(lock2);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;其他事情&quot;</span>);</span><br><span class="line">    Monitor.Exit(lock2);</span><br><span class="line"></span><br><span class="line">    Monitor.Exit(lock1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Task t2 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Monitor.Enter(lock2);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;My...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Monitor.Enter(lock1);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">    Task.Delay(<span class="number">1500</span>).Wait();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    Monitor.Exit(lock1);</span><br><span class="line"></span><br><span class="line">    Monitor.Exit(lock2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Task.WaitAll(t1, t2);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;好了&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="21-7-2-lock"><a href="#21-7-2-lock" class="headerlink" title="21.7.2. lock"></a>21.7.2. lock</h4><p>是 Monitor 语法糖。胜在简单，败在不够灵活:</p><ul><li>lock 的行为是，如果获取不到锁，就等待</li><li>锁的争用会占用资源，拖慢速度</li><li>因此，一定要控制好锁的范围 (颗粒)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> o = <span class="keyword">new</span> ();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxx</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lock</span>(o) <span class="comment">// 等待</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是关键区域&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="21-7-3-ManualResetEventSlim"><a href="#21-7-3-ManualResetEventSlim" class="headerlink" title="21.7.3. ManualResetEventSlim"></a>21.7.3. ManualResetEventSlim</h4><p>多任务的简单协同。事件机制。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ev1 = <span class="keyword">new</span> ManualResetEventSlim();</span><br><span class="line"><span class="keyword">var</span> ev2 = <span class="keyword">new</span> ManualResetEventSlim();</span><br><span class="line"></span><br><span class="line">Task t1 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我来到教室&quot;</span>);</span><br><span class="line">    ev2.Wait();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我开始讲课&quot;</span>);</span><br><span class="line">    ev1.Set();</span><br><span class="line">&#125;);</span><br><span class="line">Task t2 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;你们来到教室&quot;</span>);</span><br><span class="line">    ev2.Set();</span><br><span class="line">    ev1.Wait();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;你们开始听课&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Task.WaitAll(t1, t2);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;下课&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="21-7-4-Interlock"><a href="#21-7-4-Interlock" class="headerlink" title="21.7.4. Interlock"></a>21.7.4. Interlock</h4><p>即使 i++ 这样的代码，在 CPU 的角度，也不是原子性的 (从内存中拿取、计算、写入到内存):</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> money = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">Task t1 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        money++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Task t2 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        money--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Task.WaitAll(t1, t2);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;现在我有钱: <span class="subst">&#123;money&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>遇到资源争用出现的问题，基本思路就是上锁:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> _lock = <span class="keyword">new</span>();</span><br><span class="line"><span class="built_in">int</span> money = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">Task t1 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            money++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Task t2 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span>(_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            money--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Task.WaitAll(t1, t2);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;现在我有钱: <span class="subst">&#123;money&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们可以使用 Interlock 保证线程安全，它比使用上锁的方式，更快、更简单:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> _lock = <span class="keyword">new</span>();</span><br><span class="line"><span class="built_in">int</span> money = <span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line">Task t1 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Interlocked.Increment(<span class="keyword">ref</span> money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Task t2 = Task.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Interlocked.Decrement(<span class="keyword">ref</span> money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Task.WaitAll(t1, t2);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;现在我有钱: <span class="subst">&#123;money&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="21-7-5-Semaphore"><a href="#21-7-5-Semaphore" class="headerlink" title="21.7.5. Semaphore"></a>21.7.5. Semaphore</h4><p>可以看作是 Monitor 方式的增强版。可以控制同一时刻通过核心代码区域的任务数量:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Semaphore sem = <span class="keyword">new</span> Semaphore(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sem.WaitOne(<span class="number">1000</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;n&#125;</span>: --- 恭喜我成功拿锁 :)&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;n&#125;</span>: 我开始做事咯&quot;</span>);</span><br><span class="line">            Task.Delay(random.Next(<span class="number">2000</span>) + <span class="number">1000</span>).Wait(); <span class="comment">// 模拟做了点事</span></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;n&#125;</span>: 我做完咯&quot;</span>);</span><br><span class="line">            sem.Release();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;n&#125;</span>: --- 我拿锁失败了 :(&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//List&lt;Task&gt; tasks = new();</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 10; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    var task = Task.Run(() =&gt; DoSomething(i));</span></span><br><span class="line"><span class="comment">//    tasks.Add(task);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tasks = Enumerable.Range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    .Select(n =&gt; Task.Run(() =&gt; DoSomething(n)));</span><br><span class="line">Task.WaitAll(tasks.ToArray());</span><br></pre></td></tr></table></figure><h4 id="21-7-6-CountdownEvent"><a href="#21-7-6-CountdownEvent" class="headerlink" title="21.7.6. CountdownEvent"></a>21.7.6. CountdownEvent</h4><p>看作是 ManualResetEventSlim 的增强版。</p><p>集齐 7 颗龙珠，召唤神龙:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cde = <span class="keyword">new</span> CountdownEvent(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeekLongZhu</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Task.CurrentId&#125;</span> 开始寻找...&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (cde.CurrentCount &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Task.Delay(<span class="number">200</span>).Wait();</span><br><span class="line">        <span class="keyword">if</span> (random.Next(<span class="number">100</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cde.Signal();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Task.CurrentId&#125;</span> 找到一颗龙珠&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tasks = Enumerable.Range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    .Select(n =&gt; Task.Run(SeekLongZhu));</span><br><span class="line"></span><br><span class="line">Task.WaitAll(tasks.ToArray());</span><br><span class="line"></span><br><span class="line">cde.Wait();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;七颗龙珠集齐，开始召唤神龙&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="21-8-其他几种异步模式"><a href="#21-8-其他几种异步模式" class="headerlink" title="21.8. 其他几种异步模式"></a>21.8. 其他几种异步模式</h3><h4 id="21-8-1-BackgroundWorker"><a href="#21-8-1-BackgroundWorker" class="headerlink" title="21.8.1. BackgroundWorker"></a>21.8.1. BackgroundWorker</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button1.Click += (s, e) =&gt;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    label111.Text = &quot;任务进行中...&quot;;</span></span><br><span class="line"><span class="comment">//    Thread.Sleep(10000);</span></span><br><span class="line"><span class="comment">//    label111.Text = &quot;任务已完成!&quot;;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//button1.Click += (s, e) =&gt;</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    label111.Text = &quot;任务进行中...&quot;;</span></span><br><span class="line"><span class="comment">//    Task.Run(() =&gt;</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        Thread.Sleep(10000);</span></span><br><span class="line"><span class="comment">//        label111.Text = &quot;任务已完成!&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line">button1.Click += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> bgw = <span class="keyword">new</span> BackgroundWorker();</span><br><span class="line">    bgw.DoWork += (s, e) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        label111.Text = <span class="string">&quot;任务进行中...&quot;</span>;</span><br><span class="line">        Thread.Sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    bgw.RunWorkerCompleted += (s, e) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        label111.Text = <span class="string">&quot;任务已完成!&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    bgw.RunWorkerAsync();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="21-8-2-System-Threading-Timer"><a href="#21-8-2-System-Threading-Timer" class="headerlink" title="21.8.2. System.Threading.Timer"></a>21.8.2. System.Threading.Timer</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">button1.Click += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="keyword">new</span> System.Threading.Timer((o) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        label111.Text += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">        Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="literal">null</span>, <span class="number">5000</span>, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对比一下 Winform 版本的 Timer，它是局部阻塞:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> System.Windows.Forms.Timer();</span><br><span class="line">timer.Interval = <span class="number">3000</span>;</span><br><span class="line">timer.Tick += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    label111.Text += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>); <span class="comment">// 在当前线程中，堵</span></span><br><span class="line">&#125;;</span><br><span class="line">button1.Click += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    timer.Start();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="22-IO-x2F-Stream"><a href="#22-IO-x2F-Stream" class="headerlink" title="22. IO&#x2F;Stream"></a>22. IO&#x2F;Stream</h2><p>驱动器、文件夹、文件的基本操作:</p><ul><li><p>静态的 <code>Path</code> 类，用来处理路径 (路径是一个字符串)</p></li><li><p>处理驱动器，使用 <code>DriveInfo</code></p></li><li><p>处理文件夹和文件，使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileSystemInfo</span><br></pre></td></tr></table></figure><p>(抽象类)，实现类:</p><ul><li>文件夹，使用 <code>DirectoryInfo</code>。静态的 <code>Directory</code></li><li>文件，使用 <code>FileInfo</code>。静态的 <code>File</code></li></ul></li></ul><p>文件内容的读写 (Stream):</p><ul><li>抽象的 <code>Stream</code> 表示流，它是所有底层流的基类 (基于 byte)</li><li><code>FileStream</code> 用来读写文件的内容</li><li><code>MemoryStream</code> 用来将某些内容按照流的方式写到内存中 (从内存中读取)</li><li><code>NetworkStream</code> 从网络中进行读写</li><li><code>GZipStream</code> 用来进行压缩、解压的</li></ul><p>通过不同的跟读写相关的辅助类 (Reader&#x2F;Writer) 简化了对上述流的使用:</p><ul><li><p>抽象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TextReader/TextWriter</span><br></pre></td></tr></table></figure><p>，表示从流中读取若干字符 (基于 char)</p><ul><li><code>StreamReader/StreamWriter</code> 用来包装底层流，增加基于字符读取的能力</li><li><code>StringReader/StringWriter</code> 用来从字符串中读写</li></ul></li><li><p><code>BinaryReader/BinaryWriter</code> 用来读写现成的类型</p></li><li><p><code>XmlReader/XmlWriter</code> 专门用来处理 xml 文件</p></li></ul><p>其他的一些流跟相关的类:</p><ul><li><code>ZipArchive/DeflateStream</code></li><li><code>MemoryMappedFiles</code></li><li><code>Pipes</code> 管道流</li></ul><h3 id="22-1-Path"><a href="#22-1-Path" class="headerlink" title="22.1. Path"></a>22.1. Path</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s1 = Path.ChangeExtension(fn, <span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> d1 = <span class="string">@&quot;E:\ddd\&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> n1 = <span class="string">@&quot;aaa.txt&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = Path.Combine(d1, n1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> b1 = Path.EndsInDirectorySeparator(d1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = Path.GetDirectoryName(fn);</span><br><span class="line"><span class="keyword">var</span> s4 = Path.GetExtension(fn);</span><br><span class="line"><span class="keyword">var</span> s5 = Path.GetFileName(fn);</span><br><span class="line"><span class="keyword">var</span> s6 = Path.GetFileNameWithoutExtension(fn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s7 = Path.GetFullPath(<span class="string">&quot;xxx.txt&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> s8 = Path.GetFullPath(fn);</span><br><span class="line"><span class="keyword">var</span> s9 = Path.GetRandomFileName();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;s9&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="22-2-Driver"><a href="#22-2-Driver" class="headerlink" title="22.2. Driver"></a>22.2. Driver</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DriveInfo[] drives = DriveInfo.GetDrives();</span><br><span class="line"><span class="keyword">foreach</span> (DriveInfo di <span class="keyword">in</span> drives)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;di.Name&#125;</span>, <span class="subst">&#123;di.DriveType&#125;</span>, <span class="subst">&#123;di.DriveFormat&#125;</span>, <span class="subst">&#123;di.TotalSize&#125;</span>, <span class="subst">&#123;di.AvailableFreeSpace&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-3-Directory"><a href="#22-3-Directory" class="headerlink" title="22.3. Directory"></a>22.3. Directory</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="string">@&quot;e:\demo1\hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> d2 = <span class="string">@&quot;e:\demo1\world&quot;</span>;</span><br><span class="line"></span><br><span class="line">Directory.CreateDirectory(d1);</span><br><span class="line">Directory.CreateDirectory(d2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Directory.Delete(Directory.GetParent(d).FullName);</span></span><br><span class="line"><span class="comment">//Directory.Delete(Directory.GetParent(d).FullName, true);</span></span><br><span class="line"><span class="comment">//Directory.Move(d2, d1);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> f <span class="keyword">in</span> Directory.GetDirectories(<span class="string">@&quot;e:\Workdir&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> f <span class="keyword">in</span> Directory.GetFiles(<span class="string">@&quot;e:\Workdir&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; e1 = Directory.EnumerateFiles(d2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Directory.GetCreationTime(d1);</span><br><span class="line"><span class="keyword">var</span> s2 = Directory.GetCurrentDirectory();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = Directory.Exists(d2);</span><br><span class="line">Directory.SetCreationTime(<span class="string">@&quot;e:\Video&quot;</span>, DateTime.Now);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(s2);</span><br></pre></td></tr></table></figure><h3 id="22-4-File"><a href="#22-4-File" class="headerlink" title="22.4. File"></a>22.4. File</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//File.Exists(fn);</span></span><br><span class="line"><span class="comment">//File.Delete(fn);</span></span><br><span class="line"><span class="comment">//File.Move(fn, &quot;xxx&quot;);</span></span><br><span class="line"><span class="comment">//File.Copy(fn, &quot;xxx&quot;);</span></span><br><span class="line"><span class="comment">//File.Encrypt(fn);</span></span><br><span class="line"><span class="comment">//File.Decrypt(fn);</span></span><br><span class="line"></span><br><span class="line">File.GetCreationTime(fn);</span><br><span class="line">Console.WriteLine(File.GetAttributes(fn));</span><br></pre></td></tr></table></figure><h3 id="22-5-Stream"><a href="#22-5-Stream" class="headerlink" title="22.5. Stream"></a>22.5. Stream</h3><h4 id="22-5-1-FileSteam"><a href="#22-5-1-FileSteam" class="headerlink" title="22.5.1. FileSteam"></a>22.5.1. FileSteam</h4><p>用完要释放; 使用 ReadByte 读取一个字节:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"></span><br><span class="line">FileStream stream = <span class="keyword">new</span> FileStream(fn, FileMode.Open);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;stream.CanRead&#125;</span>, <span class="subst">&#123;stream.CanWrite&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> b = stream.ReadByte();</span><br><span class="line">    Console.Write(<span class="string">$&quot;<span class="subst">&#123;b:x&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine();</span><br><span class="line"></span><br><span class="line">stream.Seek(<span class="number">5</span>, SeekOrigin.Begin);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;stream.ReadByte():x&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">stream.Dispose();</span><br></pre></td></tr></table></figure><p>使用 using 管理资源 &#x2F; 使用 Read 进行批量读取:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(fn, FileMode.Open))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// byte[] bs = stream.Read(10);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">int</span> n = stream.Read(buf, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;读取成功了 <span class="subst">&#123;n&#125;</span> 个&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">$&quot;<span class="subst">&#123;buf[i]:x&#125;</span>-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文读取:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(fn, FileMode.Open);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> n;</span><br><span class="line"><span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">10</span>]; <span class="comment">// 缓冲数组</span></span><br><span class="line"><span class="keyword">while</span> ((n = stream.Read(buf)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    PrintBuffer(buf, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintBuffer</span>(<span class="params"><span class="built_in">byte</span>[] buf, <span class="built_in">int</span> limit</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; limit; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">$&quot;<span class="subst">&#123;buf[i]:x&#125;</span>-&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步读取:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(fn, FileMode.Open);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> n;</span><br><span class="line"><span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">int</span> len = <span class="keyword">await</span> stream.ReadAsync(buf);</span><br></pre></td></tr></table></figure><p>写:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(fn, FileMode.Open);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最开始的位置</span></span><br><span class="line"><span class="comment">// 覆盖</span></span><br><span class="line">stream.WriteByte(<span class="number">255</span>);</span><br><span class="line">stream.WriteByte(<span class="number">255</span>);</span><br><span class="line">stream.WriteByte(<span class="number">255</span>);</span><br><span class="line">stream.WriteByte(<span class="number">255</span>);</span><br><span class="line">stream.Flush();</span><br><span class="line"></span><br><span class="line">stream.Seek(<span class="number">100</span>, SeekOrigin.Begin);</span><br><span class="line"><span class="keyword">var</span> ba1 = Encoding.UTF8.GetBytes(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">stream.Write(ba1, <span class="number">0</span>, ba1.Length);</span><br><span class="line">stream.Flush();</span><br></pre></td></tr></table></figure><p>丰富多彩的构造参数:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program222.cs&quot;</span>;</span><br><span class="line"><span class="comment">//using var stream = new FileStream(fn, FileMode.OpenOrCreate);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> stream = <span class="keyword">new</span> FileStream(fn,</span><br><span class="line">                                  FileMode.OpenOrCreate,</span><br><span class="line">                                  FileAccess.Write,</span><br><span class="line">                                  FileShare.ReadWrite,</span><br><span class="line">                                  <span class="number">200</span>,</span><br><span class="line">                                  FileOptions.DeleteOnClose);</span><br><span class="line"></span><br><span class="line">stream.WriteByte(<span class="number">255</span>);</span><br><span class="line">stream.WriteByte(<span class="number">0x65</span>);</span><br></pre></td></tr></table></figure><p>在 File 中存在若干创建流的快捷方式:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program222.cs&quot;</span>;</span><br><span class="line"><span class="comment">//using var stream = new FileStream(fn, FileMode.Open, FileAccess.Read);</span></span><br><span class="line"><span class="comment">//using var stream = File.Open(fn, FileMode.Open);</span></span><br><span class="line"><span class="comment">//using var stream = File.OpenRead(fn);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenWrite(fn);</span><br></pre></td></tr></table></figure><h4 id="22-5-2-MemoryStream"><a href="#22-5-2-MemoryStream" class="headerlink" title="22.5.2. MemoryStream"></a>22.5.2. MemoryStream</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MemoryStream s = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"><span class="built_in">byte</span>[] bs1 = Encoding.UTF8.GetBytes(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line"><span class="built_in">byte</span>[] bs2 = Encoding.UTF8.GetBytes(<span class="string">&quot;yyds&quot;</span>);</span><br><span class="line">s.Write(bs1, <span class="number">0</span>, bs1.Length);</span><br><span class="line">s.Write(bs2, <span class="number">0</span>, bs2.Length);</span><br><span class="line">s.ToArray();</span><br></pre></td></tr></table></figure><h4 id="22-5-3-NetworkStream"><a href="#22-5-3-NetworkStream" class="headerlink" title="22.5.3. NetworkStream"></a>22.5.3. NetworkStream</h4><p>Socket!!!</p><h3 id="22-6-Reader-x2F-Writer"><a href="#22-6-Reader-x2F-Writer" class="headerlink" title="22.6. Reader&#x2F;Writer"></a>22.6. Reader&#x2F;Writer</h3><h4 id="22-6-1-StreamReader-x2F-StreamWriter"><a href="#22-6-1-StreamReader-x2F-StreamWriter" class="headerlink" title="22.6.1. StreamReader&#x2F;StreamWriter"></a>22.6.1. StreamReader&#x2F;StreamWriter</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s = File.OpenRead(fn);</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Console.WriteLine(reader.ReadLine()); </span></span><br><span class="line"><span class="comment">//Console.WriteLine(reader.ReadLine()); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reader.Peek();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Console.WriteLine(reader.ReadToEnd());</span></span><br><span class="line"></span><br><span class="line">reader.Read();</span><br></pre></td></tr></table></figure><p>可以直接传入文件名:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="comment">// using var reader = new StreamReader(File.OpenRead(fn));</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(fn);</span><br></pre></td></tr></table></figure><p>在 File 中提供了大量的快捷使用:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\Workdir\Chengji\Chengji\Program.cs&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> StreamReader sr = File.OpenText(fn);</span><br><span class="line"><span class="keyword">using</span> StreamWriter sw1 = File.AppendText(fn);</span><br><span class="line"><span class="keyword">using</span> StreamWriter sw2 = File.CreateText(fn);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = File.ReadAllText(fn);</span><br><span class="line"><span class="built_in">string</span>[] ar = File.ReadAllLines(fn);</span><br><span class="line">File.WriteAllText(fn, <span class="string">&quot;dkjskdjfskdfjds&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="22-6-2-StringReader-x2F-StringWriter"><a href="#22-6-2-StringReader-x2F-StringWriter" class="headerlink" title="22.6.2. StringReader&#x2F;StringWriter"></a>22.6.2. StringReader&#x2F;StringWriter</h4><p>使用场景: xxxxx</p><p>优势劣势: xxxxx</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> StringReader(<span class="string">&quot;hello, world&quot;</span>);</span><br><span class="line"><span class="comment">//Console.WriteLine(reader.Read());</span></span><br><span class="line"><span class="comment">//Console.WriteLine(reader.ReadToEnd());</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line"><span class="comment">//writer.WriteLine(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//writer.WriteLine(&quot;world&quot;);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    writer.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(writer.ToString());</span><br></pre></td></tr></table></figure><h4 id="22-6-3-BinaryReader-x2F-BinaryWriter"><a href="#22-6-3-BinaryReader-x2F-BinaryWriter" class="headerlink" title="22.6.3. BinaryReader&#x2F;BinaryWriter"></a>22.6.3. BinaryReader&#x2F;BinaryWriter</h4><p>BinaryWriter:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\x11111.bin&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> BinaryWriter(File.OpenWrite(fn));</span><br><span class="line">writer.Write(<span class="number">123</span>);</span><br><span class="line">writer.Write(<span class="literal">true</span>);</span><br><span class="line">writer.Write(<span class="string">&#x27;X&#x27;</span>);</span><br><span class="line">writer.Write(<span class="number">33.3</span>);</span><br><span class="line">writer.Flush();</span><br><span class="line"><span class="keyword">return</span> writer;</span><br></pre></td></tr></table></figure><p>BinaryReader:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fn = <span class="string">@&quot;E:\x11111.bin&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> BinaryReader(File.OpenRead(fn));</span><br><span class="line"><span class="built_in">int</span> i = reader.ReadInt32();</span><br><span class="line"><span class="built_in">bool</span> b = reader.ReadBoolean();</span><br><span class="line"><span class="built_in">char</span> c = reader.ReadChar();</span><br><span class="line">Console.WriteLine(c);</span><br></pre></td></tr></table></figure><h4 id="22-6-4-XmlReader-x2F-XmlWriter"><a href="#22-6-4-XmlReader-x2F-XmlWriter" class="headerlink" title="22.6.4. XmlReader&#x2F;XmlWriter"></a>22.6.4. XmlReader&#x2F;XmlWriter</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="string">@&quot;e:\hello.xml&quot;</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> xw = XmlWriter.Create(File.OpenWrite(fn), <span class="keyword">new</span> XmlWriterSettings &#123; Indent = <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; books = <span class="keyword">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;战争与和平&quot;</span>,</span><br><span class="line">    <span class="string">&quot;悲惨的世界&quot;</span>,</span><br><span class="line">    <span class="string">&quot;供货商打开&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jQuery&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Csharp&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xw.WriteStartDocument();</span><br><span class="line">xw.WriteStartElement(<span class="string">&quot;book&quot;</span>);</span><br><span class="line">xw.WriteComment(<span class="string">&quot;我也不知道&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> book <span class="keyword">in</span> books)</span><br><span class="line">&#123;</span><br><span class="line">    xw.WriteElementString(<span class="string">&quot;name&quot;</span>, book);</span><br><span class="line">&#125;</span><br><span class="line">xw.WriteEndElement();</span><br><span class="line">xw.Flush();</span><br></pre></td></tr></table></figure><h3 id="22-7-FileSystemWatching"><a href="#22-7-FileSystemWatching" class="headerlink" title="22.7. FileSystemWatching"></a>22.7. FileSystemWatching</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dn = <span class="string">@&quot;e:\Tmp&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> watcher = <span class="keyword">new</span> FileSystemWatcher</span><br><span class="line">&#123;</span><br><span class="line">    Path = dn,</span><br><span class="line">    IncludeSubdirectories = <span class="literal">true</span>,</span><br><span class="line">    EnableRaisingEvents = <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line">watcher.Changed += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;有东西发生了变化: <span class="subst">&#123;e.Name&#125;</span>, <span class="subst">&#123;e.ChangeType&#125;</span>&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">watcher.Created += (s, e) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;创建了一点什么东西，我也不知都。可能是病毒把...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><h2 id="23-Socket"><a href="#23-Socket" class="headerlink" title="23. Socket"></a>23. Socket</h2><h3 id="23-1-OSI-模型"><a href="#23-1-OSI-模型" class="headerlink" title="23.1. OSI 模型"></a>23.1. OSI 模型</h3><ul><li>计算机网络刚起步的阶段，很多私有协议 (Protocol) 先后出现</li><li>后面 ISO (国际标准组织) 出面推出了 OSI (Open System Interconnection) 协议<ul><li>分为 7 层，每次都提供单独的服务，层与层之间紧密合作</li><li>大而全，从底层的网线接口，到高层的应用协议，无所不包</li><li>率先提出了服务、分层、协议、之类的概念</li></ul></li></ul><p><img src="http://yaoqisan.local:7373/html/dotnet/img/osi-1.png" alt="osi-1.png"></p><p>但是:</p><ul><li>它太复杂了 (<a href="http://yaoqisan.local:7373/html/dotnet/img/tcpip-111.png">大而全的 OSI 模型图片</a>)</li><li>到现在为止, Windows 操作系统也没有完全实现 OSI 协议</li><li>反而在这个过程中，围绕着 TCP 和 IP 这两种协议，衍生出了 TCP&#x2F;IP Protocol Stack (协议栈) 的概念，并且被广泛使用</li><li>TCP&#x2F;IP 协议栈慢慢就成为了事实上的标准；但是学习的时候，理论上还是以 OSI 为基准</li><li>TCP&#x2F;IP 出现在 OSI 模型之前，但是后面 OSI 出现之后，TCP&#x2F;IP 借鉴了其中很多想法，包括分层</li><li>正因为如此，OSI 模型，现在变成了 <strong>参考</strong> 模型</li></ul><h3 id="23-2-TCP-x2F-IP-协议栈"><a href="#23-2-TCP-x2F-IP-协议栈" class="headerlink" title="23.2. TCP&#x2F;IP 协议栈"></a>23.2. TCP&#x2F;IP 协议栈</h3><p><img src="http://yaoqisan.local:7373/html/dotnet/img/tcpipstack.png" alt="tcpipstack.png"></p><p><img src="http://yaoqisan.local:7373/html/dotnet/img/tcpip-2222.png" alt="tcpip-2222.png"></p><p><img src="http://yaoqisan.local:7373/html/dotnet/img/tcpip-3332.png" alt="tcpip-3332.png"></p><h3 id="23-3-Uri-x2F-UriBuilder"><a href="#23-3-Uri-x2F-UriBuilder" class="headerlink" title="23.3. Uri&#x2F;UriBuilder"></a>23.3. Uri&#x2F;UriBuilder</h3><p>URI (Uniform Resource Identifier), 统一资源标识符:</p><ul><li>url: Uniform Resource Locator, 统一资源定位器</li><li>urn: Uniform Resource Name, 统一资源名称</li></ul><p>示例:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ftp:<span class="comment">//ftp.is.co.za/rfc/rfc1808.txt (also a URL because of the protocol)</span></span><br><span class="line">http:<span class="comment">//www.ietf.org/rfc/rfc2396.txt (also a URL because of the protocol)</span></span><br><span class="line">ldap:<span class="comment">//[2001:db8::7]/c=GB?objectClass?one (also a URL because of the protocol)</span></span><br><span class="line">mailto:John.Doe@example.com (also a URL because of the protocol)</span><br><span class="line">news:comp.infosystems.www.servers.unix (also a URL because of the protocol)</span><br><span class="line">tel:+<span class="number">1</span><span class="number">-816</span><span class="number">-555</span><span class="number">-1212</span></span><br><span class="line">telnet:<span class="comment">//192.0.2.16:80/ (also a URL because of the protocol)</span></span><br><span class="line">urn:oasis:names:specification:docbook:dtd:xml:<span class="number">4.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><p>Uri 用于结构化 URL 地址:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个完整的 URL 地址包括若干部分:</span></span><br><span class="line"><span class="comment">//   协议://[用户名@]地址[:端口]/路径?查询参数#段</span></span><br><span class="line"><span class="comment">//   schema://host:port/path?query#fragment</span></span><br><span class="line"><span class="comment">//   schema://host</span></span><br><span class="line"><span class="comment">//   http://baidu.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;http://wwww.baidu.com:80/aaa/index.html?name=张三#333&quot;</span>;</span><br><span class="line">Uri uri = <span class="keyword">new</span> Uri(s);</span><br><span class="line">Console.WriteLine(uri.Host);</span><br><span class="line">Console.WriteLine(uri.Port);</span><br><span class="line">Console.WriteLine(uri.LocalPath);</span><br><span class="line">Console.WriteLine(uri.AbsolutePath);</span><br><span class="line">Console.WriteLine(uri.Query);</span><br><span class="line">Console.WriteLine(uri.Fragment);</span><br><span class="line"></span><br><span class="line">Console.WriteLine();</span><br><span class="line"></span><br><span class="line">Console.WriteLine(Uri.EscapeDataString(s));</span><br><span class="line">Console.WriteLine(Uri.EscapeUriString(s));</span><br><span class="line">Console.WriteLine(Uri.EscapeDataString(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">Console.WriteLine(Uri.UnescapeDataString(<span class="string">&quot;%3d&quot;</span>));</span><br></pre></td></tr></table></figure><p>UriBuilder:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ub = <span class="keyword">new</span> UriBuilder();</span><br><span class="line">ub.Scheme = <span class="string">&quot;https&quot;</span>;</span><br><span class="line">ub.Host = <span class="string">&quot;182.23.444.55&quot;</span>;</span><br><span class="line">ub.Port = <span class="number">444</span>;</span><br><span class="line">ub.Path = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">ub.Query = <span class="string">&quot;?name=zhangsan&quot;</span>;</span><br><span class="line">ub.UserName = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">ub.Password = <span class="string">&quot;admin2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uri = ub.Uri;</span><br><span class="line">Console.WriteLine(uri);</span><br></pre></td></tr></table></figure><h3 id="23-4-IpAddress-x2F-Dns"><a href="#23-4-IpAddress-x2F-Dns" class="headerlink" title="23.4. IpAddress&#x2F;Dns"></a>23.4. IpAddress&#x2F;Dns</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ipStr = <span class="string">&quot;8.8.8.8&quot;</span>; <span class="comment">// 1.1.1.1 DNS 服务器</span></span><br><span class="line"><span class="comment">//IPAddress ip = new IPAddress(ipStr);</span></span><br><span class="line">IPAddress ip = IPAddress.Parse(ipStr);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;ip.Address&#125;</span>, <span class="subst">&#123;ip.AddressFamily&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">IPAddress[] ips = Dns.GetHostAddresses(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> ips)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IPHostEntry ih = Dns.GetHostEntry(<span class="string">&quot;www.bing.com&quot;</span>);</span><br><span class="line">Console.WriteLine(ih.HostName);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> al <span class="keyword">in</span> ih.Aliases)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(al);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-5-Socket"><a href="#23-5-Socket" class="headerlink" title="23.5. Socket"></a>23.5. Socket</h3><p>插座来了。</p><h4 id="23-5-1-TCP-vs-UDP"><a href="#23-5-1-TCP-vs-UDP" class="headerlink" title="23.5.1. TCP vs UDP"></a>23.5.1. TCP vs UDP</h4><ul><li>TCP (Transmission Control Protocol) 传输控制协议:<ul><li>可靠的连接</li><li>三次握手跟四次挥手的连接跟断开</li><li>传输过程中，如果存在丢包的话</li></ul></li><li>UDP (User Datagram Protocol) 用户数据报协议:<ul><li>不需要握手、挥手，直接发数据</li><li>具备不可靠性</li><li>但是保障速度</li></ul></li></ul><p><img src="http://yaoqisan.local:7373/html/dotnet/img/tcp3333.png" alt="tcp3333.png"></p><h4 id="23-5-2-Socket-x2F-TCP"><a href="#23-5-2-Socket-x2F-TCP" class="headerlink" title="23.5.2. Socket&#x2F;TCP"></a>23.5.2. Socket&#x2F;TCP</h4><ul><li>TCP&#x2F;IP 协议栈是由操作系统 (内核) 实现的</li><li>Socket 是由操作系统提供的面向 TCP&#x2F;IP 协议编程的接口</li><li>C# 中，使用 <code>Socket</code> 对象，来完成对系统 API 调用</li></ul><h5 id="23-5-2-1-基本语法"><a href="#23-5-2-1-基本语法" class="headerlink" title="23.5.2.1. 基本语法"></a>23.5.2.1. 基本语法</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TCP 编程三板斧:</span></span><br><span class="line"><span class="comment">//  1. bind (绑定)</span></span><br><span class="line"><span class="comment">//  2. listen (监听)</span></span><br><span class="line"><span class="comment">//  3. accept (接受)</span></span><br><span class="line"></span><br><span class="line">Socket server = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"><span class="comment">// 绑定监听来自哪些 IP 地址的请求，监听哪个端口 (1024)</span></span><br><span class="line">server.Bind(<span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">16789</span>));</span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">server.Listen();</span><br><span class="line"><span class="comment">// 等待来自用户的请求</span></span><br><span class="line">Socket s = server.Accept();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;接受到一个用户的请求 <span class="subst">&#123;s&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="23-5-2-2-简单的-HTTP-服务器"><a href="#23-5-2-2-简单的-HTTP-服务器" class="headerlink" title="23.5.2.2. 简单的 HTTP 服务器"></a>23.5.2.2. 简单的 HTTP 服务器</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Socket server = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"><span class="comment">// 绑定监听来自哪些 IP 地址的请求，监听哪个端口 (1024)</span></span><br><span class="line">server.Bind(<span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">16780</span>));</span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">server.Listen(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 等待来自用户的请求</span></span><br><span class="line">    Socket s = server.Accept();</span><br><span class="line">    Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;-------- 第 <span class="subst">&#123;++count&#125;</span> 个请求 --------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据的读取</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1020000</span>];</span><br><span class="line">        <span class="built_in">int</span> n = s.Receive(buf);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;接受到一个用户的请求 <span class="subst">&#123;s&#125;</span>&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;它发送的数据是 <span class="subst">&#123;Encoding.UTF8.GetString(buf, <span class="number">0</span>, n)&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应内容</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> content = <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.Append(<span class="string">&quot;HTTP/1.1 200 OK\n&quot;</span>);</span><br><span class="line">        sb.Append(<span class="string">$&quot;Content-Type: <span class="subst">&#123;content.Length&#125;</span>\n&quot;</span>);</span><br><span class="line">        sb.Append(<span class="string">&quot;Content-Type: text/html; charset=utf-8\n&quot;</span>);</span><br><span class="line">        sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        sb.Append(content);</span><br><span class="line"></span><br><span class="line">        s.Send(Encoding.UTF8.GetBytes(sb.ToString()));</span><br><span class="line"></span><br><span class="line">        s.Shutdown(SocketShutdown.Both);</span><br><span class="line">        s.Close();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="23-5-2-3-简单的客户端实现"><a href="#23-5-2-3-简单的客户端实现" class="headerlink" title="23.5.2.3. 简单的客户端实现"></a>23.5.2.3. 简单的客户端实现</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">socket.Connect(IPAddress.Loopback, <span class="number">16780</span>);</span><br><span class="line"></span><br><span class="line">socket.Send(Encoding.UTF8.GetBytes(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] res = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">int</span> n = socket.Receive(res);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;我得到的响应内容是 <span class="subst">&#123;Encoding.UTF8.GetString(res)&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="23-5-3-Socket-x2F-UDP"><a href="#23-5-3-Socket-x2F-UDP" class="headerlink" title="23.5.3. Socket&#x2F;UDP"></a>23.5.3. Socket&#x2F;UDP</h4><p>Sender:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line"></span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(&quot;请输入你要发送的内容: &quot;);</span><br><span class="line">    string content = Console.ReadLine();</span><br><span class="line">    socket.SendTo(Encoding.UTF8.GetBytes(content), new IPEndPoint(IPAddress.Loopback, 9897));</span><br><span class="line">    Console.WriteLine(&quot;发送成功!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Receiver:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line">socket.Bind(new IPEndPoint(IPAddress.Any, 9897));</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;创建成功，准备工作...&quot;);</span><br><span class="line"></span><br><span class="line">byte[] buf = new byte[10023];</span><br><span class="line">var ep = (EndPoint) new IPEndPoint(IPAddress.Any, 9897);</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    int n = socket.ReceiveFrom(buf, ref ep);</span><br><span class="line">    Console.WriteLine($&quot;接收到来自 &#123;(ep as IPEndPoint).Address&#125; 的信息:&quot;);</span><br><span class="line">    Console.WriteLine(Encoding.UTF8.GetString(buf, 0, n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23-5-4-通过-NetworkStream-简化对-Socket-读写的操作"><a href="#23-5-4-通过-NetworkStream-简化对-Socket-读写的操作" class="headerlink" title="23.5.4. 通过 NetworkStream 简化对 Socket 读写的操作"></a>23.5.4. 通过 NetworkStream 简化对 Socket 读写的操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using var s = new NetworkStream(socket);</span><br><span class="line"></span><br><span class="line">var sr = new StreamReader(s);</span><br><span class="line">Console.WriteLine($&quot;我接收到了数据: &#123;sr.ReadToEnd()&#125;&quot;);</span><br><span class="line"></span><br><span class="line">var sw = new StreamWriter(s);</span><br><span class="line">sw.WriteLine(&quot;hello, world&quot;);</span><br></pre></td></tr></table></figure><h4 id="23-5-5-飞鸽-x2F-FeiQ"><a href="#23-5-5-飞鸽-x2F-FeiQ" class="headerlink" title="23.5.5. 飞鸽&#x2F;FeiQ"></a>23.5.5. 飞鸽&#x2F;FeiQ</h4><p><a href="https://blog.csdn.net/ufe_1/article/details/47170615">https://blog.csdn.net/ufe_1/article/details/47170615</a></p><h3 id="23-6-TcpClient-x2F-TcpListener"><a href="#23-6-TcpClient-x2F-TcpListener" class="headerlink" title="23.6. TcpClient&#x2F;TcpListener"></a>23.6. TcpClient&#x2F;TcpListener</h3><p>服务器端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var listener = new TcpListener(IPAddress.Any, 8899);</span><br><span class="line">listener.Start();</span><br><span class="line"></span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    TcpClient tc = listener.AcceptTcpClient();</span><br><span class="line">    Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;---&quot;);</span><br><span class="line">        while (true)</span><br><span class="line">        &#123;</span><br><span class="line">            var reader = new StreamReader(tc.GetStream());</span><br><span class="line">            Console.WriteLine($&quot;接收到了信息: &#123;reader.ReadLine()&#125;&quot;);</span><br><span class="line">            Task.Delay(1000).Wait();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var tc = new TcpClient();</span><br><span class="line">tc.Connect(IPAddress.Loopback, 8899);</span><br><span class="line">using var sw = new StreamWriter(tc.GetStream());</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(&quot;内容: &quot;);</span><br><span class="line">    string c = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">    sw.WriteLine(c);</span><br><span class="line">    sw.Flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-7-UdpClient"><a href="#23-7-UdpClient" class="headerlink" title="23.7. UdpClient"></a>23.7. UdpClient</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var uc = new UdpClient();</span><br><span class="line">var s = Encoding.UTF8.GetBytes(&quot;hello&quot;);</span><br><span class="line">uc.Send(s, s.Length, new IPEndPoint(IPAddress.Loopback, 4344));</span><br></pre></td></tr></table></figure><h3 id="23-8-HttpClient-x2F-HttpListener"><a href="#23-8-HttpClient-x2F-HttpListener" class="headerlink" title="23.8. HttpClient&#x2F;HttpListener"></a>23.8. HttpClient&#x2F;HttpListener</h3><h4 id="23-8-1-HttpListener"><a href="#23-8-1-HttpListener" class="headerlink" title="23.8.1. HttpListener"></a>23.8.1. HttpListener</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">var root = &quot;e:/myhtml/&quot;;</span><br><span class="line"></span><br><span class="line">var webServer = new HttpListener();</span><br><span class="line">webServer.Prefixes.Add(&quot;http://localhost:8099/&quot;);</span><br><span class="line">webServer.Start();</span><br><span class="line"></span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    HttpListenerContext context = webServer.GetContext();</span><br><span class="line"></span><br><span class="line">    Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        var req = context.Request;</span><br><span class="line">        var resp = context.Response;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(req.RemoteEndPoint.Address);</span><br><span class="line">        using (var sw = new StreamWriter(resp.OutputStream))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            var path = req.Url.LocalPath;</span><br><span class="line">            var fullPath = Path.Combine(root, path.Substring(1));</span><br><span class="line">            Console.WriteLine(fullPath);</span><br><span class="line">            if (Path.GetExtension(path) == &quot;.html&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                if (File.Exists(fullPath))</span><br><span class="line">                &#123;</span><br><span class="line">                    var content = File.ReadAllText(fullPath);</span><br><span class="line">                    Console.WriteLine(content);</span><br><span class="line">                    sw.WriteLine(content);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    resp.ContentType = &quot;text/html; charset=\&quot;utf-8\&quot;&quot;;</span><br><span class="line">                    sw.WriteLine(&quot;没有找到网页&quot;);</span><br><span class="line">                    resp.StatusCode = 404;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.Close();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="23-8-2-HttpWebRequest-x2F-WebClient-x2F-HttpClient"><a href="#23-8-2-HttpWebRequest-x2F-WebClient-x2F-HttpClient" class="headerlink" title="23.8.2. HttpWebRequest&#x2F;WebClient&#x2F;HttpClient"></a>23.8.2. HttpWebRequest&#x2F;WebClient&#x2F;HttpClient</h4><h2 id="24-Database"><a href="#24-Database" class="headerlink" title="24. Database"></a>24. Database</h2><h3 id="24-1-ADO-NET"><a href="#24-1-ADO-NET" class="headerlink" title="24.1. ADO.NET"></a>24.1. ADO.NET</h3><h4 id="24-1-1-SqlConnection-x2F-SqlCommand-x2F-SqlDataReader"><a href="#24-1-1-SqlConnection-x2F-SqlCommand-x2F-SqlDataReader" class="headerlink" title="24.1.1. SqlConnection &#x2F; SqlCommand &#x2F; SqlDataReader"></a>24.1.1. SqlConnection &#x2F; SqlCommand &#x2F; SqlDataReader</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">static void Main()</span><br><span class="line">&#123;</span><br><span class="line">    // 第一步: 创建连接</span><br><span class="line">    //using var conn = new SqlConnection(&quot;server=localhost;database=lagou;uid=sa;pwd=sa&quot;);</span><br><span class="line">    //using var conn = new SqlConnection(&quot;server=.;database=lagou;uid=sa;pwd=sa&quot;);</span><br><span class="line">    using var conn = new SqlConnection(&quot;server=.;database=lagou;integrated security=SSPI&quot;);</span><br><span class="line"></span><br><span class="line">    // 第二步: 组织查询语句</span><br><span class="line">    var command = new SqlCommand(&quot;select top 5 position, city, salary_min from lagou_position&quot;, conn);</span><br><span class="line"></span><br><span class="line">    // 第三步: 打开数据库，准备查询</span><br><span class="line">    conn.Open();</span><br><span class="line"></span><br><span class="line">    // 第四步: 查询</span><br><span class="line">    SqlDataReader reader = command.ExecuteReader();</span><br><span class="line">    while (reader.Read())</span><br><span class="line">    &#123;</span><br><span class="line">        var position = reader[0];</span><br><span class="line">        var city = reader[1];</span><br><span class="line">        var salary = reader[2];</span><br><span class="line">        Console.WriteLine($&quot;&#123;position&#125;: &#123;city&#125;/&#123;salary&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24-1-2-ExecuteScalar-x2F-SQL-Injection-x2F-Parameters"><a href="#24-1-2-ExecuteScalar-x2F-SQL-Injection-x2F-Parameters" class="headerlink" title="24.1.2. ExecuteScalar &#x2F; SQL Injection &#x2F; Parameters"></a>24.1.2. ExecuteScalar &#x2F; SQL Injection &#x2F; Parameters</h4><p>在珠海，Salary_min 最高的 C# 岗位的 Salary_max 是多少:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(GetSalayMaxFromCity(&quot;珠海&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void 这就是SQL注入问题()</span><br><span class="line">    &#123;</span><br><span class="line">        var city = &quot;珠海&#x27;;drop table lagou_position;select * from lagou_position where 1=&#x27;&quot;;</span><br><span class="line">        var sql0 = $&quot;select * from lagou_position where city = &#x27;&#123;city&#125;&#x27;&quot;;</span><br><span class="line">        Console.WriteLine(sql0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static double GetSalayMaxFromCity(string city)</span><br><span class="line">    &#123;</span><br><span class="line">        // 第一步: 创建连接</span><br><span class="line">        using var conn = new SqlConnection(&quot;server=.;database=lagou;uid=sa;pwd=sa&quot;);</span><br><span class="line"></span><br><span class="line">        // 第二步: 组织语句</span><br><span class="line">        var sql = $&quot;select top 1 salary_max from lagou_position where city = &#x27;&#123;city&#125;&#x27; and (position like &#x27;%c#%&#x27; or position like &#x27;%.net%&#x27;) order by salary_min desc&quot;;</span><br><span class="line">        var command = new SqlCommand(sql, conn);</span><br><span class="line"></span><br><span class="line">        // 第三步: 打开数据库</span><br><span class="line">        conn.Open();</span><br><span class="line"></span><br><span class="line">        // 第四步: 查询</span><br><span class="line">        double salaryMax = (double)command.ExecuteScalar();</span><br><span class="line"></span><br><span class="line">        return salaryMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决 SQL 注入，最朴素的方式，是对传入的字符串中的特殊字符进行替换:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 但是要注意，这种方式绝对不可能 100% 防止注入</span><br><span class="line">city = city.Replace(&#x27;-&#x27;, &#x27;、&#x27;);</span><br><span class="line">city = city.Replace(&#x27;\&#x27;&#x27;, &#x27;’&#x27;);</span><br></pre></td></tr></table></figure><p>Parameters 可以 a) 简化代码 b) 防止 SQL 注入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        GetSalayMaxFromCity(&quot;珠海&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void 这就是SQL注入问题()</span><br><span class="line">    &#123;</span><br><span class="line">        var city = &quot;珠海&#x27;;drop table lagou_position;select * from lagou_position where 1=&#x27;&quot;;</span><br><span class="line"></span><br><span class="line">        var sql0 = $&quot;select * from lagou_position where city = &#x27;&#123;city&#125;&#x27;&quot;;</span><br><span class="line">        Console.WriteLine(sql0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void GetSalayMaxFromCity(string city)</span><br><span class="line">    &#123;</span><br><span class="line">        // 第一步: 创建连接</span><br><span class="line">        using var conn = new SqlConnection(&quot;server=.;database=lagou;uid=sa;pwd=sa&quot;);</span><br><span class="line"></span><br><span class="line">        // 第二步: 组织语句</span><br><span class="line">        var command = new SqlCommand(&quot;select top 5 city, position from lagou_position where city=@xxx and salary_min &gt; @aaa&quot;, conn);</span><br><span class="line"></span><br><span class="line">        //command.Parameters.AddWithValue(&quot;xxx&quot;, city); // 绑定到了 xxx 位置</span><br><span class="line">        //command.Parameters.AddWithValue(&quot;aaa&quot;, 20);</span><br><span class="line"></span><br><span class="line">        command.Parameters.AddRange(new[]</span><br><span class="line">        &#123;</span><br><span class="line">            new SqlParameter(&quot;xxx&quot;, SqlDbType.VarChar) &#123;Value = city&#125;,</span><br><span class="line">            new SqlParameter(&quot;aaa&quot;, SqlDbType.Int) &#123;Value = 20&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //command.Parameters.Add(&quot;xxx&quot;, SqlDbType.VarChar);</span><br><span class="line">        //command.Parameters[&quot;xxx&quot;].Value = city;</span><br><span class="line"></span><br><span class="line">        //var param = new SqlParameter(&quot;xxx&quot;, SqlDbType.VarChar);</span><br><span class="line">        //param.Value = city;</span><br><span class="line">        //command.Parameters.Add(param);</span><br><span class="line"></span><br><span class="line">        //command.Parameters.Add(new SqlParameter(&quot;xxx&quot;, SqlDbType.VarChar) &#123;Value = city&#125;);</span><br><span class="line"></span><br><span class="line">        // 第三步: 打开数据库</span><br><span class="line">        conn.Open();</span><br><span class="line"></span><br><span class="line">        // 第四步: 查询</span><br><span class="line">        using var reader = command.ExecuteReader();</span><br><span class="line">        while (reader.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;-- &#123;reader[0]&#125;: &#123;reader[&quot;position&quot;]&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="24-1-3-SqlDataReader-vs-SqlDataAdapter-x2F-DataTable"><a href="#24-1-3-SqlDataReader-vs-SqlDataAdapter-x2F-DataTable" class="headerlink" title="24.1.3. SqlDataReader vs SqlDataAdapter&#x2F;DataTable"></a>24.1.3. SqlDataReader vs SqlDataAdapter&#x2F;DataTable</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    using var conn = DbHelper.GetConnection();</span><br><span class="line">    var command = new SqlCommand(&quot;select * from students&quot;, conn);</span><br><span class="line">    using var reader = command.ExecuteReader();</span><br><span class="line"></span><br><span class="line">    DataTable dataTable = new DataTable();</span><br><span class="line">    dataTable.Load(reader);</span><br><span class="line"></span><br><span class="line">    foreach (DataRow row in dataTable.Rows)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine($&quot;&#123;row[0]&#125;:&#123;row[1]&#125;:&#123;row[2]&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = new DataTable();</span><br><span class="line"></span><br><span class="line">    using var conn = DbHelper.GetConnection();</span><br><span class="line">    var adapter = new SqlDataAdapter(&quot;select name, tiwen_cishu, tiwen_fenshu from students where gid = @gid&quot;, conn);</span><br><span class="line">    adapter.SelectCommand.Parameters.AddWithValue(&quot;gid&quot;, 2);</span><br><span class="line">    adapter.Fill(dataTable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24-2-示例数据库"><a href="#24-2-示例数据库" class="headerlink" title="24.2. 示例数据库"></a>24.2. 示例数据库</h3><ul><li>Sakila: <a href="https://github.com/ivanceras/sakila">https://github.com/ivanceras/sakila</a></li><li>Northwind&#x2F;AdventureWorks: <a href="https://github.com/Microsoft/sql-server-samples">https://github.com/Microsoft/sql-server-samples</a></li><li>生成示例数据库: <a href="https://mockaroo.com/">https://mockaroo.com/</a></li></ul><h2 id="25-BCL-Base-Class-Library-基础类库"><a href="#25-BCL-Base-Class-Library-基础类库" class="headerlink" title="25. BCL (Base-Class Library) 基础类库"></a>25. BCL (Base-Class Library) 基础类库</h2><h3 id="25-1-Console-x2F-控制台"><a href="#25-1-Console-x2F-控制台" class="headerlink" title="25.1. Console&#x2F;控制台"></a>25.1. Console&#x2F;控制台</h3><p>相关方法和属性:</p><ul><li>Console.Write&#x2F;WriteLine，用来向控制台输出内容</li><li>Console.Clear，用来清空屏幕内容</li><li>Console.ForegroundColor&#x2F;BackgroudColor&#x2F;ResetColor，用来设置控制台颜色</li><li>Console.ReadLine，用来从控制台读取用户输入的字符串</li><li>Console.ReadKey，用来读取按键，返回一个 ConsoleKeyInfo 对象</li><li>Console.Beep，用来让控制台发出声音</li></ul><p>相关类和结构:</p><ul><li>Console</li><li>ConsoleColor</li><li>ConsoleKey&#x2F;ConsoleKeyInfo</li></ul><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> 1: Console.WriteLine();</span><br><span class="line"> 2: while (true) // 通过 while 循环可以实现不断输入不断看到输入结果的过程</span><br><span class="line"> 3: &#123;</span><br><span class="line"> 4:     // ReadKey 是微软封装在 Console 里的一个方法，用来读取控制台上的按键</span><br><span class="line"> 5:     // 我们不需要关心它怎么实现的，我们只需要关心它如何使用</span><br><span class="line"> 6:     // 微软在实现里，将我们按下的键的信息，封装到了一个叫 ConsoleKeyInfo 的数据包里 (实例对象)</span><br><span class="line"> 7:     // 调用 ReadKey 之后，就可以通过这个实例对象 key 所提供的可访问接口判断按键信息了</span><br><span class="line"> 8:     ConsoleKeyInfo key = Console.ReadKey(true); // true 的意思是，不在屏幕上显示键入的字符</span><br><span class="line"> 9:     if (key.Key == ConsoleKey.D1)</span><br><span class="line">10:     &#123;</span><br><span class="line">11:         Console.WriteLine(&quot;您输入了一个 1&quot;);</span><br><span class="line">12:     &#125;</span><br><span class="line">13:     else if (key.Key == ConsoleKey.S)</span><br><span class="line">14:     &#123;</span><br><span class="line">15:         Console.Beep(); // Beep 是微软实现在 Console 里的一个方法，用来让控制台发出声音</span><br><span class="line">16:     &#125;</span><br><span class="line">17:     else if (key.KeyChar == &#x27;d&#x27;)</span><br><span class="line">18:     &#123;</span><br><span class="line">19:         Console.Beep(600, 200); // Beep 方法是重载的，它可以携带参数</span><br><span class="line">20:     &#125;</span><br><span class="line">21:     else if (key.KeyChar == &#x27;f&#x27;)</span><br><span class="line">22:     &#123;</span><br><span class="line">23:         Console.Beep(200, 200);</span><br><span class="line">24:     &#125;</span><br><span class="line">25:     else if (key.Key == ConsoleKey.Enter)</span><br><span class="line">26:     &#123;</span><br><span class="line">27:         break;</span><br><span class="line">28:     &#125;</span><br><span class="line">29:     else</span><br><span class="line">30:     &#123;</span><br><span class="line">31:         Console.WriteLine($&quot;key: &#123;key&#125;, keyChar: &#123;key.KeyChar&#125;, key: &#123;key.Key&#125;&quot;);</span><br><span class="line">32:     &#125;</span><br><span class="line">33: &#125;</span><br></pre></td></tr></table></figure><h3 id="25-2-Random-x2F-Thread"><a href="#25-2-Random-x2F-Thread" class="headerlink" title="25.2. Random&#x2F;Thread"></a>25.2. Random&#x2F;Thread</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ConsoleColor[] colors = new ConsoleColor[]</span><br><span class="line">&#123;</span><br><span class="line">    ConsoleColor.Red, ConsoleColor.Green, ConsoleColor.Yellow</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    // Console.WriteLine(&quot;hello &#123;0&#125;&quot;, DateTime.Now);</span><br><span class="line">    // var timer = new Timer(null, TimeSpan(1), TimeSpan(2));</span><br><span class="line">    Thread.Sleep(1000); // 题外话，这个 1000 毫秒并不是非常准确</span><br><span class="line">    // Task.Delay(1000).Wait();</span><br><span class="line"></span><br><span class="line">    //Console.WriteLine(colors[i]);</span><br><span class="line">    //i = i + 1;</span><br><span class="line">    //if (i == 3) i = 0;</span><br><span class="line"></span><br><span class="line">    //Console.WriteLine(colors[i]);</span><br><span class="line">    //i = (i + 1) % 3;</span><br><span class="line"></span><br><span class="line">    //Console.WriteLine(colors[(i++) % 3]);</span><br><span class="line"></span><br><span class="line">    System.Random random = new System.Random();</span><br><span class="line">    int r = random.Next(colors.Length); // Next(3): 0, 1, 2</span><br><span class="line">    Console.WriteLine(colors[r]);</span><br><span class="line"></span><br><span class="line">    Console.Clear(); // 清空屏幕</span><br><span class="line">    Console.ResetColor(); // 重置颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-3-IDisposable-x2F-资源"><a href="#25-3-IDisposable-x2F-资源" class="headerlink" title="25.3. IDisposable&#x2F;资源"></a>25.3. IDisposable&#x2F;资源</h3><ul><li>资源，是指需要在操作系统中打开，用完之后，需要手动释放的对象</li><li>为什么需要手动释放呢？因为 .NET 平台不是万能的。虽然 .NET 平台有垃圾回收器，你不再需要的 对象，它会自动帮你清理掉，但是有些东西它是无法确定你到底还需不需要，所以无法帮助你自动处理。 你也只能手动释放或关闭</li><li>对于一些资源，必须要手动释放或关闭</li></ul><p>对于普通的对象，是可以被 GC 自动回收的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建的任何对象，都是可以被垃圾回收器 (GC) 自动释放</span><br><span class="line">// 因此，我们只需要 new 然后使用就可以了，其他的内存管理无需你关心</span><br><span class="line">for (int i = 0; i &lt; 100000000; i++)</span><br><span class="line">&#123;</span><br><span class="line">    var a = new Book(); // 创建多少个都会被自动释放，绝对安全</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是对于一些依赖系统的资源，必须要手动释放:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 像文件这样的资源，打开之后，必须要手动释放</span><br><span class="line">var fs = File.OpenRead(fileName);</span><br><span class="line">Console.WriteLine(5/0); // 代表使用 (2)</span><br><span class="line">fs.Close();             // 手动关闭/释放</span><br><span class="line"></span><br><span class="line">// 上述的代码是有问题的，因为，如果 (2) 出现错误的话，那么释放的语句就无法执行</span><br><span class="line">// 为了解决这个问题，可以使用 finally 语法，对整个资源释放的代码进行重构</span><br><span class="line">FileStream fs = null;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    fs = File.OpenRead(fileName);</span><br><span class="line">    Console.WriteLine(fs);</span><br><span class="line">    Console.WriteLine(5/0);</span><br><span class="line">    Console.WriteLine(&quot;其他你所需要做的事情&quot;);</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">    if (fs != null)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            fs.Close();</span><br><span class="line">        &#125;</span><br><span class="line">        catch</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;关闭失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可以使用 using 对上述代码进行简化</span><br><span class="line">// 必须让 FileStream 里面实现一个叫 Dispose 的方法</span><br><span class="line">// 为了保证你必须实现一个 Dispose 方法，你必须要实现 IDisposable 接口</span><br><span class="line">using (FileStream fs = File.OpenRead(fileName))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(fs);</span><br><span class="line">    Console.WriteLine(5/0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最新的 C# 版本又给了新的糖</span><br><span class="line">using FileStream fs = File.OpenRead(fileName); // fs 在后面碰到 &#125; 后，会自动释放</span><br><span class="line">Console.WriteLine(fs);</span><br><span class="line">Console.WriteLine(5/0);</span><br></pre></td></tr></table></figure><h3 id="25-4-Stopwatch-x2F-秒表"><a href="#25-4-Stopwatch-x2F-秒表" class="headerlink" title="25.4. Stopwatch&#x2F;秒表"></a>25.4. Stopwatch&#x2F;秒表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">Stopwatch sw = new Stopwatch();</span><br><span class="line">sw.Start();</span><br><span class="line">// .....</span><br><span class="line">Console.WriteLine(sw.ElapsedMillionseconds);  // 1111ms</span><br><span class="line">sw.Stop();</span><br></pre></td></tr></table></figure><h3 id="25-5-ConfigurationManager-x2F-配置管理器"><a href="#25-5-ConfigurationManager-x2F-配置管理器" class="headerlink" title="25.5. ConfigurationManager&#x2F;配置管理器"></a>25.5. ConfigurationManager&#x2F;配置管理器</h3><p>首先，需要引入包:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package System.Configuration.ConfigurationManager</span><br></pre></td></tr></table></figure><p>其次，在 App.config 或 Web.config 中添加相应配置信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;connectionStrings&gt;</span><br><span class="line">    &lt;clear/&gt;</span><br><span class="line">    &lt;add name=&quot;blogdb&quot; connectionString=&quot;server=.;database=ccc;uid=sa;pwd=sa&quot;/&gt;</span><br><span class="line">  &lt;/connectionStrings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>最后，在程序中使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var dbString = ConfigurationManager.ConnectionStrings[&quot;blogdb&quot;].ConnectionString;</span><br></pre></td></tr></table></figure><h3 id="25-6-RegularExpression-x2F-正则表达式"><a href="#25-6-RegularExpression-x2F-正则表达式" class="headerlink" title="25.6. RegularExpression&#x2F;正则表达式"></a>25.6. RegularExpression&#x2F;正则表达式</h3><p><a href="https://regexlearn.com/">https://regexlearn.com/</a></p><p>电话号码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^1[3578][0-9]&#123;9&#125;$</span><br></pre></td></tr></table></figure><p>邮箱地址:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z][a-zA-Z0<span class="number">-9</span>_]&#123;<span class="number">5</span>,<span class="number">17</span>&#125;@[a-z0<span class="number">-9</span>]+\.(com|net|edu.cn|org)$</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">xxx1</span> (<span class="params"><span class="built_in">string</span> input, <span class="built_in">string</span> regexp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// var r = new Regex(&quot;^1[3578][0-9]&#123;9&#125;$&quot;);</span></span><br><span class="line">    <span class="keyword">var</span> r = Regex.IsMatch(input, regexp);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;input&#125;</span>     <span class="subst">&#123;regexp&#125;</span>: <span class="subst">&#123;r&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">xxx2</span> (<span class="params"><span class="built_in">string</span> input, <span class="built_in">string</span> regexp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//var m = Regex.Match(input, regexp);</span></span><br><span class="line">    <span class="keyword">var</span> ms = Regex.Matches(input, regexp);</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, ms);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;input&#125;</span>     <span class="subst">&#123;regexp&#125;</span>: <span class="subst">&#123;r&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">xxx3</span> (<span class="params"><span class="built_in">string</span> input, <span class="built_in">string</span> regexp</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Regex.Replace(input, regexp, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">xxx4</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">&quot;hello   =   , world,  -      where _ , are&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> ws = Regex.Split(s, <span class="string">&quot;[^a-zA-Z]+&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">string</span>.Join(<span class="string">&quot;!!&quot;</span>, ws);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;r&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="26-问题-仅作参考"><a href="#26-问题-仅作参考" class="headerlink" title="26. 问题 (仅作参考)"></a>26. 问题 (仅作参考)</h2><h3 id="26-1-string-和-StringBuilder-有什么区别"><a href="#26-1-string-和-StringBuilder-有什么区别" class="headerlink" title="26.1. string 和 StringBuilder 有什么区别"></a>26.1. string 和 StringBuilder 有什么区别</h3><ul><li>string 是一种预定义类型，它表达的是字符的有序组合</li><li>StringBuilder 是定义在 BCL 中的类型，它主要用来进行字符串的拼接</li><li>string 是不可变的，所以在进行拼接等操作的时候，效率会非常低</li><li>StringBuilder 是可变的一种类型，所以在字符串拼接的时候，效率相对高多了</li><li>因此，在进行字符串拼接的操作的时候，我们一般使用 StringBuilder 进行构建，从而提升效率</li></ul><h3 id="26-2-什么是抽象类，抽象类有什么用处"><a href="#26-2-什么是抽象类，抽象类有什么用处" class="headerlink" title="26.2. 什么是抽象类，抽象类有什么用处"></a>26.2. 什么是抽象类，抽象类有什么用处</h3><h3 id="26-3-什么是接口，什么是面向接口编程，面向接口编程有什么好处"><a href="#26-3-什么是接口，什么是面向接口编程，面向接口编程有什么好处" class="headerlink" title="26.3. 什么是接口，什么是面向接口编程，面向接口编程有什么好处"></a>26.3. 什么是接口，什么是面向接口编程，面向接口编程有什么好处</h3><h3 id="26-4-什么是静态类，什么是密封类，什么是分部类"><a href="#26-4-什么是静态类，什么是密封类，什么是分部类" class="headerlink" title="26.4. 什么是静态类，什么是密封类，什么是分部类"></a>26.4. 什么是静态类，什么是密封类，什么是分部类</h3><h3 id="26-5-什么是类，什么是对象，对象的实例化过程是怎么样的"><a href="#26-5-什么是类，什么是对象，对象的实例化过程是怎么样的" class="headerlink" title="26.5. 什么是类，什么是对象，对象的实例化过程是怎么样的"></a>26.5. 什么是类，什么是对象，对象的实例化过程是怎么样的</h3><h3 id="26-6-什么是面向对象编程，面向对象有什么特点，有什么好处"><a href="#26-6-什么是面向对象编程，面向对象有什么特点，有什么好处" class="headerlink" title="26.6. 什么是面向对象编程，面向对象有什么特点，有什么好处"></a>26.6. 什么是面向对象编程，面向对象有什么特点，有什么好处</h3><h3 id="26-7-重载-overload-和-重写-override-有啥区别-15-分"><a href="#26-7-重载-overload-和-重写-override-有啥区别-15-分" class="headerlink" title="26.7. 重载 (overload) 和 重写 (override) 有啥区别 (15 分)"></a>26.7. 重载 (overload) 和 重写 (override) 有啥区别 (15 分)</h3><h3 id="26-8-什么是字段，什么是方法，什么是属性。属性有什么好处"><a href="#26-8-什么是字段，什么是方法，什么是属性。属性有什么好处" class="headerlink" title="26.8. 什么是字段，什么是方法，什么是属性。属性有什么好处"></a>26.8. 什么是字段，什么是方法，什么是属性。属性有什么好处</h3><h3 id="26-9-什么是封装，什么是继承，什么是多态"><a href="#26-9-什么是封装，什么是继承，什么是多态" class="headerlink" title="26.9. 什么是封装，什么是继承，什么是多态"></a>26.9. 什么是封装，什么是继承，什么是多态</h3><h3 id="26-10-什么是虚方法，它有什么用处"><a href="#26-10-什么是虚方法，它有什么用处" class="headerlink" title="26.10. 什么是虚方法，它有什么用处"></a>26.10. 什么是虚方法，它有什么用处</h3><h3 id="26-11-什么是组合，它跟继承有什么区别，分别用在什么场景"><a href="#26-11-什么是组合，它跟继承有什么区别，分别用在什么场景" class="headerlink" title="26.11. 什么是组合，它跟继承有什么区别，分别用在什么场景"></a>26.11. 什么是组合，它跟继承有什么区别，分别用在什么场景</h3><h3 id="26-12-什么是-DRY，代码复用的手段有哪些"><a href="#26-12-什么是-DRY，代码复用的手段有哪些" class="headerlink" title="26.12. 什么是 DRY，代码复用的手段有哪些"></a>26.12. 什么是 DRY，代码复用的手段有哪些</h3><h3 id="26-13-Parse-x2F-TryParse-有啥区别"><a href="#26-13-Parse-x2F-TryParse-有啥区别" class="headerlink" title="26.13. Parse&#x2F;TryParse 有啥区别"></a>26.13. Parse&#x2F;TryParse 有啥区别</h3><ul><li>这两个都是用来将字符串转换为其他类型</li><li>遇到转换失败的时候</li><li>Parse 会直接抛出异常</li><li>而 TryParse，会根据是否转换成功返回 True&#x2F;False, 它不会抛出异常</li></ul><h3 id="26-14-什么是装箱拆箱"><a href="#26-14-什么是装箱拆箱" class="headerlink" title="26.14. 什么是装箱拆箱"></a>26.14. 什么是装箱拆箱</h3><ul><li>装箱是将值类型转换为 object 的过程</li><li>拆箱是将装箱后的 object 转换为对应的值类型的过程</li></ul><h3 id="26-15-什么是值类型-x2F-引用类型"><a href="#26-15-什么是值类型-x2F-引用类型" class="headerlink" title="26.15. 什么是值类型&#x2F;引用类型"></a>26.15. 什么是值类型&#x2F;引用类型</h3><ul><li>变量位置保存的是类型实例自身，这样的类型叫 <strong>值类型</strong></li><li>变量位置保存的是类型实例的引用，这样的类型叫 <strong>引用类型</strong></li></ul><h3 id="26-16-is-x2F-as-分别是干啥的"><a href="#26-16-is-x2F-as-分别是干啥的" class="headerlink" title="26.16. is&#x2F;as 分别是干啥的"></a>26.16. is&#x2F;as 分别是干啥的</h3><ul><li>is 用来判断左边的实例是否是右边的类型。是的 true，不是的话 false。 它常用来跟显式转换配合使用</li><li>as 和显式转换相似，但它不会抛出异常，如果成功返回转换结果，失败返回 null</li></ul><h2 id="27-代码生成器"><a href="#27-代码生成器" class="headerlink" title="27. 代码生成器"></a>27. 代码生成器</h2><ul><li>动软代码生成器</li><li>Codematic</li></ul><p>链接:</p><ul><li><a href="https://www.cnblogs.com/huangguojin/p/5299153.html">https://www.cnblogs.com/huangguojin/p/5299153.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C#&quot;&gt;&lt;/a&gt;C#&lt;/h1&gt;&lt;h2 id=&quot;1-历史&quot;&gt;&lt;a href=&quot;#1-历史&quot; class=&quot;headerlink&quot; title=&quot;1. 历史&quot;&gt;&lt;/a&gt;1. 历史&lt;/h</summary>
      
    
    
    
    <category term="教程" scheme="http://mobai278.github.io.git/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="C#语法" scheme="http://mobai278.github.io.git/tags/C-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
